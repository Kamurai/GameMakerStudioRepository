<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>cursor_board</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//ensure "blinking" image
image_speed = .25;

//used to determine if a character has been selected
selection = 0;</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="70">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//selecting characters on the board

//if the board has focus 

if( board_controller.boardfocus = 1 )
{
    //if no selection has been made AND the space is not empty (filled with a character)
    if( selection == 0 &amp;&amp; place_meeting(x, y, board_character) == true )
    {   
        //set the selection
        selection = 1;
        
        //create the select object around the selected character
        instance_create(x, y, board_select);
        
        //create an arrow at the menu screen
        instance_create(mkr_menu.x, mkr_menu.y, menu_arrow);
        
        //remove focus from the board
        board_controller.boardfocus = 0;
    }
    //else if there is a selection made
    else if( selection == 1)
    {
        //if movement is being performed
        if( board_controller.movefocus == 1)
        {
            //reset movetracker
            board_controller.movetracker = 0;
            
            //create a target object
            instance_create(x, y, board_target);
            
            //remove selection
            selection = 0;
        }
        //if attack is being performed AND the space is not empty (filled with a character) 
        else if( board_controller.attackfocus == 1 &amp;&amp; place_meeting(x, y, board_character) == true)
        {
            //reset movetracker
            board_controller.movetracker = 0;
            
            //create a target object
            instance_create(x, y, board_target);
            
            //remove selection
            selection = 0;
        }
        //if a technique is being performed AND the space is not empty (filled with a character)
        else if( board_controller.techniquefocus == 1 &amp;&amp; place_meeting(x, y, board_character) == true)
        {
            //reset movetracker
            board_controller.movetracker = 0;
            
            //create a target object
            instance_create(x, y, board_target);
            
            //destroy select object
            board_select.destroy = 1;
            
            //remove selection
            selection = 0;
        }
        //if magic is being performed AND the space is not empty (filled with a character)
        else if( board_controller.magicfocus == 1 &amp;&amp; place_meeting(x, y, board_character) == true)
        {
            //reset movetracker
            board_controller.movetracker = 0;
            
            //create a target object
            instance_create(x, y, board_target);
            
            //destroy select object
            board_select.destroy = 1;
            
            //remove selection
            selection = 0;
        }
        //if item is being performed AND the space is not empty (filled with a character)
        else if( board_controller.itemfocus == 1 &amp;&amp; place_meeting(x, y, board_character) == true)
        {
            //reset movetracker
            board_controller.movetracker = 0;
            
            //create a target object
            instance_create(x, y, target);
            
            //destroy select object
            board_select.destroy = 1;
            
            //remove selection
            selection = 0;
        }

        //reset board state
        
        
    

    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//reseting designated path

//if the board has focus
if( board_controller.boardfocus = 1 )
{
    //if there is a selection made AND the cursor has been moved
    if( selection == 1 &amp;&amp; board_controller.movetracker != 0 )
    {
        x = board_select.x;
        y = board_select.y;
        board_controller.movetracker = 0;
    }
    //else if there is a selection made AND the cursor is on the select object
    else if( selection == 1 &amp;&amp; board_controller.movetracker == 0 )
    {
        //if the select object is being "selected"
        if( board_select.y == y &amp;&amp; board_select.x == x )
        {
            //remove the selection
            selection = 0;
            //destroy select object
            board_select.destroy = 1;
            
            //clear focus
            board_controller.movefocus = 0;
            board_controller.attackfocus = 0;
            board_controller.techniquefocus = 0;
            board_controller.magicfocus = 0;
            board_controller.itemfocus = 0;
            
            //clear selections
            board_controller.techniqueselect = 0;
            board_controller.magicselect = 0;
            board_controller.itemselect = 0;
            
            //clear loaded information
            board_controller.accuracy = 0;
            board_controller.accuracy2 = 0;
            board_controller.attackvalue = 0;
            board_controller.attackvalue2 = 0;
            

            board_controller.movelimit = 0;
            
            //clear trackers
            board_controller.rweapontracker = 0;
            board_controller.lweapontracker = 0;
            board_controller.techniquetracker = 0;
            board_controller.magictracker = 0;
            board_controller.itemtracker = 0;
            
            //clear character
            board_controller.clear = 1;

        }
        

        //reset board state
        
        
    

    }

}</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="40">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if the board has focus
if( board_controller.boardfocus == 1)
{
    //if a character is being moved
    if( board_controller.movefocus == 1 )
    {
        //if movetracker equals 0 (first move) AND position is empty AND within borders
        if( board_controller.movetracker == 0 &amp;&amp; place_empty( x , y + 36 ) == true &amp;&amp;  place_meeting(x, y + 1, border) == false )
        {
            //move cursor
            y = y + 36;
            
            //record movement
                //increment movetracker
                board_controller.movetracker = board_controller.movetracker + 1;
            
                //add new position to movement coordinates
                board_controller.xmovement[board_controller.movetracker] = x;
                board_controller.ymovement[board_controller.movetracker] = y;
        }
        //if movetracker is greater than 0
        else if( board_controller.movetracker &gt; 0 )
        {
            //if the new position is previously visited AND within borders
            if( board_controller.xmovement[board_controller.movetracker - 1] == (x) &amp;&amp; board_controller.ymovement[board_controller.movetracker - 1] == (y + 36) &amp;&amp;  place_meeting(x, y + 1, border) == false )
            {
                //move cursor
                y = y + 36;
            
                //erase "top-most" movement position
                board_controller.xmovement[board_controller.movetracker] = 0;
                board_controller.ymovement[board_controller.movetracker] = 0;
            
                //decrement movetracker
                board_controller.movetracker = board_controller.movetracker - 1;
            }
            //else if movelimit has not been reached AND position is empty AND within borders
            else if( board_controller.movetracker &lt; board_controller.movelimit &amp;&amp; place_empty( x , y + 36) == true &amp;&amp;  place_meeting(x, y + 1, border) == false )
            { 
                //move cursor
                y = y + 36;
                
                //record movement
                    //increment movetracker
                    board_controller.movetracker = board_controller.movetracker + 1;
            
                    //add new position to movement coordinates
                    board_controller.xmovement[board_controller.movetracker] = x;
                    board_controller.ymovement[board_controller.movetracker] = y;

            }
        }
       
        
        
    }
    //targetting
    else if( board_controller.attackfocus == 1 || board_controller.techniquefocus = 1 || board_controller.magicfocus == 1 || board_controller.itemfocus == 1 )
    {
        //if movetracker equals 0 (first move) AND within borders
        if( board_controller.movetracker == 0 &amp;&amp; place_meeting(x, y + 1, border) == false )
        {
            //move cursor
            y = y + 36;
            
            //record movement
                //increment movetracker
                board_controller.movetracker = board_controller.movetracker + 1;
            
                //add new position to movement coordinates
                board_controller.xmovement[board_controller.movetracker] = x;
                board_controller.ymovement[board_controller.movetracker] = y;
        }
        //if movetracker is greater than 0
        else if( board_controller.movetracker &gt; 0 )
        {
            //if the new position is previously visited AND within borders
            if( board_controller.xmovement[board_controller.movetracker - 1] == (x) &amp;&amp; board_controller.ymovement[board_controller.movetracker - 1] == (y + 36) &amp;&amp;  place_meeting(x, y + 1, border) == false )
            {
                //move cursor
                y = y + 36;
            
                //erase "top-most" movement position
                board_controller.xmovement[board_controller.movetracker] = 0;
                board_controller.ymovement[board_controller.movetracker] = 0;
            
                //decrement movetracker
                board_controller.movetracker = board_controller.movetracker - 1;
            }
            //else if movelimit has not been reached AND within borders
            else if( board_controller.movetracker &lt; board_controller.movelimit &amp;&amp; place_meeting(x, y + 1, border) == false )
            { 
                //move cursor
                y = y + 36;
                
                //record movement
                    //increment movetracker
                    board_controller.movetracker = board_controller.movetracker + 1;
            
                    //add new position to movement coordinates
                    board_controller.xmovement[board_controller.movetracker] = x;
                    board_controller.ymovement[board_controller.movetracker] = y;

            }
        }
       
        
        
    }

    //else if there not a border in the way (selecting characters)
    else if( place_meeting(x, y + 1, border) == false )
    {
        y = y + 36;
    }
    
    
    
    
    
}</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="39">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if the board has focus
if( board_controller.boardfocus == 1)
{
    //if a character is being moved
    if( board_controller.movefocus == 1 )
    {
        //if movetracker equals 0 (first move) AND position is empty AND within borders
        if( board_controller.movetracker == 0 &amp;&amp; place_empty( x + 36, y ) ==  true  &amp;&amp;  place_meeting(x + 1, y, border) == false)
        {
            //move cursor
            x = x + 36;
            
            //record movement
                //increment movetracker
                board_controller.movetracker = board_controller.movetracker + 1;
                //add new position to movement coordinates
                board_controller.xmovement[board_controller.movetracker] = x;
                board_controller.ymovement[board_controller.movetracker] = y;
                
                
        }
        //if movetracker is greater than 0
        else if( board_controller.movetracker &gt; 0 )
        {
           //if the new position is previously visited AND within borders
            if( board_controller.xmovement[board_controller.movetracker - 1] == (x + 36) &amp;&amp; board_controller.ymovement[board_controller.movetracker - 1] == (y) &amp;&amp;  place_meeting(x + 1, y, border) == false)
            {
                //move cursor
                x = x + 36;
            
                //erase "top-most" movement position
                board_controller.xmovement[board_controller.movetracker] = 0;
                board_controller.ymovement[board_controller.movetracker] = 0;
            
                //decrement movetracker
                board_controller.movetracker = board_controller.movetracker - 1;
                
            }
            //else if movelimit has not been reached AND position is empty AND within borders
            else if( board_controller.movetracker &lt; board_controller.movelimit &amp;&amp; place_empty( x + 36, y ) == true &amp;&amp;  place_meeting(x + 1, y, border) == false )
            { 
                //move cursor
                x = x + 36;
                
                //record movement
                    //increment movetracker
                    board_controller.movetracker = board_controller.movetracker + 1;
            
                    //add new position to movement coordinates
                    board_controller.xmovement[board_controller.movetracker] = x;
                    board_controller.ymovement[board_controller.movetracker] = y;
            }
        }        
    }
    //targetting
    else if( board_controller.attackfocus == 1 || board_controller.techniquefocus = 1 || board_controller.magicfocus == 1 || board_controller.itemfocus == 1 )
    {
        //if movetracker equals 0 (first move) AND within borders
        if( board_controller.movetracker == 0 &amp;&amp;  place_meeting(x + 1, y, border) == false)
        {
            //move cursor
            x = x + 36;
            
            //record movement
                //increment movetracker
                board_controller.movetracker = board_controller.movetracker + 1;
                //add new position to movement coordinates
                board_controller.xmovement[board_controller.movetracker] = x;
                board_controller.ymovement[board_controller.movetracker] = y;
                
                
        }
        //if movetracker is greater than 0
        else if( board_controller.movetracker &gt; 0 )
        {
           //if the new position is previously visited AND within borders
            if( board_controller.xmovement[board_controller.movetracker - 1] == (x + 36) &amp;&amp; board_controller.ymovement[board_controller.movetracker - 1] == (y) &amp;&amp;  place_meeting(x + 1, y, border) == false)
            {
                //move cursor
                x = x + 36;
            
                //erase "top-most" movement position
                board_controller.xmovement[board_controller.movetracker] = 0;
                board_controller.ymovement[board_controller.movetracker] = 0;
            
                //decrement movetracker
                board_controller.movetracker = board_controller.movetracker - 1;
                
            }
            //else if movelimit has not been reached AND position is empty AND within borders
            else if( board_controller.movetracker &lt; board_controller.movelimit &amp;&amp;  place_meeting(x + 1, y, border) == false )
            { 
                //move cursor
                x = x + 36;
                
                //record movement
                    //increment movetracker
                    board_controller.movetracker = board_controller.movetracker + 1;
            
                    //add new position to movement coordinates
                    board_controller.xmovement[board_controller.movetracker] = x;
                    board_controller.ymovement[board_controller.movetracker] = y;
            }
        }        
    }

    //else if there not a border in the way (selecting characters)
    else if( place_meeting(x+1, y, border) == false )
    {
        x = x + 36;
    }
    
    
    
    
    
}</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="38">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if the board has focus
if( board_controller.boardfocus == 1)
{
    //if a character is being moved
    if( board_controller.movefocus == 1 )
    {
        //if movetracker equals 0 (first move) AND position is empty AND within borders
        if( board_controller.movetracker == 0 &amp;&amp; place_empty( x , y - 36 ) == true &amp;&amp;  place_meeting(x, y - 1, border) == false )
        {
            //move cursor
            y = y - 36;
            
            //record movement
                //increment movetracker
                board_controller.movetracker = board_controller.movetracker + 1;
            
                //add new position to movement coordinates
                board_controller.xmovement[board_controller.movetracker] = x;
                board_controller.ymovement[board_controller.movetracker] = y;
        }
        //if movetracker is greater than 0
        else if( board_controller.movetracker &gt; 0 )
        {
            //if the new position is previously visited AND within borders
            if( board_controller.xmovement[board_controller.movetracker - 1] == (x) &amp;&amp; board_controller.ymovement[board_controller.movetracker - 1] == (y - 36) &amp;&amp;  place_meeting(x, y - 1, border) == false )
            {
                //move cursor
                y = y - 36;
            
                //erase "top-most" movement position
                board_controller.xmovement[board_controller.movetracker] = 0;
                board_controller.ymovement[board_controller.movetracker] = 0;
            
                //decrement movetracker
                board_controller.movetracker = board_controller.movetracker - 1;
            }
            //else if movelimit has not been reached AND position is empty AND within borders
            else if( board_controller.movetracker &lt; board_controller.movelimit &amp;&amp; place_empty( x, y - 36 ) == true &amp;&amp;  place_meeting(x, y - 1, border) == false )
            { 
                //move cursor
                y = y - 36;
                
                //record movement
                    //increment movetracker
                    board_controller.movetracker = board_controller.movetracker + 1;
            
                    //add new position to movement coordinates
                    board_controller.xmovement[board_controller.movetracker] = x;
                    board_controller.ymovement[board_controller.movetracker] = y;

            }
        }
    }
    //targetting
    else if( board_controller.attackfocus == 1 || board_controller.techniquefocus = 1 || board_controller.magicfocus == 1 || board_controller.itemfocus == 1 )
    {
        //if movetracker equals 0 (first move) AND within borders
        if( board_controller.movetracker == 0 &amp;&amp;  place_meeting(x, y - 1, border) == false )
        {
            //move cursor
            y = y - 36;
            
            //record movement
                //increment movetracker
                board_controller.movetracker = board_controller.movetracker + 1;
            
                //add new position to movement coordinates
                board_controller.xmovement[board_controller.movetracker] = x;
                board_controller.ymovement[board_controller.movetracker] = y;
        }
        //if movetracker is greater than 0
        else if( board_controller.movetracker &gt; 0 )
        {
            //if the new position is previously visited AND within borders
            if( board_controller.xmovement[board_controller.movetracker - 1] == (x) &amp;&amp; board_controller.ymovement[board_controller.movetracker - 1] == (y - 36) &amp;&amp;  place_meeting(x, y - 1, border) == false )
            {
                //move cursor
                y = y - 36;
            
                //erase "top-most" movement position
                board_controller.xmovement[board_controller.movetracker] = 0;
                board_controller.ymovement[board_controller.movetracker] = 0;
            
                //decrement movetracker
                board_controller.movetracker = board_controller.movetracker - 1;
            }
            //else if movelimit has not been reached AND within borders
            else if( board_controller.movetracker &lt; board_controller.movelimit &amp;&amp;  place_meeting(x, y - 1, border) == false )
            { 
                //move cursor
                y = y - 36;
                
                //record movement
                    //increment movetracker
                    board_controller.movetracker = board_controller.movetracker + 1;
            
                    //add new position to movement coordinates
                    board_controller.xmovement[board_controller.movetracker] = x;
                    board_controller.ymovement[board_controller.movetracker] = y;

            }
        }
    }

    //else if there not a border in the way (selecting characters)
    else if( place_meeting(x, y - 1, border) == false )
    {
        y = y - 36;
    }
    
    
    
    
    
}</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="37">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if the board has focus
if( board_controller.boardfocus == 1)
{
    //if a character is being moved
    if( board_controller.movefocus == 1 )
    {
        //if movetracker equals 0 (first move) AND position is empty AND within borders
        if( board_controller.movetracker == 0 &amp;&amp; place_empty( x - 36, y ) == true &amp;&amp;  place_meeting(x - 1, y, border) == false)
        {
            //move cursor
            x = x - 36;
            
            //record movement
                //increment movetracker
                board_controller.movetracker = board_controller.movetracker + 1;
            
                //add new position to movement coordinates
                board_controller.xmovement[board_controller.movetracker] = x;
                board_controller.ymovement[board_controller.movetracker] = y;
        }
        //if movetracker is greater than 0
        else if( board_controller.movetracker &gt; 0 )
        {
            //if the new position is previously visited AND within borders
            if( board_controller.xmovement[board_controller.movetracker - 1] == (x - 36) &amp;&amp; board_controller.ymovement[board_controller.movetracker - 1] == (y) &amp;&amp;  place_meeting(x - 1, y, border) == false )
            {
                //move cursor
                x = x - 36;
            
                //erase "top-most" movement position
                board_controller.xmovement[board_controller.movetracker] = 0;
                board_controller.ymovement[board_controller.movetracker] = 0;
            
                //decrement movetracker
                board_controller.movetracker = board_controller.movetracker - 1;
            }
            //else if movelimit has not been reached AND position is empty AND within borders
            else if( board_controller.movetracker &lt; board_controller.movelimit &amp;&amp; place_empty( x - 36, y ) == true &amp;&amp;  place_meeting(x - 1, y, border) == false )
            { 
                //move cursor
                x = x - 36;
                
                //record movement
                    //increment movetracker
                    board_controller.movetracker = board_controller.movetracker + 1;
            
                    //add new position to movement coordinates
                    board_controller.xmovement[board_controller.movetracker] = x;
                    board_controller.ymovement[board_controller.movetracker] = y;

            }
        }
       
        
        
    }
    //targetting
    else if( board_controller.attackfocus == 1 || board_controller.techniquefocus = 1 || board_controller.magicfocus == 1 || board_controller.itemfocus == 1 )
    {
        //if movetracker equals 0 (first move) AND within borders
        if( board_controller.movetracker == 0 &amp;&amp;  place_meeting(x - 1, y, border) == false)
        {
            //move cursor
            x = x - 36;
            
            //record movement
                //increment movetracker
                board_controller.movetracker = board_controller.movetracker + 1;
            
                //add new position to movement coordinates
                board_controller.xmovement[board_controller.movetracker] = x;
                board_controller.ymovement[board_controller.movetracker] = y;
        }
        //if movetracker is greater than 0
        else if( board_controller.movetracker &gt; 0 )
        {
            //if the new position is previously visited AND within borders
            if( board_controller.xmovement[board_controller.movetracker - 1] == (x - 36) &amp;&amp; board_controller.ymovement[board_controller.movetracker - 1] == (y) &amp;&amp;  place_meeting(x - 1, y, border) == false )
            {
                //move cursor
                x = x - 36;
            
                //erase "top-most" movement position
                board_controller.xmovement[board_controller.movetracker] = 0;
                board_controller.ymovement[board_controller.movetracker] = 0;
            
                //decrement movetracker
                board_controller.movetracker = board_controller.movetracker - 1;
            }
            //else if movelimit has not been reached AND within borders
            else if( board_controller.movetracker &lt; board_controller.movelimit &amp;&amp;  place_meeting(x - 1, y, border) == false )
            { 
                //move cursor
                x = x - 36;
                
                //record movement
                    //increment movetracker
                    board_controller.movetracker = board_controller.movetracker + 1;
            
                    //add new position to movement coordinates
                    board_controller.xmovement[board_controller.movetracker] = x;
                    board_controller.ymovement[board_controller.movetracker] = y;

            }
        }
       
        
        
    }

    //else if there not a border in the way (selecting characters)
    else if( place_meeting(x-1, y, border) == false )
    {
        x = x - 36;
    }
    
    
    
    
    
}</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="70">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//the focus is going from the board to the menu
    //if the focus is not on the board
if( board_controller.boardfocus == 0)
{
    board_controller.menufocus = 1;
}</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
