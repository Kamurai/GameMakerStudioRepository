<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//check position

    //player 1
        //first row
//if this is player 1's marker 1
if( x == 6 &amp;&amp; y == 6 &amp;&amp; global.class[1,1] != 0 )
{
    //based on position, find appropriate class
    class = global.class[1,1];
}   
//if this is player 1's marker 2
else if( x == 42 &amp;&amp; y == 6 &amp;&amp; global.class[1,2] != 0 )
{
    //based on position, find appropriate class
    class = global.class[1,2];
}
//if this is player 1's marker 3
else if( x == 78 &amp;&amp; y == 6 &amp;&amp; global.class[1,3] != 0 )
{
    //based on position, find appropriate class
    class = global.class[1,3];
}
//if this is player 1's marker 4
else if( x == 114 &amp;&amp; y == 6 &amp;&amp; global.class[1,4] != 0 )
{
    //based on position, find appropriate class
    class = global.class[1,4];
}
//if this is player 1's marker 5
else if( x == 150 &amp;&amp; y == 6 &amp;&amp; global.class[1,5] != 0 )
{
    //based on position, find appropriate class
    class = global.class[1,5];
}
//if this is player 1's marker 6
else if( x == 186 &amp;&amp; y == 6 &amp;&amp; global.class[1,6] != 0 )
{
    //based on position, find appropriate class
    class = global.class[1,6];
}
//if this is player 1's marker 7
else if( x == 222 &amp;&amp; y == 6 &amp;&amp; global.class[1,7] != 0 )
{
    //based on position, find appropriate class
    class = global.class[1,7];
}
//if this is player 1's marker 8
else if( x == 258 &amp;&amp; y == 6 &amp;&amp; global.class[1,8] != 0 )
{
    //based on position, find appropriate class
    class = global.class[1,8];
}
//if this is player 1's marker 9
else if( x == 294 &amp;&amp; y == 6 &amp;&amp; global.class[1,9] != 0 )
{
    //based on position, find appropriate class
    class = global.class[1,9];
}
//if this is player 1's marker 10
else if( x == 330 &amp;&amp; y == 6 &amp;&amp; global.class[1,10] != 0 )
{
    //based on position, find appropriate class
    class = global.class[1,10];
}
//if this is player 1's marker 11
else if( x == 366 &amp;&amp; y == 6 &amp;&amp; global.class[1,11] != 0 )
{
    //based on position, find appropriate class
    class = global.class[1,11];
}
//if this is player 1's marker 12
else if( x == 402 &amp;&amp; y == 6 &amp;&amp; global.class[1,12] != 0 )
{
    //based on position, find appropriate class
    class = global.class[1,12];
}
//second row
//if this is player 1's marker 13
else if( x == 6 &amp;&amp; y == 42 &amp;&amp; global.class[1,13] != 0 )
{
    //based on position, find appropriate class
    class = global.class[1,13];
}   
//if this is player 1's marker 14
else if( x == 42 &amp;&amp; y == 42 &amp;&amp; global.class[1,14] != 0 )
{
    //based on position, find appropriate class
    class = global.class[1,14];
}
//if this is player 1's marker 15
else if( x == 78 &amp;&amp; y == 42 &amp;&amp; global.class[1,15] != 0 )
{
    //based on position, find appropriate class
    class = global.class[1,15];
}
//if this is player 1's marker 16
else if( x == 114 &amp;&amp; y == 42 &amp;&amp; global.class[1,16] != 0 )
{
    //based on position, find appropriate class
    class = global.class[1,16];
}
//if this is player 1's marker 17
else if( x == 150 &amp;&amp; y == 42 &amp;&amp; global.class[1,17] != 0 )
{
    //based on position, find appropriate class
    class = global.class[1,17];
}
//if this is player 1's marker 18
else if( x == 186 &amp;&amp; y == 42 &amp;&amp; global.class[1,18] != 0 )
{
    //based on position, find appropriate class
    class = global.class[1,18];
}
//if this is player 1's marker 19
else if( x == 222 &amp;&amp; y == 42 &amp;&amp; global.class[1,19] != 0 )
{
    //based on position, find appropriate class
    class = global.class[1,19];
}
//if this is player 1's marker 20
else if( x == 258 &amp;&amp; y == 42 &amp;&amp; global.class[1,20] != 0 )
{
    //based on position, find appropriate class
    class = global.class[1,20];
}
//if this is player 1's marker 21
else if( x == 294 &amp;&amp; y == 42 &amp;&amp; global.class[1,21] != 0 )
{
    //based on position, find appropriate class
    class = global.class[1,21];
}
//if this is player 1's marker 22
else if( x == 330 &amp;&amp; y == 42 &amp;&amp; global.class[1,22] != 0 )
{
    //based on position, find appropriate class
    class = global.class[1,22];
}
//if this is player 1's marker 23
else if( x == 366 &amp;&amp; y == 42 &amp;&amp; global.class[1,23] != 0 )
{
    //based on position, find appropriate class
    class = global.class[1,23];
}
//if this is player 1's marker 24
else if( x == 402 &amp;&amp; y == 42 &amp;&amp; global.class[1,24] != 0 )
{
    //based on position, find appropriate class
    class = global.class[1,24];
}


//player 2

//first row
//if this is player 2's marker 1
else if( x == 6 &amp;&amp; y == 366 &amp;&amp; global.class[2,1] != 0 )
{
    //based on position, find appropriate class
    class = global.class[2,1];
}   
//if this is player 2's marker 2
else if( x == 42 &amp;&amp; y == 366 &amp;&amp; global.class[2,2] != 0 )
{
    //based on position, find appropriate class
    class = global.class[2,2];
}
//if this is player 2's marker 3
else if( x == 78 &amp;&amp; y == 366 &amp;&amp; global.class[2,3] != 0 )
{
    //based on position, find appropriate class
    class = global.class[2,3];
}
//if this is player 2's marker 4
else if( x == 114 &amp;&amp; y == 366 &amp;&amp; global.class[2,4] != 0 )
{
    //based on position, find appropriate class
    class = global.class[2,4];
}
//if this is player 2's marker 5
else if( x == 150 &amp;&amp; y == 366 &amp;&amp; global.class[2,5] != 0 )
{
    //based on position, find appropriate class
    class = global.class[2,5];
}
//if this is player 2's marker 6
else if( x == 186 &amp;&amp; y == 366 &amp;&amp; global.class[2,6] != 0 )
{
    //based on position, find appropriate class
    class = global.class[2,6];
}
//if this is player 2's marker 7
else if( x == 222 &amp;&amp; y == 366 &amp;&amp; global.class[2,7] != 0 )
{
    //based on position, find appropriate class
    class = global.class[2,7];
}
//if this is player 2's marker 8
else if( x == 258 &amp;&amp; y == 366 &amp;&amp; global.class[2,8] != 0 )
{
    //based on position, find appropriate class
    class = global.class[2,8];
}
//if this is player 2's marker 9
else if( x == 294 &amp;&amp; y == 366 &amp;&amp; global.class[2,9] != 0 )
{
    //based on position, find appropriate class
    class = global.class[2,9];
}
//if this is player 2's marker 10
else if( x == 330 &amp;&amp; y == 366 &amp;&amp; global.class[2,10] != 0 )
{
    //based on position, find appropriate class
    class = global.class[2,10];
}
//if this is player 2's marker 11
else if( x == 366 &amp;&amp; y == 366 &amp;&amp; global.class[2,11] != 0 )
{
    //based on position, find appropriate class
    class = global.class[2,11];
}
//if this is player 2's marker 12
else if( x == 402 &amp;&amp; y == 366 &amp;&amp; global.class[2,12] != 0 )
{
    //based on position, find appropriate class
    class = global.class[2,12];
}
//second row
//if this is player 2's marker 13
else if( x == 6 &amp;&amp; y == 402 &amp;&amp; global.class[2,13] != 0 )
{
    //based on position, find appropriate class
    class = global.class[2,13];
}   
//if this is player 2's marker 14
else if( x == 42 &amp;&amp; y == 402 &amp;&amp; global.class[2,14] != 0 )
{
    //based on position, find appropriate class
    class = global.class[2,14];
}
//if this is player 2's marker 15
else if( x == 78 &amp;&amp; y == 402 &amp;&amp; global.class[2,15] != 0 )
{
    //based on position, find appropriate class
    class = global.class[2,15];
}
//if this is player 2's marker 16
else if( x == 114 &amp;&amp; y == 402 &amp;&amp; global.class[2,16] != 0 )
{
    //based on position, find appropriate class
    class = global.class[2,16];
}
//if this is player 2's marker 17
else if( x == 150 &amp;&amp; y == 402 &amp;&amp; global.class[2,17] != 0 )
{
    //based on position, find appropriate class
    class = global.class[2,17];
}
//if this is player 2's marker 18
else if( x == 186 &amp;&amp; y == 402 &amp;&amp; global.class[2,18] != 0 )
{
    //based on position, find appropriate class
    class = global.class[2,18];
}
//if this is player 2's marker 19
else if( x == 222 &amp;&amp; y == 402 &amp;&amp; global.class[2,19] != 0 )
{
    //based on position, find appropriate class
    class = global.class[2,19];
}
//if this is player 2's marker 20
else if( x == 258 &amp;&amp; y == 402 &amp;&amp; global.class[2,20] != 0 )
{
    //based on position, find appropriate class
    class = global.class[2,20];
}
//if this is player 2's marker 21
else if( x == 294 &amp;&amp; y == 402 &amp;&amp; global.class[2,21] != 0 )
{
    //based on position, find appropriate class
    class = global.class[2,21];
}
//if this is player 2's marker 22
else if( x == 330 &amp;&amp; y == 402 &amp;&amp; global.class[2,22] != 0 )
{
    //based on position, find appropriate class
    class = global.class[2,22];
}
//if this is player 2's marker 23
else if( x == 366 &amp;&amp; y == 402 &amp;&amp; global.class[2,23] != 0 )
{
    //based on position, find appropriate class
    class = global.class[2,23];
}
//if this is player 2's marker 24
else if( x == 402 &amp;&amp; y == 402 &amp;&amp; global.class[2,24] != 0 )
{
    //based on position, find appropriate class
    class = global.class[2,24];
}</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//dynamic statistics

//if character is created on the top half of the board
if( y &lt; 222 )
{
    player = 1;
}
//else if the character is created on the bottom half of the board
else if( y &gt; 222 )
{
    player = 2;
}


//ownership
board_controller.playerlimit[player] = board_controller.playerlimit[player] + 1;



//load statistics based on class


//statistics
hp = info.maxhp[class];
maxhp[1] = info.maxhp[class];
maxhp[2] = 0;

mp = info.maxmp[class];
maxmp[1] = info.maxmp[class];
maxmp[2] = 0;

tp = info.maxtp[class];
maxtp[1] = info.maxtp[class];
maxtp[2] = 0;

accuracy[1] = info.accuracy[class];
accuracy[2] = 0;

evasion[1] = info.evasion[class];
evasion[2] = 0;

attack[1] = info.attack[class];
attack[2] = 0;

defense[1] = info.defense[class];
defense[2] = 0;

magicpower[1] = info.magicpower[class];
magicpower[2] = 0;

magicdefense[1] = info.magicdefense[class];
magicdefense[2] = 0;

movement[1] = info.movement[class];
movement[2] = 0;

range[1] = info.range[class];
range[2] = 0;</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//find and change sprite based on player and class

//if character belongs to player 1
if( player == 1)
{
    //sprite moving down
    if( class == 1)
    {
        sprite_index = squire1_down;
    }
    else if( class == 2 )
    {
        sprite_index = archer1_down;
    }
    else if( class == 3 )
    {
        sprite_index = ninja1_down;
    }
    else if( class == 5 )
    {
        sprite_index = black_mage1_down;
    }
    else if( class == 4 )
    {
        sprite_index = white_mage1_down;
    }

 
    //freeze character image
    image_speed = 0;
    
}
//else if character belongs to player 2
else if( player == 2 )
{
    //sprite moving up
    if( class == 1)
    {
        sprite_index = squire2_up;
    }
    else if( class == 2 )
    {
        sprite_index = archer2_up;
    }
    else if( class == 3 )
    {
        sprite_index = ninja2_up;
    }
    else if( class == 5 )
    {
        sprite_index = black_mage2_up;
    }
    else if( class == 4 )
    {
        sprite_index = white_mage2_up;
    }

    
    //freeze character image
    image_speed = 0;
}</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//static variables

//Flags
activeflag = 0;

moveflag = 0;
moved = 0;

attackflag = 0;
techniqueflag = 0;
magicflag = 0;
itemflag = 0;

completeflag = 0;

deadflag = 1;


//ensure static image
image_speed = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//starting equipment based on character class

//un-equipped
rhand = 0;
lhand = 0;
helm =  0;
armor = 0;
boots = 0;


//if squire
if( class == 1)
{
    rhand = 1;
    lhand = 6;
    helm = 3;
    armor = 3;
    boots = 3;
}
//if archer
else if( class == 2 )
{
    rhand = 2;
    lhand = 0;
    helm = 2;
    armor = 2;
    boots = 2;
}
//if ninja
else if( class == 3 )
{
    rhand = 3;
    lhand = 3;
    helm = 2;
    armor = 2;
    boots = 2;
}
//if black mage
else if( class == 5 )
{
    rhand = 4;
    lhand = 0;
    helm = 1;
    armor = 1;
    boots = 1;

}
//if white mage
else if( class == 4 )
{
    rhand = 5;
    lhand = 0;
    helm = 1;
    armor = 1;
    boots = 1;
}

//load bonuses based on equipped weapons

hpmax[2] =          info.weaponbonus[rhand, 01] + info.weaponbonus[lhand, 01] + info.helmbonus[helm, 01] + info.armorbonus[armor, 01] + info.bootsbonus[boots, 01];
mpmax[2] =          info.weaponbonus[rhand, 02] + info.weaponbonus[lhand, 02] + info.helmbonus[helm, 02] + info.armorbonus[armor, 02] + info.bootsbonus[boots, 02];
tpmax[2] =          info.weaponbonus[rhand, 03] + info.weaponbonus[lhand, 03] + info.helmbonus[helm, 03] + info.armorbonus[armor, 03] + info.bootsbonus[boots, 03];
accuracy[2] =       info.weaponbonus[rhand, 04] + info.weaponbonus[lhand, 04] + info.helmbonus[helm, 04] + info.armorbonus[armor, 04] + info.bootsbonus[boots, 04];
evasion[2] =        info.weaponbonus[rhand, 05] + info.weaponbonus[lhand, 05] + info.helmbonus[helm, 05] + info.armorbonus[armor, 05] + info.bootsbonus[boots, 05];
attack[2] =         info.weaponbonus[rhand, 06] + info.weaponbonus[lhand, 06] + info.helmbonus[helm, 06] + info.armorbonus[armor, 06] + info.bootsbonus[boots, 06];
defense[2] =        info.weaponbonus[rhand, 07] + info.weaponbonus[lhand, 07] + info.helmbonus[helm, 07] + info.armorbonus[armor, 07] + info.bootsbonus[boots, 07];
magicpower[2] =     info.weaponbonus[rhand, 08] + info.weaponbonus[lhand, 08] + info.helmbonus[helm, 08] + info.armorbonus[armor, 08] + info.bootsbonus[boots, 08];
magicdefense[2] =   info.weaponbonus[rhand, 09] + info.weaponbonus[lhand, 09] + info.helmbonus[helm, 09] + info.armorbonus[armor, 09] + info.bootsbonus[boots, 09];
range[2] =          info.weaponbonus[rhand, 10] + info.weaponbonus[lhand, 10] + info.helmbonus[helm, 10] + info.armorbonus[armor, 10] + info.bootsbonus[boots, 10];
movement[2] =       info.weaponbonus[rhand, 11] + info.weaponbonus[lhand, 11] + info.helmbonus[helm, 11] + info.armorbonus[armor, 11] + info.bootsbonus[boots, 11];
deadflag =          info.weaponbonus[rhand, 12] + info.weaponbonus[lhand, 12] + info.helmbonus[helm, 12] + info.armorbonus[armor, 12] + info.bootsbonus[boots, 12] + deadflag;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//computer values

computer_selection = 0;</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if character needs to be not complete
if( board_controller.switchplayers == 1 )
{
    if( board_controller.player == player )
    {
        //complete the character
        completeflag = 0;
    }
    else
    {
        //mark as complete
        completeflag = 1;
    }  
}

//if character belongs to player 1
if( player == 1)
{

    //if character is in motion
    if( hspeed &gt; 0)
    {
        //sprite moving to the right
        if( class == 1)
        {
            sprite_index = squire1_right;
        }
        else if( class == 2 )
        {
            sprite_index = archer1_right;
        }
        else if( class == 3 )
        {
            sprite_index = ninja1_right;
        }
        else if( class == 5 )
        {
            sprite_index = black_mage1_right;
        }
        else if( class == 4 )
        {
            sprite_index = white_mage1_right;
        }
        image_speed = .25;
    }
    else if(hspeed &lt; 0)
    {
        //sprite moving to the left
        if( class == 1)
        {
            sprite_index = squire1_left;
        }
        else if( class == 2 )
        {
            sprite_index = archer1_left;
        }
        else if( class == 3 )
        {
            sprite_index = ninja1_left;
        }
        else if( class == 5 )
        {
            sprite_index = black_mage1_left;
        }
        else if( class == 4 )
        {
            sprite_index = white_mage1_left;
        }

        image_speed = .25;
    }
    else if(vspeed &gt; 0)
    {
        //sprite moving down
        if( class == 1)
        {
            sprite_index = squire1_down;
        }
        else if( class == 2 )
        {
            sprite_index = archer1_down;
        }
        else if( class == 3 )
        {
            sprite_index = ninja1_down;
        }
        else if( class == 5 )
        {
            sprite_index = black_mage1_down;
        }
        else if( class == 4 )
        {
            sprite_index = white_mage1_down;
        }

        image_speed = .25;
    }
    else if(vspeed &lt; 0)
    {
        //sprite moving up
        if( class == 1)
        {
            sprite_index = squire1_up;
        }
        else if( class == 2 )
        {
            sprite_index = archer1_up;
        }
        else if( class == 3 )
        {
            sprite_index = ninja1_up;
        }
        else if( class == 5 )
        {
            sprite_index = black_mage1_up;
        }
        else if( class == 4 )
        {
            sprite_index = white_mage1_up;
        }

        image_speed = .25;
    }
    else if( deadflag == 0 )
    {
        //sprite is dead
        if( class == 1)
        {
            sprite_index = squire1_dead;
        }
        else if( class == 2 )
        {
            sprite_index = archer1_dead;
        }
        else if( class == 3 )
        {
            sprite_index = ninja1_dead;
        }
        else if( class == 5 )
        {
            sprite_index = black_mage1_dead;
        }
        else if( class == 4 )
        {
            sprite_index = white_mage1_dead;
        }

        image_speed = 0;
    }
    //else
    else
    {
        //freeze character image
        image_speed = 0;
    }
}
//else if character belongs to player 2
else if( player == 2 )
{
    //if character is in motion
    if( hspeed &gt; 0)
    {
        //sprite moving to the right
        if( class == 1 )
        {
            sprite_index = squire2_right;
        }
        else if( class == 2 )
        {
            sprite_index = archer2_right;
        }
        else if( class == 3 )
        {
            sprite_index = ninja2_right;
        }
        else if( class == 5 )
        {
            sprite_index = black_mage2_right;
        }
        else if( class == 4 )
        {
            sprite_index = white_mage2_right;
        }

        image_speed = .25;
    }
    else if(hspeed &lt; 0)
    {
        //sprite moving to the left
        if( class == 1 )
        {
            sprite_index = squire2_left;
        }
        else if( class == 2 )
        {
            sprite_index = archer2_left;
        }
        else if( class == 3 )
        {
            sprite_index = ninja2_left;
        }
        else if( class == 5 )
        {
            sprite_index = black_mage2_left;
        }
        else if( class == 4 )
        {
            sprite_index = white_mage2_left;
        }

        image_speed = .25;
    }
    else if(vspeed &gt; 0)
    {
        //sprite moving down
        if( class == 1 )
        {
            sprite_index = squire2_down;
        }
        else if( class == 2 )
        {
            sprite_index = archer2_down;
        }
        else if( class == 3 )
        {
            sprite_index = ninja2_down;
        }
        else if( class == 5 )
        {
            sprite_index = black_mage2_down;
        }
        else if( class == 4 )
        {
            sprite_index = white_mage2_down;
        }

        image_speed = .25;
    }
    else if(vspeed &lt; 0)
    {
        //sprite moving up
        if( class == 1 )
        {
            sprite_index = squire2_up;
        }
        else if( class == 2 )
        {
            sprite_index = archer2_up;
        }
        else if( class == 3 )
        {
            sprite_index = ninja2_up;
        }
        else if( class == 5 )
        {
            sprite_index = black_mage2_up;
        }
        else if( class == 4 )
        {
            sprite_index = white_mage2_up;
        }

        image_speed = .25;
    }
    else if( deadflag == 0 )
    {
        //sprite is dead
        if( class == 1 )
        {
            sprite_index = squire2_dead;
        }
        else if( class == 2 )
        {
            sprite_index = archer2_dead;
        }
        else if( class == 3 )
        {
            sprite_index = ninja2_dead;
        }
        else if( class == 5 )
        {
            sprite_index = black_mage2_dead;
        }
        else if( class == 4 )
        {
            sprite_index = white_mage2_dead;
        }

        image_speed = 0;
    }
    //else
    else
    {
        //freeze character image
        image_speed = 0;
    }
}</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//initiate clear, complete, and selection checks

//reset board and character (minus moved) (happens when a select object is selected)
if( activeflag == 1 &amp;&amp; board_controller.clear == 1 )
{
    //clear character flags
    activeflag = 0;
    moveflag = 0;
    //not moved
            
    attackflag = 0;
    techniqueflag = 0;
    magicflag = 0;
    itemflag = 0;
    
    //clear focus    
        board_controller.movefocus = 0;
        board_controller.attackfocus = 0;
        board_controller.techniquefocus = 0;
        board_controller.magicfocus = 0;
        board_controller.itemfocus = 0;
        
        //clear trackers
        board_controller.movetracker = 0;
        board_controller.rweapontracker = 0;
        board_controller.lweapontracker = 0;
        board_controller.techniquetracker = 0;
        board_controller.spelltracker = 0;
        board_controller.itemtracker = 0;

        
        //clear values
        board_controller.accuracy = 0;
        board_controller.accuracy2 = 0;
        board_controller.attackvalue = 0;
        board_controller.attackvalue2 = 0;
        
    
            
    board_controller.clear = 0;
}
//complete character
else if( activeflag == 1 &amp;&amp; board_controller.complete == 1 )
{
    //clear character flags
    activeflag = 0;
    moveflag = 0;
    moved = 0;
            
    attackflag = 0;
    techniqueflag = 0;
    magicflag = 0;
    itemflag = 0;
    
    completeflag = 1;
    
    //clear focus
        board_controller.movefocus = 0;
        board_controller.attackfocus = 0;
        board_controller.techniquefocus = 0;
        board_controller.magicfocus = 0;
        board_controller.itemfocus = 0;
        
        //clear trackers
        board_controller.movetracker = 0;
        board_controller.rweapontracker = 0;
        board_controller.lweapontracker = 0;
        board_controller.techniquetracker = 0;
        board_controller.spelltracker = 0;
        board_controller.itemtracker = 0;

        
        //clear values
        board_controller.accuracy = 0;
        board_controller.accuracy2 = 0;
        board_controller.attackvalue = 0;
        board_controller.attackvalue2 = 0;
        
    
    //add to player tracker
    board_controller.playertracker[player] = board_controller.playertracker[player] + 1;
 
            
    board_controller.complete = 0;
    
    //if select exists (assumed that it does)
    if( instance_number(board_select) &gt; 0 )
    {
        board_select.destroy = 1;
    }
}





//if this character is selected (has a select object around it)
if( instance_number(board_select) == 1 )
{
    //if character is selected and is inactive AND character is incomplete AND the current player's character is selected AND alive
    if( x == board_select.x &amp;&amp; y == board_select.y &amp;&amp; activeflag == 0 &amp;&amp; completeflag == 0 &amp;&amp; board_controller.player == player &amp;&amp; deadflag &gt; 0)
    {
        //activate
        activeflag = 1;
    }
    //else if the it is not the current player's character being selected OR character is complete OR character is dead
    else if( x == board_select.x &amp;&amp; y == board_select.y &amp;&amp; activeflag == 0 &amp;&amp; ( board_controller.player != player || completeflag == 1 || deadflag == 0 ) )
    {
        //reset focus
        board_controller.menufocus = 0;
        board_controller.boardfocus = 1;
        
        board_controller.movefocus = 0;
        board_controller.attackfocus = 0;
        board_controller.techniquefocus = 0;
        board_controller.magicfocus = 0;
        board_controller.itemfocus = 0;
        
        //clear trackers
        board_controller.movetracker = 0;
        board_controller.rweapontracker = 0;
        board_controller.lweapontracker = 0;
        board_controller.techniquetracker = 0;
        board_controller.spelltracker = 0;
        board_controller.itemtracker = 0;

        
        //clear values
        board_controller.accuracy = 0;
        board_controller.accuracy2 = 0;
        board_controller.attackvalue = 0;
        board_controller.attackvalue2 = 0;
        


        //revert cursor
        board_cursor.selection = 0;
        
        //destroy controlling objects
        //arrow.destroy = 1;
        board_select.destroy = 1;
        
        //clear flags
        moveflag = 0;
        moved = 0;
        attackflag = 0;
        techniqueflag = 0;
        magicflag = 0;
        itemflag = 0;
        
        
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Computer control
//if mode is set to 1 player and it is player 2's turn and character belongs to player 2
//if( global.mode == 1 &amp;&amp; board_controller.player == 2 &amp;&amp; player == 2 &amp;&amp; completeflag == 0)
//{
    
    //textbox(100, 100, string("Success!"), c_black, c_white);

//if board_computer is active, doesnot have a selection AND this character belongs to player 2 AND has not completed turn
if( board_computer.active == 1 &amp;&amp; board_computer.selection == 0 &amp;&amp; player == 2 &amp;&amp; completeflag == 0)
{
    
    //mark board_computer selection
    board_computer.selection = 1;

    completeflag = 1;

    //increment completed players
    board_controller.playertracker[player] = board_controller.playertracker[player] + 1;

}

//test destroy
else if( board_computer.active = 1 &amp;&amp; board_computer.selection = 1 &amp;&amp; player == 2 &amp;&amp; completeflag == 1 )
{
    //instance_destroy();
    deadflag = 0;
    
    board_computer.selection = 0;
    
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//initiate active character


    
//if this character is activated
if( activeflag == 1 )
{
    //set flags based on game focus
        //if focus is movement, AND not flagged for moving AND character has not moved
    if( board_controller.movefocus == 1 &amp;&amp; moveflag == 0 &amp;&amp; moved == 0)
    {
        //trip moveflag
        moveflag = 1;
        
        //record starting coordinates
        board_controller.xmovement[0] = x;
        board_controller.ymovement[0] = y;

        //set board_controller.movelimit to character's movement
        board_controller.movelimit = movement[1] + movement[2];
    }
    //if focus is movement, AND the character has already moved
    else if( board_controller.movefocus == 1 &amp;&amp; moved == 1 )
    {
        
        //reset focus
        board_controller.menufocus = 0;
        board_controller.boardfocus = 1;
        board_controller.movefocus = 0;
        
        //revert cursor
        board_cursor.selection = 0;
        
        //destroy controlling objects
        //arrow.destroy = 1;
        board_select.destroy = 1;
        
        //clear flags
        moveflag = 0;
        //moved = 0;
        
        attackflag = 0;
        techniqueflag = 0;
        magicflag = 0;
        itemflag = 0;
        
        //clear movelimit
        board_controller.movelimit = 0;

    }
    //if focus is attack
    else if( board_controller.attackfocus == 1 &amp;&amp; attackflag == 0 )
    {
        //trip attackflag
        attackflag = 1;
        
        //record starting coordinates
        board_controller.xmovement[0] = x;
        board_controller.ymovement[0] = y;

        //ranged attacks will be automatically ranged by the character having a range greater than 1 (or 2)
        board_controller.movelimit = range[1] + range[2];
    }
    //if focus is technique
    else if( board_controller.techniquefocus == 1 &amp;&amp; techniqueflag == 0 )
    {
        //trip techniqueflag
        techniqueflag = 1;
        
        //record starting coordinates
        board_controller.xmovement[0] = x;
        board_controller.ymovement[0] = y;

        //load magic options in menu list
            //based on class
        //squire
        if( class == 1 )
        {
            //list throw
            instance_create( mkr_list.x+12, mkr_list.y, menu_throw );
        }
        //ninja
        else if( class == 3 )
        {
            //list throw
            instance_create( mkr_list.x+12, mkr_list.y, menu_throw );
        }
        //else
        else
        {
            //revert technique focus
            techniqueflag = 0;
            board_controller.techniquefocus = 0;
        
            //do not display list
            
            //destroy arrow at list
            menu_arrow.destroy = 1;
            
            //create arrow at main menu
            instance_create( mkr_menu.x, mkr_menu.y, menu_arrow );
            
            //remove list title
                //change list title to empty (taken care of in list_object's code
            list_item.sprite_index = empty_menu;
        
        }
    }

    //if focus is magic
    else if( board_controller.magicfocus == 1 &amp;&amp; magicflag == 0 )
    {
        //trip magicflag
        magicflag = 1;
        

        //record starting coordinates
        board_controller.xmovement[0] = x;
        board_controller.ymovement[0] = y;

        //load magic options in menu list
            //based on class
        //black mage
        if( class == 5 )
        {
            //list lightning
            instance_create( mkr_list.x+12, mkr_list.y, menu_lightning );
        }
        //white mage
        else if( class == 4 )
        {
            //list cure
            instance_create( mkr_list.x+12, mkr_list.y, menu_cure );
        }
        //else
        else
        {
            //revert magic focus
            magicflag = 0;
            board_controller.magicfocus = 0;
       
            //do not display list
            
            //destroy arrow at list
            menu_arrow.destroy = 1;
            
            //create arrow at main menu
            instance_create( mkr_menu.x, mkr_menu.y, menu_arrow );
            
            //remove list title
                //change list title to empty (taken care of in list_object's code
            list_item.sprite_index = empty_menu;
        
        }
    }
    //if focus is item
    else if( board_controller.itemfocus == 1 &amp;&amp; itemflag == 0 )
    {
        //trip itemflag
        itemflag = 1;
        
        //record starting coordinates
        board_controller.xmovement[0] = x;
        board_controller.ymovement[0] = y;

        //load item options in menu list
            //based on inventory
        //check inventory lists for quantity of items
        
        //walk through player's inventory of items
            itemtracker = 1;
            board_controller.counter = 0;
        while( board_controller.itemtracker &lt;= board_controller.inventory_cap )
        {
            //potions
                //if item exists
            if( board_controller.inventory[board_controller.player, board_controller.itemtracker] &gt; 0 )
            {
                //list potion
                instance_create( mkr_list.x+12, mkr_list.y+(board_controller.counter * 18), menu_potion );
                board_controller.counter = board_controller.counter + 1;
            }
            
            board_controller.itemtracker = board_controller.itemtracker + 1;
        }
        
        
        //list has been displayed if being displayed
            
        
        //if no list was created    
        if( board_controller.itemtracker == 0 )
        {
            //revert item focus
            itemflag = 0;
            board_controller.itemfocus = 0;
       
        
            //remove list title
                //change list title to empty (taken care of in list_object's code
            list_item.sprite_index = empty_menu;
            
            //destroy arrow at "list"
            menu_arrow.destroy = 1;
            
            //create arrow at main menu
            instance_create( mkr_menu.x, mkr_menu.y, menu_arrow );
        
        }        
        else
        {
            board_controller.itemtracker = 0;
        }
        
        
        
        
    }
    
    
    
    //new section to load magic, technique and item ranges and values
            //if this character is using a technique AND technique is selected AND NOT completed
        if ( techniqueflag == 1 &amp;&amp; board_controller.techniqueselect == 1 &amp;&amp; board_controller.techniquecomplete == 0)
        {
        
            //if character has MP to cast the desired spell AND spell hasn't be loaded
            if( (tp-info.techniquecost[board_controller.techniquetracker]) &gt;= 0  &amp;&amp; board_controller.movelimit == 0 )
            {
                //remove the appropriate TP
                tp = tp-info.techniquecost[board_controller.techniquetracker];
                
                //load technique information
      
                //technique range should be determined by the technique loaded from the global information
                    //technique is limited by technique range
                board_controller.movelimit = info.techniquerange[board_controller.techniquetracker];
            
                //as is accuracy
                board_controller.accuracy = info.techniquehit[board_controller.techniquetracker];
                
                //as is attackvalue
                board_controller.attackvalue = info.techniquevalue[board_controller.techniquetracker] + attack[1] + attack[2];
        
                //resolve technique by destroying the select object
            
                //destroy select
                //board_select.destroy = 1;
        
                //revert cursor
                //board_cursor.selection = 0;
            }
            
            

        }
        //if this character is using magic AND spell is selected AND NOT completed
        else if ( magicflag == 1 &amp;&amp; board_controller.magicselect == 1 &amp;&amp; board_controller.magiccomplete == 0)
        {
        
            //if character has MP to cast the desired spell
            if( (mp-info.spellcost[board_controller.spelltracker]) &gt;= 0 &amp;&amp; board_controller.movelimit == 0 )
            {
                //remove the appropriate MP
                mp = mp-info.spellcost[board_controller.spelltracker];
                
                //load spell information
      
                //spell range should be determined by the spell loaded from the global information
                    //magic is limited by spell range
                board_controller.movelimit = info.spellrange[board_controller.spelltracker];
            
                //as is accuracy
                board_controller.accuracy = info.spellhit[board_controller.spelltracker];
                
                //as is attackvalue
                board_controller.attackvalue = info.spellvalue[board_controller.spelltracker] + magicpower[1] + magicpower[2];
        
                //resolve spell by destroying the select object
            
                //destroy select
                //board_select.destroy = 1;
        
                //revert cursor
                //board_cursor.selection = 0;
            }
            
            

        }
        //if this character is using an item AND item is selected AND NOT completed
        else if ( itemflag == 1 &amp;&amp; board_controller.itemselect == 1 &amp;&amp; board_controller.itemcomplete == 0)
        {
            //load item information
                //non needed

  
            //item range should be determined by character class (Chemist = class 41)
            if( class == 41 )
            {            
                //magic is limited by spell range
                board_controller.movelimit = 5;
            }
            else
            {
                //item range is limited to 1
                board_controller.movelimit = 1;
            }
            
            //as is accuracy
            board_controller.accuracy = info.itemhit[board_controller.itemtracker];
                
            //as is attackvalue
            board_controller.attackvalue = info.itemvalue[board_controller.itemtracker];
        
            //resolve spell by destroying the select object
            
            //destroy select
            //board_select.destroy = 1;
        
            //revert cursor
            //board_cursor.selection = 0;
        
            

        }
    
    
    
    
    //if target has been selected
    if( instance_number(board_target) == 1)
    {
    
        
        
        
        //if this character is moving
        if( moveflag == 1  &amp;&amp; moved == 0)
        {
            //set movetracker to 1
            //board_controller.movetracker = 1;
        
            //remove focus from board
            board_controller.boardfocus = 0;
            
            //move character
                //new position will be directly left, right, up or down
            if( board_controller.xmovement[board_controller.movetracker] &lt; (x) )
            {
                vspeed = 0;
                hspeed = -3;
            }
            else if( board_controller.xmovement[board_controller.movetracker] &gt; (x) )
            {
                vspeed = 0;
                hspeed = 3;
            }
            else if( board_controller.ymovement[board_controller.movetracker] &lt; (y) )
            {
                hspeed = 0;
                vspeed = -3;
            }
            else if( board_controller.ymovement[board_controller.movetracker] &gt; (y) )
            {
                hspeed = 0;
                vspeed = 3;
            }
            else if( board_controller.xmovement[board_controller.movetracker] == x &amp;&amp; board_controller.ymovement[board_controller.movetracker] == y )
            {
                hspeed = 0;
                vspeed = 0;
            }
           
                
            //board_controller.movetracker = board_controller.movetracker + 1;
                
            //if target has been reached
            if( board_target.x == x &amp;&amp; board_target.y == y )
            {
                //stop character
                speed = 0;
                    
                //remove flags
                moveflag = 0;
                activeflag = 0;
                    
                //remove focus
                board_controller.movefocus = 0;
                   
                //destroy select and target
                board_select.destroy = 1;
                board_target.destroy = 1;
                    
                //return focus to the board
                board_controller.boardfocus = 1;
                board_controller.menufocus = 0;
                    
                //reset move variables
                board_controller.movetracker = 0;
                board_controller.movelimit = 0;

                moved = 1;
            }
            //if the character has reached its goal
            else if( x == board_controller.xmovement[board_controller.movetracker] &amp;&amp; y == board_controller.ymovement[board_controller.movetracker] )
            {
                //if movetracker hasn't reached the movelimit
                if(board_controller.movetracker != board_controller.movelimit)
                {
                    //increment goal
                    board_controller.movetracker = board_controller.movetracker + 1;
                }
            }           
        }    
        //if this character is attacking
        else if ( attackflag == 1 )
        {
            //attack and remove flag
            
            //remove focus from board
            board_controller.boardfocus = 0;
            
            //load attacker information into global variables
                //if right weapon is able to do damage (positive or negative
            if( info.weapondirection[rhand] != 0 )
            {
                board_controller.accuracy = accuracy[1] + accuracy[2] + info.weaponhit[rhand];
                board_controller.attackvalue = attack[1] + attack[2] + info.weaponvalue[rhand];
                
            }
            
            //boundary checking
                //accuracy
            if( board_controller.accuracy &gt; board_controller.accuracy_cap )
            {
                board_controller.accuracy = board_controller.accuracy_cap;
            }
            else if( board_controller.accuracy &lt; 0 )
            {
                board_controller.accuracy = 0;
            }
            //attackvalue
            if( board_controller.attackvalue &gt; board_controller.attack_cap )
            {
                board_controller.attackvalue = board_controller.attack_cap;
            }
            else if( board_controller.attackvalue &lt; 0 )
            {
                board_controller.attackvalue = 0;
            }
            
            //if left weapon is able to do damage (positive or negative
            if( info.weapondirection[lhand] != 0 )
            {
                board_controller.accuracy2 = accuracy[1] + accuracy[2] + info.weaponhit[lhand];
                board_controller.attackvalue2 = attack[1] + attack[2] + info.weaponvalue[lhand];
            }
            
            //boundary checking
                //accuracy
            if( board_controller.accuracy2 &gt; board_controller.accuracy_cap )
            {
                board_controller.accuracy2 = board_controller.accuracy_cap;
            }
            else if( board_controller.accuracy2 &lt; 0 )
            {
                board_controller.accuracy2 = 0;
            }
            //attackvalue
            if( board_controller.attackvalue2 &gt; board_controller.attack_cap )
            {
                board_controller.attackvalue2 = board_controller.attack_cap;
            }
            else if( board_controller.attackvalue2 &lt; 0 )
            {
                board_controller.attackvalue2 = 0;
            }

            
            board_controller.rweapontracker = rhand;
            board_controller.lweapontracker = lhand;

               
            //remove flags
            attackflag = 0;
            activeflag = 0;
            moved = 0;
                    
                   
            //destroy select
            board_select.destroy = 1;
            
            //reset movetracker
            board_controller.movetracker = 0;
                    
            //trip complete flag
            completeflag = 1;

            //add to player tracker
            board_controller.playertracker[player] = board_controller.playertracker[player] + 1;
            
        }
        
        //if a technique has been completed
        else if( board_controller.techniquecomplete == 1 )
        {
            //remove flags
            activeflag = 0;
            techniqueflag = 0;
                
            moved = 0;
               
            //reset technique components
            board_controller.techniqueselect = 0;
            board_controller.techniquecomplete = 0;
            board_controller.techniquetracker = 0;
            
            //reset board_controller.attackvalue
            board_controller.accuracy = 0;
            board_controller.accuracy2 = 0;
            board_controller.attackvalue = 0;
            board_controller.attackvalue2 = 0;
            
            //reset board_controller.movelimit
            board_controller.movelimit = 0;
                
            //destroy select
            board_select.destroy = 1;
                
            //destroy target
            board_target.destroy = 1;
                
            //trip complete flag
            completeflag = 1;

            //add to player tracker
            board_controller.playertracker[player] = board_controller.playertracker[player] + 1;        
        }

        
        //if a magic spell has been completed
        else if( board_controller.magiccomplete == 1 )
        {
            //remove flags
            activeflag = 0;
            magicflag = 0;
                
            moved = 0;
               
            //reset magic components
            board_controller.magicselect = 0;
            board_controller.magiccomplete = 0;
            board_controller.spelltracker = 0;
            
            //reset board_controller.attackvalue
            board_controller.accuracy = 0;
            board_controller.accuracy2 = 0;
            board_controller.attackvalue = 0;
            board_controller.attackvalue2 = 0;
            
            //reset board_controller.movelimit
            board_controller.movelimit = 0;
                
            //destroy select
            board_select.destroy = 1;
                
            //destroy target
            board_target.destroy = 1;
                
            //trip complete flag
            completeflag = 1;

            //add to player tracker
            board_controller.playertracker[player] = board_controller.playertracker[player] + 1;        
        }
        
        //if a item use has been completed
        else if( board_controller.itemcomplete == 1 )
        {
            //remove flags
            activeflag = 0;
            itemflag = 0;
                
            moved = 0;
               
            //reset item components
            board_controller.itemselect = 0;
            board_controller.itemcomplete = 0;
            board_controller.itemtracker = 0;
            
            //reset board_controller.attackvalue
            board_controller.accuracy = 0;
            board_controller.accuracy2 = 0;
            board_controller.attackvalue = 0;
            board_controller.attackvalue2 = 0;
            
            //reset board_controller.movelimit
            board_controller.movelimit = 0;
                
            //destroy select
            board_select.destroy = 1;
                
            //destroy target
            board_target.destroy = 1;
                
            //trip complete flag
            completeflag = 1;

            //add to player tracker
            board_controller.playertracker[player] = board_controller.playertracker[player] + 1;        
        }
    }
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//resolve target

//if character is a target character
    //OR is an active character targeting itself: must be compensated

    
//if target has been selected AND information has been loaded
if( instance_number(board_target) == 1 &amp;&amp; instance_number(board_select) == 0 )
{
    //if its an attack phase and character is being targeted
    if ( board_controller.attackfocus == 1 &amp;&amp; x == board_target.x &amp;&amp; y == board_target.y )
    {

        //if character is being hit by a right hand attack
        if( board_controller.attackvalue &gt; 0 )
        {
            //attack with character
                //if character hits opponent
            if( floor(random(board_controller.accuracy_cap)) &lt;= (2*board_controller.accuracy) - evasion  )
            {
                //determine damage
                    //determine weapon value and weapon direction
                board_controller.attackvalue = board_controller.attackvalue + ( defense[1] + defense[2] ) * info.weapondirection[board_controller.rweapontracker];
                
                /*
                //display hit message
                board_tbg.targetx = x;
                board_tbg.targety = y;
                board_tbg.value = string(info.weapondirection[rhand]*board_controller.attackvalue);
                board_tbg.frontcolor = c_red;
                board_tbg.backcolor = c_white;
                board_tbg.display = 1;
                */
            
        
        
            //determine target attribute
                //if targetting HP
            if( info.weapontarget[board_controller.rweapontracker] == 1 )
            {
                //if 0 or more damage is being inflicted
                if( board_controller.attackvalue &gt; 0 )
                {
                    //alter hp accordingly
                    hp = hp + ( board_controller.attackvalue * info.weapondirection[board_controller.rweapontracker] );
                    
                    //display hit message
                    textbox(x, y, string(board_controller.attackvalue * info.weapondirection[board_controller.rweapontracker]), c_red, c_white);
                    /*
                    board_tbg.targetx = x;
                    board_tbg.targety = y;
                    board_tbg.value = string(board_controller.attackvalue * info.weapondirection[board_controller.rweapontracker]);
                    board_tbg.frontcolor = c_red;
                    board_tbg.backcolor = c_white;
                    board_tbg.display = 1;
                    */
                }
                
                //boundary checking
                    //if curing would heal the character past its maximum HP
                if( hp &gt; (maxhp[1]+maxhp[2]) )
                {
                    //cap hp off at maximum
                    hp = (maxhp[1]+maxhp[2]);
                }
                //else if less than 0, cap at 0
                else if( hp &lt; 0 )
                {
                    hp = 0;
                }
            }
            //if targetting MP
            else if( info.weapontarget[board_controller.rweapontracker] == 2 )
            {
                //if 0 or more damage is being inflicted
                if( board_controller.attackvalue &gt; 0 )
                {
                    //alter mp accordingly and by half
                    mp = mp + ( board_controller.attackvalue * info.weapondirection[board_controller.rweapontracker] ) / 2;
                    
                    //display hit message
                    textbox(x, y, string((board_controller.attackvalue * info.weapondirection[board_controller.rweapontracker])/2), c_orange, c_white);
                    /*
                    board_tbg.targetx = x;
                    board_tbg.targety = y;
                    board_tbg.value = string((board_controller.attackvalue * info.weapondirection[board_controller.rweapontracker])/2);
                    board_tbg.frontcolor = c_orange;
                    board_tbg.backcolor = c_white;
                    board_tbg.display = 1;
                    */
                }
                
                
                //boundary checking
                    //if curing would heal the character past its maximum MP
                if( mp &gt; (maxmp[1]+maxmp[2]) )
                {
                    //cap mp off at maximum
                    mp = (maxmp[1]+maxmp[2]);
                }
                //else if less than 0, cap at 0
                else if( mp &lt; 0 )
                {
                    mp = 0;
                }
                
            }
            //if targetting TP
            else if( info.weapontarget[board_controller.rweapontracker] == 3 )
            {
                //if 0 or more damage is being inflicted
                if( board_controller.attackvalue &gt; 0 )
                {
                    //alter tp accordingly and by half
                    tp = tp + ( board_controller.attackvalue * info.weapondirection[board_controller.rweapontracker] ) / 2;
                    
                    //display hit message
                    textbox(x, y, string((board_controller.attackvalue * info.weapondirection[board_controller.rweapontracker])/2), c_yellow, c_white);
                    /*
                    board_tbg.targetx = x;
                    board_tbg.targety = y;
                    board_tbg.value = string((board_controller.attackvalue * info.weapondirection[board_controller.rweapontracker])/2);
                    board_tbg.frontcolor = c_yellow;
                    board_tbg.backcolor = c_white;
                    board_tbg.display = 1;
                    */
                }
                
                //boundary checking
                    //if curing would heal the character past its maximum TP
                if( tp &gt; (maxtp[1]+maxtp[2]) )
                {
                    //cap tp off at maximum
                    tp = (maxtp[1]+maxtp[2]);
                }
                //else if less than 0, cap at 0
                else if( tp &lt; 0 )
                {
                    tp = 0;
                }
                
            }
            //if targetting accuracy
            else if( info.weapontarget[board_controller.rweapontracker] == 4 )
            {
                //if 0 or more damage is being inflicted
                if( board_controller.attackvalue &gt; 0 )
                {
                    //alter attack accordingly and by a quarter
                    accuracy[2] = accuracy[2] + ( board_controller.attackvalue * info.weapondirection[board_controller.rweapontracker] ) / 4;
                    
                    //display hit message
                    textbox(x, y, string((board_controller.attackvalue * info.weapondirection[board_controller.rweapontracker])/4), c_fuchsia, c_white);
                    /*
                    board_tbg.targetx = x;
                    board_tbg.targety = y;
                    board_tbg.value = string((board_controller.attackvalue * info.weapondirection[board_controller.rweapontracker])/4);
                    board_tbg.frontcolor = c_fuchsia;
                    board_tbg.backcolor = c_white;
                    board_tbg.display = 1;
                    */
                }
                
                //boundary checking
                    //if curing would heal the character past its maximum attack
                if( accuracy[1]+accuracy[2] &gt; board_controller.accuracy_cap )
                {
                    //cap attack off at maximum
                    accuracy[2] = board_controller.accuracy_cap - accuracy[1];
                }
                //else if less than 0, cap at 0
                else if( accuracy[1]+accuracy[2] &lt; 0 )
                {
                    accuracy[2] = accuracy[1]*(-1);
                }
                
            }
            //if targetting evasion
            else if( info.weapontarget[board_controller.rweapontracker] == 5 )
            {
                //if 0 or more damage is being inflicted
                if( board_controller.attackvalue &gt; 0 )
                {
                    //alter attack accordingly and by a quarter
                    evasion[2] = evasion[2] + ( board_controller.attackvalue * info.weapondirection[board_controller.rweapontracker] ) / 4;
                    
                    //display hit message
                    textbox(x, y, string((board_controller.attackvalue * info.weapondirection[board_controller.rweapontracker])/4), c_fuchsia, c_white);
                    /*
                    board_tbg.targetx = x;
                    board_tbg.targety = y;
                    board_tbg.value = string(( board_controller.attackvalue * info.weapondirection[board_controller.rweapontracker] ) / 4);
                    board_tbg.frontcolor = c_fuchsia;
                    board_tbg.backcolor = c_white;
                    board_tbg.display = 1;
                    */
                    
                }
                
                //boundary checking
                    //if curing would heal the character past its maximum evasion
                if( evasion[1]+evasion[2] &gt; board_controller.evasion_cap )
                {
                    //cap evasion off at maximum
                    attack[2] = board_controller.evasion_cap - evasion[1];
                }
                //else if less than 0, cap at 0
                else if( evasion[1]+evasion[2] &lt; 0 )
                {
                    evasion[2] = evasion[1]*(-1);
                }
                
            }
            //if targetting attack
            else if( info.weapontarget[board_controller.rweapontracker] == 6 )
            {
                //if 0 or more damage is being inflicted
                if( board_controller.attackvalue &gt; 0 )
                {
                    //alter attack accordingly and by a quarter
                    attack[2] = attack[2] + ( board_controller.attackvalue * info.weapondirection[board_controller.rweapontracker] ) / 4;
                    
                    //display hit message
                    textbox(x, y, string((board_controller.attackvalue * info.weapondirection[board_controller.rweapontracker])/4), c_fuchsia, c_white);
                    /*
                    board_tbg.targetx = x;
                    board_tbg.targety = y;
                    board_tbg.value = string( ( board_controller.attackvalue * info.weapondirection[board_controller.rweapontracker] ) / 4);
                    board_tbg.frontcolor = c_fuchsia;
                    board_tbg.backcolor = c_white;
                    board_tbg.display = 1;
                    */
                }
                
                //boundary checking
                    //if curing would heal the character past its maximum attack
                if( attack[1]+attack[2] &gt; board_controller.attack_cap )
                {
                    //cap attack off at maximum
                    attack[2] = board_controller.attack_cap - attack[1];
                }
                //else if less than 0, cap at 0
                else if( attack[1]+attack[2] &lt; 0 )
                {
                    attack[2] = attack[1]*(-1);
                }
                
            }
            //if targetting defense
            else if( info.weapontarget[board_controller.rweapontracker] == 7 )
            {
                //if 0 or more damage is being inflicted
                if( board_controller.attackvalue &gt; 0 )
                {
                    //alter defense accordingly and by a quarter
                    defense[2] = defense[2] + ( board_controller.attackvalue * info.weapondirection[board_controller.rweapontracker] ) / 4;
                    
                    //display hit message
                    textbox(x, y, string((board_controller.attackvalue * info.weapondirection[board_controller.rweapontracker])/4), c_fuchsia, c_white);
                    /*
                    board_tbg.targetx = x;
                    board_tbg.targety = y;
                    board_tbg.value = string( ( board_controller.attackvalue * info.weapondirection[board_controller.rweapontracker] ) / 4);
                    board_tbg.frontcolor = c_fuchsia;
                    board_tbg.backcolor = c_white;
                    board_tbg.display = 1;
                    */
                    
                }
                
                //boundary checking
                    //if curing would heal the character past its maximum defense
                if( defense[1]+defense[2] &gt; board_controller.defense_cap )
                {
                    //cap defense off at maximum
                    defense[2] = board_controller.defense_cap - defense[1];
                }
                //else if less than 0, cap at 0
                else if( defense[1]+defense[2] &lt; 0 )
                {
                    defense[2] = defense[1]*(-1);
                }
                
            }
            //if targetting magicpower
            else if( info.weapontarget[board_controller.rweapontracker] == 8 )
            {
                //if 0 or more damage is being inflicted
                if( board_controller.attackvalue &gt; 0 )
                {
                    //alter magicpower accordingly and by a quarter
                    magicpower[2] = magicpower[2] + ( board_controller.attackvalue * info.weapondirection[board_controller.rweapontracker] ) / 4;
                
                    //display hit message
                    textbox(x, y, string((board_controller.attackvalue * info.weapondirection[board_controller.rweapontracker])/4), c_fuchsia, c_white);
                    /*
                    board_tbg.targetx = x;
                    board_tbg.targety = y;
                    board_tbg.value = string( ( board_controller.attackvalue * info.weapondirection[board_controller.rweapontracker] ) / 4);
                    board_tbg.frontcolor = c_fuchsia;
                    board_tbg.backcolor = c_white;
                    board_tbg.display = 1;
                    */
                }
                
                //boundary checking
                    //if curing would heal the character past its maximum magicpower
                if( magicpower[1]+magicpower[2] &gt; board_controller.magicpower_cap )
                {
                    //cap magicpower off at maximum
                    magicpower[2] = board_controller.magicpower_cap - magicpower[1];
                }
                //else if less than 0, cap at 0
                else if( magicpower[1]+magicpower[2] &lt; 0 )
                {
                    magicpower[2] = magicpower[1]*(-1);
                }
                
            }
            //if targetting magicdefense
            else if( info.weapontarget[board_controller.rweapontracker] == 9 )
            {
                //if 0 or more damage is being inflicted
                if( board_controller.attackvalue &gt; 0 )
                {
                    //alter magicdefense accordingly and by a quarter
                    magicdefense[2] = magicdefense[2] + ( board_controller.attackvalue * info.weapondirection[board_controller.rweapontracker] ) / 4;
                
                    //display hit message
                    textbox(x, y, string((board_controller.attackvalue * info.weapondirection[board_controller.rweapontracker])/4), c_fuchsia, c_white);
                    /*
                    board_tbg.targetx = x;
                    board_tbg.targety = y;
                    board_tbg.value = string( ( board_controller.attackvalue * info.weapondirection[board_controller.rweapontracker] ) / 4);
                    board_tbg.frontcolor = c_fuchsia;
                    board_tbg.backcolor = c_white;
                    board_tbg.display = 1;
                    */
                }
                
                //boundary checking
                    //if curing would heal the character past its maximum magicdefense
                if( magicdefense[1]+magicdefense[2] &gt; board_controller.magicdefense_cap )
                {
                    //cap magicdefense off at maximum
                    magicdefense[2] = board_controller.magicdefense_cap - magicdefense[1];
                }
                //else if less than 0, cap at 0
                else if( magicdefense[1]+magicdefense[2] &lt; 0 )
                {
                    magicdefense[2] = magicdefense[1]*(-1);
                }
                
            }
            //if targetting movement
            else if( info.weapontarget[board_controller.rweapontracker] == 10 )
            {
                //if 0 or more damage is being inflicted
                if( board_controller.attackvalue &gt; 0 )
                {
                    //alter movement accordingly
                    movement[2] = movement[2] + ( board_controller.attackvalue * info.weapondirection[board_controller.rweapontracker] ) / 4;
                
                    //display hit message
                    textbox(x, y, string((board_controller.attackvalue * info.weapondirection[board_controller.rweapontracker])/4), c_fuchsia, c_white);
                    /*
                    board_tbg.targetx = x;
                    board_tbg.targety = y;
                    board_tbg.value = string( ( board_controller.attackvalue * info.weapondirection[board_controller.rweapontracker] ) / 4);
                    board_tbg.frontcolor = c_fuchsia;
                    board_tbg.backcolor = c_white;
                    board_tbg.display = 1;
                    */
                }
                
                //boundary checking
                    //if curing would heal the character past its maximum movement
                if( movement[1]+movement[2] &gt; board_controller.movement_cap )
                {
                    //cap movement off at maximum
                    movement[2] = board_controller.movement_cap - movement[1];
                }
                //else if less than 0, cap at 0
                else if( movement[1]+movement[2] &lt; 0 )
                {
                    movement[2] = movement[1]*(-1);
                }
                
            }
            //if targetting range
            else if( info.weapontarget[board_controller.rweapontracker] == 11 )
            {
                //if 0 or more damage is being inflicted
                if( board_controller.attackvalue &gt; 0 )
                {
                    //alter range accordingly
                    range[2] = range[2] + ( board_controller.attackvalue * info.weapondirection[board_controller.rweapontracker] ) / 4;
                
                    //display hit message
                    textbox(x, y, string((board_controller.attackvalue * info.weapondirection[board_controller.rweapontracker])/4), c_fuchsia, c_white);
                    /*
                    board_tbg.targetx = x;
                    board_tbg.targety = y;
                    board_tbg.value = string( ( board_controller.attackvalue * info.weapondirection[board_controller.rweapontracker] ) / 4);
                    board_tbg.frontcolor = c_fuchsia;
                    board_tbg.backcolor = c_white;
                    board_tbg.display = 1;
                    */
                }
                
                //boundary checking
                    //if curing would heal the character past its maximum range
                if( range[1]+range[2] &gt; board_controller.range_cap )
                {
                    //cap range off at maximum
                    range[2] = board_controller.range_cap - range[1];
                }
                //else if less than 0, cap at 0
                else if( range[1]+range[2] &lt; 0 )
                {
                    range[2] = range[1]*(-1);
                }
                
            }
            //if targetting life status
            else if( info.weapontarget[board_controller.rweapontracker] == 12 )
            {
                //if technique is removing auto-resurrection
                if( board_controller.attackvalue == -1 &amp;&amp; deadflag &gt; 1 )
                {
                    //alter deadflag accordingly
                        //auto-res to alive
                    deadflag = deadflag - 1;
                
                    //display hit message
                    textbox(x, y, 'Mortal', c_dkgray, c_white);
                    /*
                    board_tbg.targetx = x;
                    board_tbg.targety = y;
                    board_tbg.value = 'Mortal';
                    board_tbg.frontcolor = c_dkgray;
                    board_tbg.backcolor = c_white;
                    board_tbg.display = 1;
                    */
                }
                //if technique is adding auto-resurrection
                if( board_controller.attackvalue == 1 &amp;&amp; deadflag &gt; 0 )
                {
                    //alter deadflag accordingly
                        //alive to auto-res
                    deadflag = deadflag + 1;
                
                    //display hit message
                    textbox(x, y, 'Immortal', c_dkgray, c_white);
                    /*
                    board_tbg.targetx = x;
                    board_tbg.targety = y;
                    board_tbg.value = 'Immortal';
                    board_tbg.frontcolor = c_dkgray;
                    board_tbg.backcolor = c_white;
                    board_tbg.display = 1;
                    */
                }
                //if technique is killing target
                if( board_controller.attackvalue == -1 &amp;&amp; deadflag == 1 )
                {
                    //alter deadflag accordingly
                        //alive to dead
                    deadflag = 0;
                    hp = 0;
                
                    //display hit message
                    textbox(x, y, 'Death', c_dkgray, c_white);
                    /*
                    board_tbg.targetx = x;
                    board_tbg.targety = y;
                    board_tbg.value = 'Death';
                    board_tbg.frontcolor = c_dkgray;
                    board_tbg.backcolor = c_white;
                    board_tbg.display = 1;
                    */
                }
                //if technique is ressurecting the target
                else if( board_controller.attackvalue == 1 &amp;&amp; deadflag == 0 )
                {
                    //alter deadflag accordingly
                        //dead to alive
                    deadflag = 1;
                    
                    //reset statistics
                    hpmax[2] = 0;
                    mpmax[2] = 0;
                    tpmax[2] = 0;
                    
                    hp = hpmax[1]/4;
                    
                    //reset statistics
                    accuracy[2] = 0;
                    evasion[2] = 0;
                    attack[2] = 0;
                    defense[2] = 0;
                    magicpower[2] = 0;
                    magicdefense[2] = 0;
                    range[2] = 0;
                    movement[2] = 0;
                    
                    //load bonuses based on equipped weapons
                    
                    hpmax[2] =          info.weaponbonus[rhand, 01] + info.weaponbonus[lhand, 01] + info.helmbonus[helm, 01] + info.armorbonus[armor, 01] + info.bootsbonus[boots, 01];
                    mpmax[2] =          info.weaponbonus[rhand, 02] + info.weaponbonus[lhand, 02] + info.helmbonus[helm, 02] + info.armorbonus[armor, 02] + info.bootsbonus[boots, 02];
                    tpmax[2] =          info.weaponbonus[rhand, 03] + info.weaponbonus[lhand, 03] + info.helmbonus[helm, 03] + info.armorbonus[armor, 03] + info.bootsbonus[boots, 03];
                    accuracy[2] =       info.weaponbonus[rhand, 04] + info.weaponbonus[lhand, 04] + info.helmbonus[helm, 04] + info.armorbonus[armor, 04] + info.bootsbonus[boots, 04];
                    evasion[2] =        info.weaponbonus[rhand, 05] + info.weaponbonus[lhand, 05] + info.helmbonus[helm, 05] + info.armorbonus[armor, 05] + info.bootsbonus[boots, 05];
                    attack[2] =         info.weaponbonus[rhand, 06] + info.weaponbonus[lhand, 06] + info.helmbonus[helm, 06] + info.armorbonus[armor, 06] + info.bootsbonus[boots, 06];
                    defense[2] =        info.weaponbonus[rhand, 07] + info.weaponbonus[lhand, 07] + info.helmbonus[helm, 07] + info.armorbonus[armor, 07] + info.bootsbonus[boots, 07];
                    magicpower[2] =     info.weaponbonus[rhand, 08] + info.weaponbonus[lhand, 08] + info.helmbonus[helm, 08] + info.armorbonus[armor, 08] + info.bootsbonus[boots, 08];
                    magicdefense[2] =   info.weaponbonus[rhand, 09] + info.weaponbonus[lhand, 09] + info.helmbonus[helm, 09] + info.armorbonus[armor, 09] + info.bootsbonus[boots, 09];
                    range[2] =          info.weaponbonus[rhand, 10] + info.weaponbonus[lhand, 10] + info.helmbonus[helm, 10] + info.armorbonus[armor, 10] + info.bootsbonus[boots, 10];
                    movement[2] =       info.weaponbonus[rhand, 11] + info.weaponbonus[lhand, 11] + info.helmbonus[helm, 11] + info.armorbonus[armor, 11] + info.bootsbonus[boots, 11];
//                    deadflag =          info.weaponbonus[rhand, 11] + info.weaponbonus[lhand, 11] + info.helmbonus[helm, 11] + info.armorbonus[armor, 11] + info.bootsbonus[boots, 11] + deadflag;
                    
                    //boundary checking
                        //if ressurecting would bring the character past its maximum range
                    if( deadflag &gt; board_controller.dead_cap )
                    {
                        //cap range off at maximum
                        deadflag = board_controller.dead_cap;
                    }
                    //else if less than 0, cap at 0
                    else if( deadflag &lt; 0 )
                    {
                        deadflag = 0;
                    }
                
                    //display hit message
                    textbox(x, y, 'Life', c_dkgray, c_white);
                    /*
                    board_tbg.targetx = x;
                    board_tbg.targety = y;
                    board_tbg.value = 'Life';
                    board_tbg.frontcolor = c_dkgray;
                    board_tbg.backcolor = c_white;
                    board_tbg.display = 1;
                    */
                }
                
                
            }
            }
            else
            {
                //record a miss with a value of 0
                board_controller.attackvalue = 0;
                
                //display miss message
                textbox(x, y, 'MISS!', c_black, c_white);
                /*
                board_tbg.targetx = x;
                board_tbg.targety = y;
                board_tbg.value = 'MISS!';
                board_tbg.frontcolor = c_black;
                board_tbg.backcolor = c_white;
                board_tbg.display = 1;
                */
            }
        }    
       
        //if character is being hit by a left hand attack
        if( board_controller.attackvalue2 &gt; 0 )
        {
            //attack with character
                //if character hits opponent
            if( floor(random(board_controller.accuracy_cap)) &lt;= (2*board_controller.accuracy2) - evasion  )
            {
               //resolve damage
                //determine weapon value and weapon direction
                board_controller.attackvalue2 = board_controller.attackvalue2 + ( defense[1] + defense[2] ) * info.weapondirection[board_controller.lweapontracker];
                
                //display hit message
                /*
                board_tbg2.targetx = x;
                board_tbg2.targety = y;
                board_tbg2.value = string(info.weapondirection[lhand]*board_controller.attackvalue2);
                board_tbg2.frontcolor = c_red;
                board_tbg2.backcolor = c_white;
                board_tbg2.display = 1;
                */
            
        
        
            //determine target attribute
                //if targetting HP
            if( info.weapontarget[board_controller.lweapontracker] == 1 )
            {
                //if 0 or more damage is being inflicted
                if( board_controller.attackvalue2 &gt; 0 )
                {
                    //alter hp accordingly
                    hp = hp + ( board_controller.attackvalue2 * info.weapondirection[board_controller.lweapontracker] );
                    
                    //display hit message
                    textbox(x, y, string((board_controller.attackvalue2 * info.weapondirection[board_controller.lweapontracker])), c_red, c_white);
                    /*
                    board_tbg2.targetx = x;
                    board_tbg2.targety = y;
                    board_tbg2.value = string(board_controller.attackvalue2 * info.weapondirection[board_controller.lweapontracker]);
                    board_tbg2.frontcolor = c_red;
                    board_tbg2.backcolor = c_white;
                    board_tbg2.display = 1;
                    */
                    
                }
                
                //boundary checking
                    //if curing would heal the character past its maximum HP
                if( hp &gt; (maxhp[1]+maxhp[2]) )
                {
                    //cap hp off at maximum
                    hp = (maxhp[1]+maxhp[2]);
                }
                //else if less than 0, cap at 0
                else if( hp &lt; 0 )
                {
                    hp = 0;
                }
            }
            //if targetting MP
            else if( info.weapontarget[board_controller.lweapontracker] == 2 )
            {
                //if 0 or more damage is being inflicted
                if( board_controller.attackvalue2 &gt; 0 )
                {
                    //alter mp accordingly and by half
                    mp = mp + ( board_controller.attackvalue2 * info.weapondirection[board_controller.lweapontracker] ) / 2;
                    
                    //display hit message
                    textbox(x, y, string((board_controller.attackvalue2 * info.weapondirection[board_controller.lweapontracker])/2), c_orange, c_white);
                    /*
                    board_tbg2.targetx = x;
                    board_tbg2.targety = y;
                    board_tbg2.value = string((board_controller.attackvalue2 * info.weapondirection[board_controller.lweapontracker])/2);
                    board_tbg2.frontcolor = c_orange;
                    board_tbg2.backcolor = c_white;
                    board_tbg2.display = 1;
                    */
                }
                
                
                //boundary checking
                    //if curing would heal the character past its maximum MP
                if( mp &gt; (maxmp[1]+maxmp[2]) )
                {
                    //cap mp off at maximum
                    mp = (maxmp[1]+maxmp[2]);
                }
                //else if less than 0, cap at 0
                else if( mp &lt; 0 )
                {
                    mp = 0;
                }
                
            }
            //if targetting TP
            else if( info.weapontarget[board_controller.lweapontracker] == 3 )
            {
                //if 0 or more damage is being inflicted
                if( board_controller.attackvalue2 &gt; 0 )
                {
                    //alter tp accordingly and by half
                    tp = tp + ( board_controller.attackvalue2 * info.weapondirection[board_controller.lweapontracker] ) / 2;
                    
                    //display hit message
                    textbox(x, y, string((board_controller.attackvalue2 * info.weapondirection[board_controller.lweapontracker])/2), c_yellow, c_white);
                    /*
                    board_tbg2.targetx = x;
                    board_tbg2.targety = y;
                    board_tbg2.value = string(( board_controller.attackvalue2 * info.weapondirection[board_controller.lweapontracker] ) / 2);
                    board_tbg2.frontcolor = c_yellow;
                    board_tbg2.backcolor = c_white;
                    board_tbg2.display = 1;
                    */
                }
                
                //boundary checking
                    //if curing would heal the character past its maximum TP
                if( tp &gt; (maxtp[1]+maxtp[2]) )
                {
                    //cap tp off at maximum
                    tp = (maxtp[1]+maxtp[2]);
                }
                //else if less than 0, cap at 0
                else if( tp &lt; 0 )
                {
                    tp = 0;
                }
                
            }
            //if targetting accuracy
            else if( info.weapontarget[board_controller.lweapontracker] == 4 )
            {
                //if 0 or more damage is being inflicted
                if( board_controller.attackvalue2 &gt; 0 )
                {
                    //alter attack accordingly and by a quarter
                    accuracy[2] = accuracy[2] + ( board_controller.attackvalue2 * info.weapondirection[board_controller.lweapontracker] ) / 4;
                    
                    //display hit message
                    textbox(x, y, string((board_controller.attackvalue2 * info.weapondirection[board_controller.lweapontracker])/4), c_fuchsia, c_white);
                    /*
                    board_tbg2.targetx = x;
                    board_tbg2.targety = y;
                    board_tbg2.value = string((board_controller.attackvalue2 * info.weapondirection[board_controller.lweapontracker])/4);
                    board_tbg2.frontcolor = c_fuchsia;
                    board_tbg2.backcolor = c_white;
                    board_tbg2.display = 1;
                    */
                }
                
                //boundary checking
                    //if curing would heal the character past its maximum attack
                if( accuracy[1]+accuracy[2] &gt; board_controller.accuracy_cap )
                {
                    //cap attack off at maximum
                    accuracy[2] = board_controller.accuracy_cap - accuracy[1];
                }
                //else if less than 0, cap at 0
                else if( accuracy[1]+accuracy[2] &lt; 0 )
                {
                    accuracy[2] = accuracy[1]*(-1);
                }
                
            }
            //if targetting evasion
            else if( info.weapontarget[board_controller.lweapontracker] == 5 )
            {
                //if 0 or more damage is being inflicted
                if( board_controller.attackvalue2 &gt; 0 )
                {
                    //alter attack accordingly and by a quarter
                    evasion[2] = evasion[2] + ( board_controller.attackvalue2 * info.weapondirection[board_controller.lweapontracker] ) / 4;
                    
                    //display hit message
                    textbox(x, y, string((board_controller.attackvalue2 * info.weapondirection[board_controller.lweapontracker])/4), c_fuchsia, c_white);
                    /*
                    board_tbg2.targetx = x;
                    board_tbg2.targety = y;
                    board_tbg2.value = string(( board_controller.attackvalue2 * info.weapondirection[board_controller.lweapontracker] ) / 4);
                    board_tbg2.frontcolor = c_fuchsia;
                    board_tbg2.backcolor = c_white;
                    board_tbg2.display = 1;
                    */
                }
                
                //boundary checking
                    //if curing would heal the character past its maximum evasion
                if( evasion[1]+evasion[2] &gt; board_controller.evasion_cap )
                {
                    //cap evasion off at maximum
                    attack[2] = board_controller.evasion_cap - evasion[1];
                }
                //else if less than 0, cap at 0
                else if( evasion[1]+evasion[2] &lt; 0 )
                {
                    evasion[2] = evasion[1]*(-1);
                }
                
            }
            //if targetting attack
            else if( info.weapontarget[board_controller.lweapontracker] == 6 )
            {
                //if 0 or more damage is being inflicted
                if( board_controller.attackvalue2 &gt; 0 )
                {
                    //alter attack accordingly and by a quarter
                    attack[2] = attack[2] + ( board_controller.attackvalue2 * info.weapondirection[board_controller.lweapontracker] ) / 4;
                    
                    //display hit message
                    textbox(x, y, string((board_controller.attackvalue2 * info.weapondirection[board_controller.lweapontracker])/4), c_fuchsia, c_white);
                    /*
                    board_tbg2.targetx = x;
                    board_tbg2.targety = y;
                    board_tbg2.value = string(( board_controller.attackvalue2 * info.weapondirection[board_controller.lweapontracker] ) / 4);
                    board_tbg2.frontcolor = c_fuchsia;
                    board_tbg2.backcolor = c_white;
                    board_tbg2.display = 1;
                    */
                }
                
                //boundary checking
                    //if curing would heal the character past its maximum attack
                if( attack[1]+attack[2] &gt; board_controller.attack_cap )
                {
                    //cap attack off at maximum
                    attack[2] = board_controller.attack_cap - attack[1];
                }
                //else if less than 0, cap at 0
                else if( attack[1]+attack[2] &lt; 0 )
                {
                    attack[2] = attack[1]*(-1);
                }
                
            }
            //if targetting defense
            else if( info.weapontarget[board_controller.lweapontracker] == 7 )
            {
                //if 0 or more damage is being inflicted
                if( board_controller.attackvalue2 &gt; 0 )
                {
                    //alter defense accordingly and by a quarter
                    defense[2] = defense[2] + ( board_controller.attackvalue2 * info.weapondirection[board_controller.lweapontracker] ) / 4;
                    
                    //display hit message
                    textbox(x, y, string((board_controller.attackvalue2 * info.weapondirection[board_controller.lweapontracker])/4), c_fuchsia, c_white);
                    /*
                    board_tbg2.targetx = x;
                    board_tbg2.targety = y;
                    board_tbg2.value = string(( board_controller.attackvalue2 * info.weapondirection[board_controller.lweapontracker] ) / 4);
                    board_tbg2.frontcolor = c_fuchsia;
                    board_tbg2.backcolor = c_white;
                    board_tbg2.display = 1;
                    */

                }
                
                //boundary checking
                    //if curing would heal the character past its maximum defense
                if( defense[1]+defense[2] &gt; board_controller.defense_cap )
                {
                    //cap defense off at maximum
                    defense[2] = board_controller.defense_cap - defense[1];
                }
                //else if less than 0, cap at 0
                else if( defense[1]+defense[2] &lt; 0 )
                {
                    defense[2] = defense[1]*(-1);
                }
                
            }
            //if targetting magicpower
            else if( info.weapontarget[board_controller.lweapontracker] == 8 )
            {
                //if 0 or more damage is being inflicted
                if( board_controller.attackvalue2 &gt; 0 )
                {
                    //alter magicpower accordingly and by a quarter
                    magicpower[2] = magicpower[2] + ( board_controller.attackvalue2 * info.weapondirection[board_controller.lweapontracker] ) / 4;
                
                    //display hit message
                    textbox(x, y, string((board_controller.attackvalue2 * info.weapondirection[board_controller.lweapontracker])/4), c_fuchsia, c_white);
                    /*
                    board_tbg2.targetx = x;
                    board_tbg2.targety = y;
                    board_tbg2.value = string(( board_controller.attackvalue2 * info.weapondirection[board_controller.lweapontracker] ) / 4);
                    board_tbg2.frontcolor = c_fuchsia;
                    board_tbg2.backcolor = c_white;
                    board_tbg2.display = 1;
                    */
                }
                
                //boundary checking
                    //if curing would heal the character past its maximum magicpower
                if( magicpower[1]+magicpower[2] &gt; board_controller.magicpower_cap )
                {
                    //cap magicpower off at maximum
                    magicpower[2] = board_controller.magicpower_cap - magicpower[1];
                }
                //else if less than 0, cap at 0
                else if( magicpower[1]+magicpower[2] &lt; 0 )
                {
                    magicpower[2] = magicpower[1]*(-1);
                }
                
            }
            //if targetting magicdefense
            else if( info.weapontarget[board_controller.lweapontracker] == 9 )
            {
                //if 0 or more damage is being inflicted
                if( board_controller.attackvalue2 &gt; 0 )
                {
                    //alter magicdefense accordingly and by a quarter
                    magicdefense[2] = magicdefense[2] + ( board_controller.attackvalue2 * info.weapondirection[board_controller.lweapontracker] ) / 4;
                
                    //display hit message
                    textbox(x, y, string((board_controller.attackvalue2 * info.weapondirection[board_controller.lweapontracker])/4), c_fuchsia, c_white);
                    /*
                    board_tbg2.targetx = x;
                    board_tbg2.targety = y;
                    board_tbg2.value = string(( board_controller.attackvalue2 * info.weapondirection[board_controller.lweapontracker] ) / 4);
                    board_tbg2.frontcolor = c_fuchsia;
                    board_tbg2.backcolor = c_white;
                    board_tbg2.display = 1;
                    */


                }
                
                //boundary checking
                    //if curing would heal the character past its maximum magicdefense
                if( magicdefense[1]+magicdefense[2] &gt; board_controller.magicdefense_cap )
                {
                    //cap magicdefense off at maximum
                    magicdefense[2] = board_controller.magicdefense_cap - magicdefense[1];
                }
                //else if less than 0, cap at 0
                else if( magicdefense[1]+magicdefense[2] &lt; 0 )
                {
                    magicdefense[2] = magicdefense[1]*(-1);
                }
                
            }
            //if targetting movement
            else if( info.weapontarget[board_controller.lweapontracker] == 10 )
            {
                //if 0 or more damage is being inflicted
                if( board_controller.attackvalue2 &gt; 0 )
                {
                    //alter movement accordingly
                    movement[2] = movement[2] + ( board_controller.attackvalue2 * info.weapondirection[board_controller.lweapontracker] ) / 4;
                
                    //display hit message
                    textbox(x, y, string((board_controller.attackvalue2 * info.weapondirection[board_controller.lweapontracker])/4), c_fuchsia, c_white);
                    /*
                    board_tbg2.targetx = x;
                    board_tbg2.targety = y;
                    board_tbg2.value = string(( board_controller.attackvalue2 * info.weapondirection[board_controller.lweapontracker] ) / 4);
                    board_tbg2.frontcolor = c_fuchsia;
                    board_tbg2.backcolor = c_white;
                    board_tbg2.display = 1;
                    */
                }
                
                //boundary checking
                    //if curing would heal the character past its maximum movement
                if( movement[1]+movement[2] &gt; board_controller.movement_cap )
                {
                    //cap movement off at maximum
                    movement[2] = board_controller.movement_cap - movement[1];
                }
                //else if less than 0, cap at 0
                else if( movement[1]+movement[2] &lt; 0 )
                {
                    movement[2] = movement[1]*(-1);
                }
                
            }
            //if targetting range
            else if( info.weapontarget[board_controller.lweapontracker] == 11 )
            {
                //if 0 or more damage is being inflicted
                if( board_controller.attackvalue2 &gt; 0 )
                {
                    //alter range accordingly
                    range[2] = range[2] + ( board_controller.attackvalue2 * info.weapondirection[board_controller.lweapontracker] ) / 4;
                
                    //display hit message
                    textbox(x, y, string((board_controller.attackvalue2 * info.weapondirection[board_controller.lweapontracker])/4), c_fuchsia, c_white);
                    /*
                    board_tbg2.targetx = x;
                    board_tbg2.targety = y;
                    board_tbg2.value = string(( board_controller.attackvalue2 * info.weapondirection[board_controller.lweapontracker] ) / 4);
                    board_tbg2.frontcolor = c_fuchsia;
                    board_tbg2.backcolor = c_white;
                    board_tbg2.display = 1;
                    */
                }
                
                //boundary checking
                    //if curing would heal the character past its maximum range
                if( range[1]+range[2] &gt; board_controller.range_cap )
                {
                    //cap range off at maximum
                    range[2] = board_controller.range_cap - range[1];
                }
                //else if less than 0, cap at 0
                else if( range[1]+range[2] &lt; 0 )
                {
                    range[2] = range[1]*(-1);
                }
                
            }
            //if targetting life status
            else if( info.weapontarget[board_controller.lweapontracker] == 12 )
            {
                //if technique is removing auto-resurrection
                if( board_controller.attackvalue2 == -1 &amp;&amp; deadflag &gt; 1 )
                {
                    //alter deadflag accordingly
                        //auto-res to alive
                    deadflag = deadflag - 1;
                
                    //display hit message
                    textbox(x, y, 'Mortal', c_dkgray, c_white);
                    /*
                    board_tbg2.targetx = x;
                    board_tbg2.targety = y;
                    board_tbg2.value = 'Mortal';
                    board_tbg2.frontcolor = c_dkgray;
                    board_tbg2.backcolor = c_white;
                    board_tbg2.display = 1;
                    */
                }
                //if technique is adding auto-resurrection
                if( board_controller.attackvalue2 == 1 &amp;&amp; deadflag &gt; 0 )
                {
                    //alter deadflag accordingly
                        //alive to auto-res
                    deadflag = deadflag + 1;
                
                    //display hit message
                    textbox(x, y, 'Immortal', c_fuchsia, c_white);
                    /*
                    board_tbg2.targetx = x;
                    board_tbg2.targety = y;
                    board_tbg2.value = 'Immortal';
                    board_tbg2.frontcolor = c_dkgray;
                    board_tbg2.backcolor = c_white;
                    board_tbg2.display = 1;
                    */

                }
                //if technique is killing target
                if( board_controller.attackvalue2 == -1 &amp;&amp; deadflag == 1 )
                {
                    //alter deadflag accordingly
                        //alive to dead
                    deadflag = 0;
                    hp = 0;
                
                    //display hit message
                    textbox(x, y, 'Death', c_dkgray, c_white);
                    /*
                    board_tbg2.targetx = x;
                    board_tbg2.targety = y;
                    board_tbg2.value = 'Death';
                    board_tbg2.frontcolor = c_dkgray;
                    board_tbg2.backcolor = c_white;
                    board_tbg2.display = 1;
                    */

                }
                //if technique is ressurecting the target
                else if( board_controller.attackvalue2 == 1 &amp;&amp; deadflag == 0 )
                {
                    //alter deadflag accordingly
                        //dead to alive
                    deadflag = 1;
                    
                    //reset statistics
                    hpmax[2] = 0;
                    mpmax[2] = 0;
                    tpmax[2] = 0;
                    
                    hp = hpmax[1]/4;
                    
                    //reset statistics
                    accuracy[2] = 0;
                    evasion[2] = 0;
                    attack[2] = 0;
                    defense[2] = 0;
                    magicpower[2] = 0;
                    magicdefense[2] = 0;
                    range[2] = 0;
                    movement[2] = 0;
                    
                    //load bonuses based on equipped weapons
                    
                    hpmax[2] =          info.weaponbonus[rhand, 01] + info.weaponbonus[lhand, 01] + info.helmbonus[helm, 01] + info.armorbonus[armor, 01] + info.bootsbonus[boots, 01];
                    mpmax[2] =          info.weaponbonus[rhand, 02] + info.weaponbonus[lhand, 02] + info.helmbonus[helm, 02] + info.armorbonus[armor, 02] + info.bootsbonus[boots, 02];
                    tpmax[2] =          info.weaponbonus[rhand, 03] + info.weaponbonus[lhand, 03] + info.helmbonus[helm, 03] + info.armorbonus[armor, 03] + info.bootsbonus[boots, 03];
                    accuracy[2] =       info.weaponbonus[rhand, 04] + info.weaponbonus[lhand, 04] + info.helmbonus[helm, 04] + info.armorbonus[armor, 04] + info.bootsbonus[boots, 04];
                    evasion[2] =        info.weaponbonus[rhand, 05] + info.weaponbonus[lhand, 05] + info.helmbonus[helm, 05] + info.armorbonus[armor, 05] + info.bootsbonus[boots, 05];
                    attack[2] =         info.weaponbonus[rhand, 06] + info.weaponbonus[lhand, 06] + info.helmbonus[helm, 06] + info.armorbonus[armor, 06] + info.bootsbonus[boots, 06];
                    defense[2] =        info.weaponbonus[rhand, 07] + info.weaponbonus[lhand, 07] + info.helmbonus[helm, 07] + info.armorbonus[armor, 07] + info.bootsbonus[boots, 07];
                    magicpower[2] =     info.weaponbonus[rhand, 08] + info.weaponbonus[lhand, 08] + info.helmbonus[helm, 08] + info.armorbonus[armor, 08] + info.bootsbonus[boots, 08];
                    magicdefense[2] =   info.weaponbonus[rhand, 09] + info.weaponbonus[lhand, 09] + info.helmbonus[helm, 09] + info.armorbonus[armor, 09] + info.bootsbonus[boots, 09];
                    range[2] =          info.weaponbonus[rhand, 10] + info.weaponbonus[lhand, 10] + info.helmbonus[helm, 10] + info.armorbonus[armor, 10] + info.bootsbonus[boots, 10];
                    movement[2] =       info.weaponbonus[rhand, 11] + info.weaponbonus[lhand, 11] + info.helmbonus[helm, 11] + info.armorbonus[armor, 11] + info.bootsbonus[boots, 11];
                    //deadflag =          info.weaponbonus[rhand, 12] + info.weaponbonus[lhand, 12] + info.helmbonus[helm, 12] + info.armorbonus[armor, 12] + info.bootsbonus[boots, 12] + deadflag;
                    
                    //boundary checking
                        //if ressurecting would bring the character past its maximum range
                    if( deadflag &gt; board_controller.dead_cap )
                    {
                        //cap range off at maximum
                        deadflag = board_controller.dead_cap;
                    }
                    //else if less than 0, cap at 0
                    else if( deadflag &lt; 0 )
                    {
                        deadflag = 0;
                    }
                
                    //display hit message
                    textbox(x, y, 'Life', c_dkgray, c_white);
                    /*
                    board_tbg2.targetx = x;
                    board_tbg2.targety = y;
                    board_tbg2.value = 'Life';
                    board_tbg2.frontcolor = c_dkgray;
                    board_tbg2.backcolor = c_white;
                    board_tbg2.display = 1;
                    */

                    
                }
                
                
            }
            }
            else
            {
                //record a miss with a value of 0
                board_controller.attackvalue2 = 0;
                
                //display miss message
                textbox(x, y, 'MISS!', c_black, c_white);
                /*
                board_tbg2.targetx = x;
                board_tbg2.targety = y;
                board_tbg2.value = 'MISS';
                board_tbg2.frontcolor = c_black;
                board_tbg2.backcolor = c_white;
                board_tbg2.display = 1;
                */
            }
        }

        
        
        
        
        
                
        //clear attackvalue
        //board_controller.attackvalue = 0;
            
            
        //destroy target
        board_target.destroy = 1;
                    
        //remove focus
        board_controller.attackfocus = 0;
            
        //return focus to the board
        board_controller.boardfocus = 1;
                   
        //reset movetracker
        board_controller.movetracker = 0;
        board_controller.rweapontracker = 0;
        board_controller.lweapontracker = 0;
        
        //reset values
        board_controller.accuracy = 0;
        board_controller.accuracy2 = 0;
        board_controller.attackvalue = 0;
        board_controller.attackvalue2 = 0;
                
        //determine if character has died
        if( hp &lt; 1 )
        {
            //dead
            deadflag = 0;
                
            //reset modifiers
            maxhp[2] = 0;
            maxmp[2] = 0;
            maxtp[2] = 0;
            accuracy[2] = 0;
            evasin[2] = 0;
            attack[2] = 0;
            defense[2] = 0;
            magicpower[2] = 0;
            magicdefense[2] = 0;
            movement[2] = 0;
            range[2] = 0;

                
            //reduce number of players on the respective team
            board_controller.playerlimit[player] = board_controller.playerlimit[player] - 1;
                
            //determine if entire team has died
            if( board_controller.playerlimit[player] == 0 )
            {
                //declare opposite team a winner
                if( player == 1 )
                {
                    //declare player 2 a winner
                    show_message('Player 2 wins!');
                }
                else if( player == 2 )
                {
                    //declare player 1 a winner
                    show_message('Player 1 wins!');
                }
            }
        }
        
        
        
            
    }
    //if the focus is technique AND targeted AND spell is loaded
    else if ( board_controller.techniquefocus == 1 &amp;&amp; x == board_target.x &amp;&amp; y == board_target.y &amp;&amp; board_controller.techniquetracker != 0)
    {
        //perform technique
            //if character hits opponent
        if( floor(random(board_controller.accuracy_cap)) &lt;= info.techniquehit[board_controller.techniquetracker]  )
        {
            //determine damage
                //determine value AND technique direction
            board_controller.attackvalue = board_controller.attackvalue + ( (defense[1]+defense[2]) * info.techniquedirection[board_controller.techniquetracker] );
        

                
            
        //determine target attribute
            //if targetting HP
        if( info.techniquetarget[board_controller.techniquetracker] == 1 )
        {
            //if 0 or more damage is being inflicted
            if( board_controller.attackvalue &gt; 0 )
            {
                //alter hp accordingly
                hp = hp + ( board_controller.attackvalue * info.techniquedirection[board_controller.techniquetracker] );
                    
                //display hit message
                textbox(x, y, string((board_controller.attackvalue * info.techniquedirection[board_controller.techniquetracker])), c_red, c_white);
                /*
                board_tbg.targetx = x;
                board_tbg.targety = y;
                board_tbg.value = string(board_controller.attackvalue * info.techniquedirection[board_controller.techniquetracker]);
                board_tbg.frontcolor = c_red;
                board_tbg.backcolor = c_white;
                board_tbg.display = 1;
                */
            }
                
            //boundary checking
                //if curing would heal the character past its maximum HP
            if( hp &gt; (maxhp[1]+maxhp[2]) )
            {
                //cap hp off at maximum
                hp = (maxhp[1]+maxhp[2]);
            }
            //else if less than 0, cap at 0
            else if( hp &lt; 0 )
            {
                hp = 0;
            }
        }
        //if targetting MP
        else if( info.techniquetarget[board_controller.techniquetracker] == 2 )
        {
            //if 0 or more damage is being inflicted
            if( board_controller.attackvalue &gt; 0 )
            {
                //alter mp accordingly and by half
                mp = mp + ( board_controller.attackvalue * info.techniquedirection[board_controller.techniquetracker] ) / 2;
                    
                //display hit message
                textbox(x, y, string((board_controller.attackvalue * info.techniquedirection[board_controller.techniquetracker])/2), c_orange, c_white);
                /*
                board_tbg.targetx = x;
                board_tbg.targety = y;
                board_tbg.value = string((board_controller.attackvalue * info.techniquedirection[board_controller.techniquetracker])/2);
                board_tbg.frontcolor = c_orange;
                board_tbg.backcolor = c_white;
                board_tbg.display = 1;
                */

            }
                
                
            //boundary checking
                //if curing would heal the character past its maximum MP
            if( mp &gt; (maxmp[1]+maxmp[2]) )
            {
                //cap mp off at maximum
                mp = (maxmp[1]+maxmp[2]);
            }
            //else if less than 0, cap at 0
            else if( mp &lt; 0 )
            {
                mp = 0;
            }
                
        }
        //if targetting TP
        else if( info.techniquetarget[board_controller.techniquetracker] == 3 )
        {
            //if 0 or more damage is being inflicted
            if( board_controller.attackvalue &gt; 0 )
            {
                //alter tp accordingly and by half
                tp = tp + ( board_controller.attackvalue * info.techniquedirection[board_controller.techniquetracker] ) / 2;
                    
                //display hit message
                textbox(x, y, string((board_controller.attackvalue * info.techniquedirection[board_controller.techniquetracker])/2), c_yellow, c_white);
                /*
                board_tbg.targetx = x;
                board_tbg.targety = y;
                board_tbg.value = string((board_controller.attackvalue * info.techniquedirection[board_controller.techniquetracker])/2);
                board_tbg.frontcolor = c_yellow;
                board_tbg.backcolor = c_white;
                board_tbg.display = 1;
                */
            }
                
            //boundary checking
                //if curing would heal the character past its maximum TP
            if( tp &gt; (maxtp[1]+maxtp[2]) )
            {
                //cap tp off at maximum
                tp = (maxtp[1]+maxtp[2]);
            }
            //else if less than 0, cap at 0
            else if( tp &lt; 0 )
            {
                tp = 0;
            }
                
        }
        //if targetting accuracy
        else if( info.techniquetarget[board_controller.techniquetracker] == 4 )
        {
            //if 0 or more damage is being inflicted
            if( board_controller.attackvalue &gt; 0 )
            {
                //alter attack accordingly and by a quarter
                accuracy[2] = accuracy[2] + ( board_controller.attackvalue * info.techniquedirection[board_controller.techniquetracker] ) / 4;
                    
                //display hit message
                textbox(x, y, string((board_controller.attackvalue * info.techniquedirection[board_controller.techniquetracker])/4), c_fuchsia, c_white);
                /*
                board_tbg.targetx = x;
                board_tbg.targety = y;
                board_tbg.value = string((board_controller.attackvalue * info.techniquedirection[board_controller.techniquetracker])/4);
                board_tbg.frontcolor = c_fuchsia;
                board_tbg.backcolor = c_white;
                board_tbg.display = 1;
                */
            }
                
            //boundary checking
                //if curing would heal the character past its maximum attack
            if( accuracy[1]+accuracy[2] &gt; board_controller.accuracy_cap )
            {
                //cap attack off at maximum
                accuracy[2] = board_controller.accuracy_cap - accuracy[1];
            }
            //else if less than 0, cap at 0
            else if( accuracy[1]+accuracy[2] &lt; 0 )
            {
                accuracy[2] = accuracy[1]*(-1);
            }
                
        }
        //if targetting evasion
        else if( info.techniquetarget[board_controller.techniquetracker] == 5 )
        {
            //if 0 or more damage is being inflicted
            if( board_controller.attackvalue &gt; 0 )
            {
                //alter attack accordingly and by a quarter
                evasion[2] = evasion[2] + ( board_controller.attackvalue * info.techniquedirection[board_controller.techniquetracker] ) / 4;
                    
                //display hit message
                textbox(x, y, string((board_controller.attackvalue * info.techniquedirection[board_controller.techniquetracker])/4), c_fuchsia, c_white);
                /*
                board_tbg.targetx = x;
                board_tbg.targety = y;
                board_tbg.value = string((board_controller.attackvalue * info.techniquedirection[board_controller.techniquetracker])/4);
                board_tbg.frontcolor = c_fuchsia;
                board_tbg.backcolor = c_white;
                board_tbg.display = 1;
                */
            }
                
            //boundary checking
                //if curing would heal the character past its maximum evasion
            if( evasion[1]+evasion[2] &gt; board_controller.attack_cap )
            {
                //cap evasion off at maximum
                attack[2] = board_controller.evasion_cap - evasion[1];
            }
            //else if less than 0, cap at 0
            else if( evasion[1]+evasion[2] &lt; 0 )
            {
                evasion[2] = evasion[1]*(-1);
            }
                
        }
        //if targetting attack
        else if( info.techniquetarget[board_controller.techniquetracker] == 6 )
        {
            //if 0 or more damage is being inflicted
            if( board_controller.attackvalue &gt; 0 )
            {
                //alter attack accordingly and by a quarter
                attack[2] = attack[2] + ( board_controller.attackvalue * info.techniquedirection[board_controller.techniquetracker] ) / 4;
                    
                //display hit message
                textbox(x, y, string((board_controller.attackvalue * info.techniquedirection[board_controller.techniquetracker])/4), c_fuchsia, c_white);
                /*
                board_tbg.targetx = x;
                board_tbg.targety = y;
                board_tbg.value = string((board_controller.attackvalue * info.techniquedirection[board_controller.techniquetracker])/4);
                board_tbg.frontcolor = c_fuchsia;
                board_tbg.backcolor = c_white;
                board_tbg.display = 1;
                */
            }
                
            //boundary checking
                //if curing would heal the character past its maximum attack
            if( attack[1]+attack[2] &gt; board_controller.attack_cap )
            {
                //cap attack off at maximum
                attack[2] = board_controller.attack_cap - attack[1];
            }
            //else if less than 0, cap at 0
            else if( attack[1]+attack[2] &lt; 0 )
            {
                attack[2] = attack[1]*(-1);
            }
                
        }
        //if targetting defense
        else if( info.techniquetarget[board_controller.techniquetracker] == 7 )
        {
            //if 0 or more damage is being inflicted
            if( board_controller.attackvalue &gt; 0 )
            {
                //alter defense accordingly and by a quarter
                defense[2] = defense[2] + ( board_controller.attackvalue * info.techniquedirection[board_controller.techniquetracker] ) / 4;
                    
                //display hit message
                textbox(x, y, string((board_controller.attackvalue * info.techniquedirection[board_controller.techniquetracker])/4), c_fuchsia, c_white);
                /*
                board_tbg.targetx = x;
                board_tbg.targety = y;
                board_tbg.value = string((board_controller.attackvalue * info.techniquedirection[board_controller.techniquetracker])/4);
                board_tbg.frontcolor = c_fuchsia;
                board_tbg.backcolor = c_white;
                board_tbg.display = 1;
                */
                
            }
                
            //boundary checking
                //if curing would heal the character past its maximum defense
            if( defense[1]+defense[2] &gt; board_controller.defense_cap )
            {
                //cap defense off at maximum
                defense[2] = board_controller.defense_cap - defense[1];
            }
            //else if less than 0, cap at 0
            else if( defense[1]+defense[2] &lt; 0 )
            {
                defense[2] = defense[1]*(-1);
            }
                
        }
        //if targetting magicpower
        else if( info.techniquetarget[board_controller.techniquetracker] == 8 )
        {
            //if 0 or more damage is being inflicted
            if( board_controller.attackvalue &gt; 0 )
            {
                //alter magicpower accordingly and by a quarter
                magicpower[2] = magicpower[2] + ( board_controller.attackvalue * info.techniquedirection[board_controller.techniquetracker] ) / 4;
                
                //display hit message
                textbox(x, y, string((board_controller.attackvalue * info.techniquedirection[board_controller.techniquetracker])/4), c_fuchsia, c_white);
                /*
                board_tbg.targetx = x;
                board_tbg.targety = y;
                board_tbg.value = string((board_controller.attackvalue * info.techniquedirection[board_controller.techniquetracker])/4);
                board_tbg.frontcolor = c_fuchsia;
                board_tbg.backcolor = c_white;
                board_tbg.display = 1;
                */
            }
                
            //boundary checking
                //if curing would heal the character past its maximum magicpower
            if( magicpower[1]+magicpower[2] &gt; board_controller.magicpower_cap )
            {
                //cap magicpower off at maximum
                magicpower[2] = board_controller.magicpower_cap - magicpower[1];
            }
            //else if less than 0, cap at 0
            else if( magicpower[1]+magicpower[2] &lt; 0 )
            {
                magicpower[2] = magicpower[1]*(-1);
            }
                
        }
        //if targetting magicdefense
        else if( info.techniquetarget[board_controller.techniquetracker] == 9 )
        {
            //if 0 or more damage is being inflicted
            if( board_controller.attackvalue &gt; 0 )
            {
                //alter magicdefense accordingly and by a quarter
                magicdefense[2] = magicdefense[2] + ( board_controller.attackvalue * info.techniquedirection[board_controller.techniquetracker] ) / 4;
                
                //display hit message
                textbox(x, y, string((board_controller.attackvalue * info.techniquedirection[board_controller.techniquetracker])/4), c_fuchsia, c_white);
                /*
                board_tbg.targetx = x;
                board_tbg.targety = y;
                board_tbg.value = string((board_controller.attackvalue * info.techniquedirection[board_controller.techniquetracker])/4);
                board_tbg.frontcolor = c_fuchsia;
                board_tbg.backcolor = c_white;
                board_tbg.display = 1;
                */
                
            }
                
            //boundary checking
                //if curing would heal the character past its maximum magicdefense
            if( magicdefense[1]+magicdefense[2] &gt; board_controller.magicdefense_cap )
            {
                //cap magicdefense off at maximum
                magicdefense[2] = board_controller.magicdefense_cap - magicdefense[1];
            }
            //else if less than 0, cap at 0
            else if( magicdefense[1]+magicdefense[2] &lt; 0 )
            {
                magicdefense[2] = magicdefense[1]*(-1);
            }
                
        }
        //if targetting movement
        else if( info.techniquetarget[board_controller.techniquetracker] == 10 )
        {
            //if 0 or more damage is being inflicted
            if( board_controller.attackvalue &gt; 0 )
            {
                //alter movement accordingly
                movement[2] = movement[2] + ( board_controller.attackvalue * info.techniquedirection[board_controller.techniquetracker] ) / 4;
                
                //display hit message
                textbox(x, y, string((board_controller.attackvalue * info.techniquedirection[board_controller.techniquetracker])/4), c_fuchsia, c_white);
                /*
                board_tbg.targetx = x;
                board_tbg.targety = y;
                board_tbg.value = string((board_controller.attackvalue * info.techniquedirection[board_controller.techniquetracker])/4);
                board_tbg.frontcolor = c_fuchsia;
                board_tbg.backcolor = c_white;
                board_tbg.display = 1;
                */
                    
                
            }
                
            //boundary checking
                //if curing would heal the character past its maximum movement
            if( movement[1]+movement[2] &gt; board_controller.movement_cap )
            {
                //cap movement off at maximum
                movement[2] = board_controller.movement_cap - movement[1];
            }
            //else if less than 0, cap at 0
            else if( movement[1]+movement[2] &lt; 0 )
            {
                movement[2] = movement[1]*(-1);
            }
                
        }
        //if targetting range
        else if( info.techniquetarget[board_controller.techniquetracker] == 11 )
        {
            //if 0 or more damage is being inflicted
            if( board_controller.attackvalue &gt; 0 )
            {
                //alter range accordingly
                range[2] = range[2] + ( board_controller.attackvalue * info.techniquedirection[board_controller.techniquetracker] ) / 4;
                
                //display hit message
                textbox(x, y, string((board_controller.attackvalue * info.techniquedirection[board_controller.techniquetracker])/4), c_fuchsia, c_white);
                /*
                board_tbg.targetx = x;
                board_tbg.targety = y;
                board_tbg.value = string((board_controller.attackvalue * info.techniquedirection[board_controller.techniquetracker])/4);
                board_tbg.frontcolor = c_fuchsia;
                board_tbg.backcolor = c_white;
                board_tbg.display = 1;
                */
            }
                
            //boundary checking
                //if curing would heal the character past its maximum range
            if( range[1]+range[2] &gt; board_controller.range_cap )
            {
                //cap range off at maximum
                range[2] = board_controller.range_cap - range[1];
            }
            //else if less than 0, cap at 0
            else if( range[1]+range[2] &lt; 0 )
            {
                range[2] = range[1]*(-1);
            }
                
        }
        //if targetting life status
        else if( info.techniquetarget[board_controller.techniquetracker] == 12 )
        {
            //if technique is removing auto-resurrection
            if( board_controller.attackvalue == -1 &amp;&amp; deadflag &gt; 1 )
            {
                //alter deadflag accordingly
                    //auto-res to alive
                deadflag = deadflag - 1;
                
                //display hit message
                textbox(x, y, 'Mortal', c_dkgray, c_white);
                /*
                board_tbg.targetx = x;
                board_tbg.targety = y;
                board_tbg.value = 'Mortal';
                board_tbg.frontcolor = c_dkgray;
                board_tbg.backcolor = c_white;
                board_tbg.display = 1;
                */
            }
            //if technique is adding auto-resurrection
            if( board_controller.attackvalue == 1 &amp;&amp; deadflag &gt; 0 )
            {
                //alter deadflag accordingly
                    //alive to auto-res
                deadflag = deadflag + 1;
                
                //display hit message
                textbox(x, y, 'Immortal', c_dkgray, c_white);
                /*
                board_tbg.targetx = x;
                board_tbg.targety = y;
                board_tbg.value = 'Immortal';
                board_tbg.frontcolor = c_dkgray;
                board_tbg.backcolor = c_white;
                board_tbg.display = 1;
                */
            }
            //if technique is killing target
            if( board_controller.attackvalue == -1 &amp;&amp; deadflag == 1 )
            {
                //alter deadflag accordingly
                    //alive to dead
                deadflag = 0;
                hp = 0;
                
                //display hit message
                textbox(x, y, 'Death', c_dkgray, c_white);
                /*
                board_tbg.targetx = x;
                board_tbg.targety = y;
                board_tbg.value = 'Death';
                board_tbg.frontcolor = c_dkgray;
                board_tbg.backcolor = c_white;
                board_tbg.display = 1;
                */
            }
            //if technique is ressurecting the target
            else if( board_controller.attackvalue == 1 &amp;&amp; deadflag == 0 )
            {
                //alter deadflag accordingly
                    //dead to alive
                deadflag = 1;
                
                //reset statistics
                    hpmax[2] = 0;
                    mpmax[2] = 0;
                    tpmax[2] = 0;
                    
                    hp = hpmax[1]/4;
                    
                //reset statistics
                accuracy[2] = 0;
                evasion[2] = 0;
                attack[2] = 0;
                defense[2] = 0;
                magicpower[2] = 0;
                magicdefense[2] = 0;
                range[2] = 0;
                movement[2] = 0;
                    
                //load bonuses based on equipped weapons
                
                hpmax[2] =          info.weaponbonus[rhand, 01] + info.weaponbonus[lhand, 01] + info.helmbonus[helm, 01] + info.armorbonus[armor, 01] + info.bootsbonus[boots, 01];
                mpmax[2] =          info.weaponbonus[rhand, 02] + info.weaponbonus[lhand, 02] + info.helmbonus[helm, 02] + info.armorbonus[armor, 02] + info.bootsbonus[boots, 02];
                tpmax[2] =          info.weaponbonus[rhand, 03] + info.weaponbonus[lhand, 03] + info.helmbonus[helm, 03] + info.armorbonus[armor, 03] + info.bootsbonus[boots, 03];
                accuracy[2] =       info.weaponbonus[rhand, 04] + info.weaponbonus[lhand, 04] + info.helmbonus[helm, 04] + info.armorbonus[armor, 04] + info.bootsbonus[boots, 04];
                evasion[2] =        info.weaponbonus[rhand, 05] + info.weaponbonus[lhand, 05] + info.helmbonus[helm, 05] + info.armorbonus[armor, 05] + info.bootsbonus[boots, 05];
                attack[2] =         info.weaponbonus[rhand, 06] + info.weaponbonus[lhand, 06] + info.helmbonus[helm, 06] + info.armorbonus[armor, 06] + info.bootsbonus[boots, 06];
                defense[2] =        info.weaponbonus[rhand, 07] + info.weaponbonus[lhand, 07] + info.helmbonus[helm, 07] + info.armorbonus[armor, 07] + info.bootsbonus[boots, 07];
                magicpower[2] =     info.weaponbonus[rhand, 08] + info.weaponbonus[lhand, 08] + info.helmbonus[helm, 08] + info.armorbonus[armor, 08] + info.bootsbonus[boots, 08];
                magicdefense[2] =   info.weaponbonus[rhand, 09] + info.weaponbonus[lhand, 09] + info.helmbonus[helm, 09] + info.armorbonus[armor, 09] + info.bootsbonus[boots, 09];
                range[2] =          info.weaponbonus[rhand, 10] + info.weaponbonus[lhand, 10] + info.helmbonus[helm, 10] + info.armorbonus[armor, 10] + info.bootsbonus[boots, 10];
                movement[2] =       info.weaponbonus[rhand, 11] + info.weaponbonus[lhand, 11] + info.helmbonus[helm, 11] + info.armorbonus[armor, 11] + info.bootsbonus[boots, 11];
                //deadflag =          info.weaponbonus[rhand, 12] + info.weaponbonus[lhand, 12] + info.helmbonus[helm, 12] + info.armorbonus[armor, 12] + info.bootsbonus[boots, 12] + deadflag;
                

                //boundary checking
                    //if ressurecting would bring the character past its maximum range
                if( deadflag &gt; board_controller.dead_cap )
                {
                    //cap range off at maximum
                    deadflag = board_controller.dead_cap;
                }
                //else if less than 0, cap at 0
                else if( deadflag &lt; 0 )
                {
                    deadflag = 0;
                }
                
                //display hit message
                textbox(x, y, 'Life', c_fuchsia, c_white);
                /*
                board_tbg.targetx = x;
                board_tbg.targety = y;
                board_tbg.value = 'Life';
                board_tbg.frontcolor = c_dkgray;
                board_tbg.backcolor = c_white;
                board_tbg.display = 1;
                */
                
            }
                
                
        }
        }
        else
        {
            //record a miss with a value of 0
            board_controller.attackvalue = 0;
                
            //display miss message
            textbox(x, y, 'MISS!', c_black, c_white);
            /*
            board_tbg.targetx = x;
            board_tbg.targety = y;
            board_tbg.value = 'MISS!';
            board_tbg.frontcolor = c_black;
            board_tbg.backcolor = c_white;
            board_tbg.display = 1;
            */

        }


        //clear attackvalue
        //board_controller.attackvalue = 0;
             
        //destroy target
        //board_target.destroy = 1;
                    
        //remove focus
        board_controller.techniquefocus = 0;
            
        //return focus to the board
        board_controller.boardfocus = 1;
                   
        //reset movetracker
        board_controller.movetracker = 0;
        //board_controller.techniquetracker = 0;
             
        //boundary checking   
            //determine if character has died
        if( hp &lt; 1 )
        {
            deadflag = 1;
                
            //reset modifiers
            maxhp[2] = 0;
            maxmp[2] = 0;
            maxtp[2] = 0;
            accuracy[2] = 0;
            evasion[2] = 0;
            attack[2] = 0;
            defense[2] = 0;
            magicpower[2] = 0;
            magicdefense[2] = 0;
            movement[2] = 0;
            range[2] = 0;


                
            //if dead player was complete and on current player's team
            if( completeflag == 1 &amp;&amp; board_controller.player == player)
            {
                //rollback completed players
                board_controller.playertracker[player] = board_controller.playertracker[player] - 1;
            }
                
            //reduce number of players on the respective team
            board_controller.playerlimit[player] = board_controller.playerlimit[player] - 1;
                
            //determine if entire team has died
            if( board_controller.playerlimit[player] == 0 )
            {
                //declare opposite team a winner
                if( player == 1 )
                {
                    //declare player 2 a winner
                    show_message('Player 2 wins!');
                }
                else if( player == 2 )
                {
                    //declare player 1 a winner
                    show_message('Player 1 wins!');
                }
            }
        }
            
        //trip magic completion
        board_controller.techniquecomplete = 1; 
            
        //board_controller.spelltracker = 0;
            

    }
    //if the focus is magic AND targeted AND spell is loaded
    else if ( board_controller.magicfocus == 1 &amp;&amp; x == board_target.x &amp;&amp; y == board_target.y &amp;&amp; board_controller.spelltracker != 0)
    {
        //perform magic
            //magic is performed
        if( floor(random(board_controller.accuracy_cap)) &lt;= info.spellhit[board_controller.spelltracker]  )
        {
            //resolve damage
                //determine value AND spell direction
            board_controller.attackvalue = board_controller.attackvalue + ( (magicdefense[1]+magicdefense[2]) * info.spelldirection[board_controller.spelltracker] );
        
        //determine target attribute
            //if targetting HP
        if( info.spelltarget[board_controller.spelltracker] == 1 )
        {
            //if 0 or more damage is being inflicted
            if( board_controller.attackvalue &gt; 0 )
            {
                //alter hp accordingly
                hp = hp + ( board_controller.attackvalue * info.spelldirection[board_controller.spelltracker] );
                        
                //display hit message
                textbox(x, y, string((board_controller.attackvalue * info.spelldirection[board_controller.spelltracker])), c_red, c_white);
                /*
                board_tbg.targetx = x;
                board_tbg.targety = y;
                board_tbg.value = string(board_controller.attackvalue * info.spelldirection[board_controller.spelltracker]);
                board_tbg.frontcolor = c_red;
                board_tbg.backcolor = c_white;
                board_tbg.display = 1;
                */
            }
                
            //boundary checking
                //if curing would heal the character past its maximum HP
            if( hp &gt; (maxhp[1]+maxhp[2]) )
            {
                //cap hp off at maximum
                hp = (maxhp[1]+maxhp[2]);
            }
            //else if less than 0, cap at 0
            else if( hp &lt; 0 )
            {
                hp = 0;
            }
        }
        //if targetting MP
        else if( info.spelltarget[board_controller.spelltracker] == 2 )
        {
            //if 0 or more damage is being inflicted
            if( board_controller.attackvalue &gt; 0 )
            {
                //alter mp accordingly and by half
                 mp = ( mp + ( board_controller.attackvalue * info.spelldirection[board_controller.spelltracker] ) ) / 2;
                    
               //display hit message
               textbox(x, y, string((board_controller.attackvalue * info.spelldirection[board_controller.spelltracker])/2), c_orange, c_white);
               /*
               board_tbg.targetx = x;
               board_tbg.targety = y;
               board_tbg.value = string((board_controller.attackvalue * info.spelldirection[board_controller.spelltracker])/2);
               board_tbg.frontcolor = c_orange;
               board_tbg.backcolor = c_white;
               board_tbg.display = 1;
               */

           }
                
            //boundary checking
                //if curing would heal the character past its maximum MP
            if( mp &gt; (maxmp[1]+maxmp[2]) )
            {
                //cap mp off at maximum
                mp = (maxmp[1]+maxmp[2]);
            }
            //else if less than 0, cap at 0
            else if( mp &lt; 0 )
            {
                mp = 0;
            }
                
        }
        //if targetting TP
        else if( info.spelltarget[board_controller.spelltracker] == 3 )
        {
            //if 0 or more damage is being inflicted
            if( board_controller.attackvalue &gt; 0 )
            {
                //alter hp accordingly and by half
                tp = ( tp + ( board_controller.attackvalue * info.spelldirection[board_controller.spelltracker] ) ) / 2;
                    
                //display hit message
                textbox(x, y, string((board_controller.attackvalue * info.spelldirection[board_controller.spelltracker])/2), c_yellow, c_white);
                /*
                board_tbg.targetx = x;
                board_tbg.targety = y;
                board_tbg.value = string((board_controller.attackvalue * info.spelldirection[board_controller.spelltracker])/2);
                board_tbg.frontcolor = c_yellow;
                board_tbg.backcolor = c_white;
                board_tbg.display = 1;
                */


            }
                
            //boundary checking
                //if curing would heal the character past its maximum TP
            if( tp &gt; (maxtp[1]+maxtp[2]) )
            {
               //cap tp off at maximum
               tp = (maxtp[1]+maxtp[2]);
            }
            //else if less than 0, cap at 0
            else if( tp &lt; 0 )
            {
                tp = 0;
            }
                
        }
        //if targetting accuracy
        else if( info.spelltarget[board_controller.spelltracker] == 4 )
        {
            //if 0 or more damage is being inflicted
            if( board_controller.attackvalue &gt; 0 )
            {
                //alter attack accordingly and by a quarter
                accuracy[2] = ( board_controller.attackvalue * info.spelldirection[board_controller.spelltracker] ) / 4;
                    
                //display hit message
                textbox(x, y, string((board_controller.attackvalue * info.spelldirection[board_controller.spelltracker])/4), c_fuchsia, c_white);
                /*
                board_tbg.targetx = x;
                board_tbg.targety = y;
                board_tbg.value = string((board_controller.attackvalue * info.spelldirection[board_controller.spelltracker])/4);
                board_tbg.frontcolor = c_fuchsia;
                board_tbg.backcolor = c_white;
                board_tbg.display = 1;
                */
            }
                
            //boundary checking
                //if curing would heal the character past its maximum attack
            if( accuracy[1]+accuracy[2] &gt; board_controller.attack_cap )
            {
                //cap attack off at maximum
                accuracy[2] = board_controller.accuracy_cap - accuracy[1];
            }
            //else if less than 0, cap at 0
            else if( accuract[1]+accuracy[2] &lt; 0 )
            {
                accuracy[2] = accuracy[1]*(-1);
            }
                
        }
        //if targetting evasion
        else if( info.spelltarget[board_controller.spelltracker] == 5 )
        {
            //if 0 or more damage is being inflicted
            if( board_controller.attackvalue &gt; 0 )
            {
                //alter defense accordingly and by a quarter
                evasion[2] = ( board_controller.attackvalue * info.spelldirection[board_controller.spelltracker] ) / 4;
                    
                //display hit message
                textbox(x, y, string((board_controller.attackvalue * info.spelldirection[board_controller.spelltracker])/4), c_fuchsia, c_white);
                /*
                board_tbg.targetx = x;
                board_tbg.targety = y;
                board_tbg.value = string((board_controller.attackvalue * info.spelldirection[board_controller.spelltracker])/4);
                board_tbg.frontcolor = c_fuchsia;
                board_tbg.backcolor = c_white;
                board_tbg.display = 1;
                */
        
            }
                
            //boundary checking
                //if curing would heal the character past its maximum evasion
            if( evasion[1]+evasion[2] &gt; board_controller.evasion_cap )
            {
                //cap defense off at maximum
                evasion[2] = board_controller.evasion_cap - evasion[1];
            }
            //else if less than 0, cap at 0
            else if( evasion[1]+evasion[2] &lt; 0 )
            {
                evasion[2] = evasion[1]*(-1);
            }
                
        }
        //if targetting attack
        else if( info.spelltarget[board_controller.spelltracker] == 6 )
        {
             //if 0 or more damage is being inflicted
           if( board_controller.attackvalue &gt; 0 )
           {
                //alter attack accordingly and by a quarter
                attack[2] = ( board_controller.attackvalue * info.spelldirection[board_controller.spelltracker] ) / 4;
                    
               //display hit message
               textbox(x, y, string((board_controller.attackvalue * info.spelldirection[board_controller.spelltracker])/4), c_fuchsia, c_white);
               /*
               board_tbg.targetx = x;
               board_tbg.targety = y;
               board_tbg.value = string((board_controller.attackvalue * info.spelldirection[board_controller.spelltracker])/4);
               board_tbg.frontcolor = c_fuchsia;
               board_tbg.backcolor = c_white;
               board_tbg.display = 1;
               */
        
           }
                
            //boundary checking
                //if curing would heal the character past its maximum attack
            if( attack[1]+attack[2] &gt; board_controller.attack_cap )
            {
                //cap attack off at maximum
                attack[2] = board_controller.attack_cap - attack[1];
            }
            //else if less than 0, cap at 0
            else if( attack[1]+attack[2] &lt; 0 )
            {
                attack[2] = attack[1]*(-1);
            }
                
        }
        //if targetting defense
        else if( info.spelltarget[board_controller.spelltracker] == 7 )
        {
            //if 0 or more damage is being inflicted
            if( board_controller.attackvalue &gt; 0 )
            {
                //alter defense accordingly and by a quarter
                defense[2] = ( board_controller.attackvalue * info.spelldirection[board_controller.spelltracker] ) / 4;
                    
                //display hit message
                textbox(x, y, string((board_controller.attackvalue * info.spelldirection[board_controller.spelltracker])/4), c_fuchsia, c_white);
                /*
                board_tbg.targetx = x;
                board_tbg.targety = y;
                board_tbg.value = string((board_controller.attackvalue * info.spelldirection[board_controller.spelltracker])/4);
                board_tbg.frontcolor = c_fuchsia;
                board_tbg.backcolor = c_white;
                board_tbg.display = 1;
                */
        
            }
                
            //boundary checking
                //if curing would heal the character past its maximum defense
            if( defense[1]+defense[2] &gt; board_controller.defense_cap )
            {
                //cap defense off at maximum
                defense[2] = board_controller.defense_cap - defense[1];
            }
            //else if less than 0, cap at 0
            else if( defense[1]+defense[2] &lt; 0 )
            {
                defense[2] = defense[1]*(-1);
            }
        }
        //if targetting magicpower
        else if( info.spelltarget[board_controller.spelltracker] == 8 )
        {
            //if 0 or more damage is being inflicted
            if( board_controller.attackvalue &gt; 0 )
            {
                //alter magicpower accordingly and by a quarter
                magicpower[2] = ( board_controller.attackvalue * info.spelldirection[board_controller.spelltracker] ) / 4;
                    
                //display hit message
                textbox(x, y, string((board_controller.attackvalue * info.spelldirection[board_controller.spelltracker])/4), c_fuchsia, c_white);
                /*
                board_tbg.targetx = x;
                board_tbg.targety = y;
                board_tbg.value = string((board_controller.attackvalue * info.spelldirection[board_controller.spelltracker])/4);
                board_tbg.frontcolor = c_fuchsia;
                board_tbg.backcolor = c_white;
                board_tbg.display = 1;
                */
        
            }
                
            //boundary checking
                //if curing would heal the character past its maximum magicpower
            if( magicpower[1]+magicpower[2] &gt; board_controller.magicpower_cap )
            {
                //cap magicpower off at maximum
                magicpower[2] = board_controller.magicpower_cap - magicpower[1];
            }
            //else if less than 0, cap at 0
            else if( magicpower[1]+magicpower[2] &lt; 0 )
            {
                magicpower[2] = magicpower[1]*(-1);
            }
                
        }
        //if targetting magicdefense
        else if( info.spelltarget[board_controller.spelltracker] == 9 )
        {
            //if 0 or more damage is being inflicted
            if( board_controller.attackvalue &gt; 0 )
            {
                //alter magicdefense accordingly and by a quarter
                magicdefense[2] = ( board_controller.attackvalue * info.spelldirection[board_controller.spelltracker] ) / 4;
                    
                //display hit message
                textbox(x, y, string((board_controller.attackvalue * info.spelldirection[board_controller.spelltracker])/4), c_fuchsia, c_white);
                /*
                board_tbg.targetx = x;
                board_tbg.targety = y;
                board_tbg.value = string((board_controller.attackvalue * info.spelldirection[board_controller.spelltracker])/4);
                board_tbg.frontcolor = c_fuchsia;
                board_tbg.backcolor = c_white;
                board_tbg.display = 1;
                */
        
            }
                
            //boundary checking
                //if curing would heal the character past its maximum magicdefense
            if( magicdefense[1]+magicdefense[2] &gt; board_controller.magicdefense_cap )
            {
                //cap magicdefense off at maximum
                magicdefense[2] = board_controller.magicdefense_cap - magicdefense[1];
            }
            //else if less than 0, cap at 0
            else if( magicdefense[1]+magicdefense[2] &lt; 0 )
            {
                magicdefense[2] = magicdefense[1]*(-1);
            }
                
        }
        //if targetting movement
        else if( info.spelltarget[board_controller.spelltracker] == 10 )
        {
            //if 0 or more damage is being inflicted
            if( board_controller.attackvalue &gt; 0 )
            {
                //alter movement accordingly
                movement[2] = ( board_controller.attackvalue * info.spelldirection[board_controller.spelltracker] ) / 4;
                    
                //display hit message
                textbox(x, y, string((board_controller.attackvalue * info.spelldirection[board_controller.spelltracker])/4), c_fuchsia, c_white);
                /*
                board_tbg.targetx = x;
                board_tbg.targety = y;
                board_tbg.value = string((board_controller.attackvalue * info.spelldirection[board_controller.spelltracker])/4);
                board_tbg.frontcolor = c_fuchsia;
                board_tbg.backcolor = c_white;
                board_tbg.display = 1;
                */
        
            }
                
            //boundary checking
                //if curing would heal the character past its maximum movement
            if( movement[1]+movement[2] &gt; board_controller.movement_cap )
            {
                //cap movement off at maximum
                movement[2] = board_controller.movement_cap - movement[1];
            }
            //else if less than 0, cap at 0
            else if( movement[1]+movement[2] &lt; 0 )
            {
                movement[2] = movement[1]*(-1);
            }
                
        }
        //if targetting range
        else if( info.spelltarget[board_controller.spelltracker] == 11 )
        {
            //if 0 or more damage is being inflicted
            if( board_controller.attackvalue &gt; 0 )
            {
                //alter range accordingly
                range[2] = ( board_controller.attackvalue * info.spelldirection[board_controller.spelltracker] ) / 4;
                    
                //display hit message
                textbox(x, y, string((board_controller.attackvalue * info.spelldirection[board_controller.spelltracker])/4), c_fuchsia, c_white);
                /*
                board_tbg.targetx = x;
                board_tbg.targety = y;
                board_tbg.value = string((board_controller.attackvalue * info.spelldirection[board_controller.spelltracker])/4);
                board_tbg.frontcolor = c_fuchsia;
                board_tbg.backcolor = c_white;
                board_tbg.display = 1;
                */
        
            }
                
            //boundary checking
                //if curing would heal the character past its maximum range
            if( range[1]+range[2] &gt; board_controller.range_cap )
            {
                //cap range off at maximum
                range[2] = board_controller.range_cap - range[1];
            }
            //else if less than 0, cap at 0
            else if( range[1]+range[2] &lt; 0 )
            {
                range[2] = range[1]*(-1);
            }
                
        }
        //if targetting life status
        else if( info.spelltarget[board_controller.spelltracker] == 12 )
        {
            //if spell is removing auto-resurrection
            if( board_controller.attackvalue == -1 &amp;&amp; deadflag &gt; 1 )
            {
                //alter deadflag accordingly
                    //auto-res to alive
                deadflag = deadflag - 1;
                
                //display hit message
                textbox(x, y, 'Mortal', c_dkgray, c_white);
                /*
                board_tbg.targetx = x;
                board_tbg.targety = y;
                board_tbg.value = 'Mortal';
                board_tbg.frontcolor = c_dkgray;
                board_tbg.backcolor = c_white;
                board_tbg.display = 1;
                */
            
            }
            //if spell is adding auto-resurrection
            else if( board_controller.attackvalue == 1 &amp;&amp; deadflag &gt; 0 )
            {
                //alter deadflag accordingly
                    //alive to auto-res
                deadflag = deadflag + 1;
                
                //display hit message
                textbox(x, y, 'Immortal', c_dkgray, c_white);
                /*
                board_tbg.targetx = x;
                board_tbg.targety = y;
                board_tbg.value = 'Immortal';
                board_tbg.frontcolor = c_dkgray;
                board_tbg.backcolor = c_white;
                board_tbg.display = 1;
                */

            }
            //if spell is killing target
            else if( board_controller.attackvalue == -1 &amp;&amp; deadflag == 1 )
            {
                //alter deadflag accordingly
                    //alive to dead
                deadflag = 0;
                hp = 0;
                
                //display hit message
                textbox(x, y, 'Death', c_dkgray, c_white);
                /*
                board_tbg.targetx = x;
                board_tbg.targety = y;
                board_tbg.value = 'Death';
                board_tbg.frontcolor = c_dkgray;
                board_tbg.backcolor = c_white;
                board_tbg.display = 1;
                */

            }
            //if spell is ressurecting the target
            else if( board_controller.attackvalue == 1 &amp;&amp; deadflag == 0 )
            {
                //alter deadflag accordingly
                    //dead to alive
                deadflag = 1;
            
                //reset statistics
                hpmax[2] = 0;
                mpmax[2] = 0;
                tpmax[2] = 0;
                    
                hp = hpmax[1]/4;
                    
                //reset statistics
                accuracy[2] = 0;
                evasion[2] = 0;
                attack[2] = 0;
                defense[2] = 0;
                magicpower[2] = 0;
                magicdefense[2] = 0;
                range[2] = 0;
                movement[2] = 0;
                    
                //load bonuses based on equipped weapons
            
                hpmax[2] =          info.weaponbonus[rhand, 01] + info.weaponbonus[lhand, 01] + info.helmbonus[helm, 01] + info.armorbonus[armor, 01] + info.bootsbonus[boots, 01];
                mpmax[2] =          info.weaponbonus[rhand, 02] + info.weaponbonus[lhand, 02] + info.helmbonus[helm, 02] + info.armorbonus[armor, 02] + info.bootsbonus[boots, 02];
                tpmax[2] =          info.weaponbonus[rhand, 03] + info.weaponbonus[lhand, 03] + info.helmbonus[helm, 03] + info.armorbonus[armor, 03] + info.bootsbonus[boots, 03];
                accuracy[2] =       info.weaponbonus[rhand, 04] + info.weaponbonus[lhand, 04] + info.helmbonus[helm, 04] + info.armorbonus[armor, 04] + info.bootsbonus[boots, 04];
                evasion[2] =        info.weaponbonus[rhand, 05] + info.weaponbonus[lhand, 05] + info.helmbonus[helm, 05] + info.armorbonus[armor, 05] + info.bootsbonus[boots, 05];
                attack[2] =         info.weaponbonus[rhand, 06] + info.weaponbonus[lhand, 06] + info.helmbonus[helm, 06] + info.armorbonus[armor, 06] + info.bootsbonus[boots, 06];
                defense[2] =        info.weaponbonus[rhand, 07] + info.weaponbonus[lhand, 07] + info.helmbonus[helm, 07] + info.armorbonus[armor, 07] + info.bootsbonus[boots, 07];
                magicpower[2] =     info.weaponbonus[rhand, 08] + info.weaponbonus[lhand, 08] + info.helmbonus[helm, 08] + info.armorbonus[armor, 08] + info.bootsbonus[boots, 08];
                magicdefense[2] =   info.weaponbonus[rhand, 09] + info.weaponbonus[lhand, 09] + info.helmbonus[helm, 09] + info.armorbonus[armor, 09] + info.bootsbonus[boots, 09];
                range[2] =          info.weaponbonus[rhand, 10] + info.weaponbonus[lhand, 10] + info.helmbonus[helm, 10] + info.armorbonus[armor, 10] + info.bootsbonus[boots, 10];
                movement[2] =       info.weaponbonus[rhand, 11] + info.weaponbonus[lhand, 11] + info.helmbonus[helm, 11] + info.armorbonus[armor, 11] + info.bootsbonus[boots, 11];
                //deadflag =          info.weaponbonus[rhand, 12] + info.weaponbonus[lhand, 12] + info.helmbonus[helm, 12] + info.armorbonus[armor, 12] + info.bootsbonus[boots, 12] + deadflag;
            
                //display hit message
                textbox(x, y, 'Life', c_dkgray, c_white);
                /*
                board_tbg.targetx = x;
                board_tbg.targety = y;
                board_tbg.value = 'Life';
                board_tbg.frontcolor = c_dkgray;
                board_tbg.backcolor = c_white;
                board_tbg.display = 1;
                */

            
            }

         }
         }
        else
        {
            //record a miss with a value of 0
            board_controller.attackvalue = 0;
                
            //display miss message
            textbox(x, y, 'MISS!', c_black, c_white);
            /*
            board_tbg.targetx = x;
            board_tbg.targety = y;
            board_tbg.value = 'MISS!';
            board_tbg.frontcolor = c_black;
            board_tbg.backcolor = c_white;
            board_tbg.display = 1;
            */
        }   

            //clear attackvalue
            //board_controller.attackvalue = 0;
             
            //destroy target
            //board_target.destroy = 1;
                    
            //remove focus
            board_controller.magicfocus = 0;
            
            //return focus to the board
            board_controller.boardfocus = 1;
                   
            //reset movetracker
            board_controller.movetracker = 0;
            //board_controller.spelltracker = 0;
        

             
            //boundary checking   
                //determine if character has died
            if( hp &lt; 1 )
            {
                //dead
                deadflag = 0;
                
                //reset modifiers
                maxhp[2] = 0;
                maxmp[2] = 0;
                maxtp[2] = 0;
                accuracy[2] = 0;
                evasion[2] = 0;
                attack[2] = 0;
                defense[2] = 0;
                magicpower[2] = 0;
                magicdefense[2] = 0;
                movement[2] = 0;
                range[2] = 0;


                
                //if dead player was complete and on current player's team
                if( completeflag == 1 &amp;&amp; board_controller.player == player)
                {
                    //rollback completed players
                    board_controller.playertracker[player] = board_controller.playertracker[player] - 1;
                }
                
                //reduce number of players on the respective team
                board_controller.playerlimit[player] = board_controller.playerlimit[player] - 1;
                
                //determine if entire team has died
                if( board_controller.playerlimit[player] == 0 )
                {
                    //declare opposite team a winner
                    if( player == 1 )
                    {
                        //declare player 2 a winner
                        show_message('Player 2 wins!');
                    }
                    else if( player == 2 )
                    {
                        //declare player 1 a winner
                        show_message('Player 1 wins!');
                    }
                }
            }
            
            //trip magic completion
            board_controller.magiccomplete = 1; 
            
            //board_controller.spelltracker = 0;
            

    }
    //if the focus is item AND targeted AND item is loaded
    else if ( board_controller.itemfocus == 1 &amp;&amp; x == board_target.x &amp;&amp; y == board_target.y &amp;&amp; board_controller.itemtracker != 0)
    {
        //perform item use
        //determine target attribute and direction
            //item information is already loaded and does not change based on character attributes
        //board_controller.attackvalue = board_controller.attackvalue;
 
            
        if( floor(random(board_controller.item_base)) &lt;= info.itemhit[board_controller.itemtracker]  )
        {
            //perform item use
                //determine value AND item direction
            board_controller.attackvalue = board_controller.attackvalue * info.itemdirection[board_controller.itemtracker];
        


            
            
            
        //determine target attribute
            //if targetting HP
        if( info.itemtarget[board_controller.itemtracker] == 1 )
        {
            //if 0 or more damage is being inflicted
            if( board_controller.attackvalue &gt; 0 )
            {
                //alter hp accordingly
                hp = hp + ( board_controller.attackvalue * info.itemdirection[board_controller.itemtracker] );
                    
                //display hit message
                textbox(x, y, string((board_controller.attackvalue * info.itemdirection[board_controller.itemtracker])), c_red, c_white);
                /*
                board_tbg.targetx = x;
                board_tbg.targety = y;
                board_tbg.value = string( board_controller.attackvalue * info.itemdirection[board_controller.itemtracker] );
                board_tbg.frontcolor = c_red;
                board_tbg.backcolor = c_white;
                board_tbg.display = 1;
                */
        
            }
                
            //boundary checking
                //if curing would heal the character past its maximum HP
            if( hp &gt; (maxhp[1]+maxhp[2]) )
            {
                //cap hp off at maximum
                hp = (maxhp[1]+maxhp[2]);
            }
            //else if less than 0, cap at 0
            else if( hp &lt; 0 )
            {
                hp = 0;
            }
        }
        //if targetting MP
        else if( info.itemtarget[board_controller.itemtracker] == 2 )
        {
            //if 0 or more damage is being inflicted
            if( board_controller.attackvalue &gt; 0 )
            {
                //alter mp accordingly and by half
                mp = ( board_controller.attackvalue * info.itemdirection[board_controller.itemtracker] ) / 2;
                     
                //display hit message
                textbox(x, y, string((board_controller.attackvalue * info.itemdirection[board_controller.itemtracker])/2), c_orange, c_white);
                /*
                board_tbg.targetx = x;
                board_tbg.targety = y;
                board_tbg.value = string(( board_controller.attackvalue * info.itemdirection[board_controller.itemtracker] ) / 2)
                board_tbg.frontcolor = c_orange;
                board_tbg.backcolor = c_white;
                board_tbg.display = 1;
                */
            }
                
            //boundary checking
                //if curing would heal the character past its maximum MP
            if( mp &gt; (maxmp[1]+maxmp[2]) )
            {
                //cap mp off at maximum
                mp = (maxmp[1]+maxmp[2]);
            }
            //else if less than 0, cap at 0
            else if( mp &lt; 0 )
            {
                mp = 0;
            }
        }
        //if targetting TP
        else if( info.itemtarget[board_controller.itemtracker] == 3 )
        {
            //if 0 or more damage is being inflicted
            if( board_controller.attackvalue &gt; 0 )
            {
                //alter hp accordingly and by half
                tp = ( board_controller.attackvalue * info.itemdirection[board_controller.itemtracker] ) / 2;
                    
                //display hit message
                textbox(x, y, string((board_controller.attackvalue * info.itemdirection[board_controller.itemtracker])/2), c_yellow, c_white);
                /*
                board_tbg.targetx = x;
                board_tbg.targety = y;
                board_tbg.value = string(( board_controller.attackvalue * info.itemdirection[board_controller.itemtracker] ) / 2)
                board_tbg.frontcolor = c_yellow;
                board_tbg.backcolor = c_white;
                board_tbg.display = 1;
                */

            }
                
            //boundary checking
                //if curing would heal the character past its maximum TP
            if( tp &gt; (maxtp[1]+maxtp[2]) )
            {
                //cap tp off at maximum
                tp = (maxtp[1]+maxtp[2]);
            }
            //else if less than 0, cap at 0
            else if( tp &lt; 0 )
            {
                tp = 0;
            }
        }
        //if targetting accuracy
        else if( info.itemtarget[board_controller.itemtracker] == 4 )
        {
            //if 0 or more damage is being inflicted
            if( board_controller.attackvalue &gt; 0 )
            {
                //alter accuracy accordingly and by a quarter
                accuracy[2] = ( board_controller.attackvalue * info.itemdirection[board_controller.itemtracker] ) / 4;
                    
                //display hit message
                textbox(x, y, string((board_controller.attackvalue * info.itemdirection[board_controller.itemtracker])/4), c_fuchsia, c_white);
                /*
                board_tbg.targetx = x;
                board_tbg.targety = y;
                board_tbg.value = string(( board_controller.attackvalue * info.itemdirection[board_controller.itemtracker] ) / 4)
                board_tbg.frontcolor = c_fuchsia;
                board_tbg.backcolor = c_white;
                board_tbg.display = 1;
                */
        
            }
                
            //boundary checking
                //if curing would heal the character past its maximum attack
            if( accuracy[1]+accuracy[2] &gt; board_controller.attack_cap )
            {
                //cap attack off at maximum
                accuracy[2] = board_controller.accuracy_cap - accuracy[1];
            }
            //else if less than 0, cap at 0
            else if( accuract[1]+accuracy[2] &lt; 0 )
            {
                accuracy[2] = accuracy[1]*(-1);
            }
                
        }
        //if targetting evasion
        else if( info.itemtarget[board_controller.itemtracker] == 5 )
        {
            //if 0 or more damage is being inflicted
            if( board_controller.attackvalue &gt; 0 )
            {
                //alter defense accordingly and by a quarter
                evasion[2] = ( board_controller.attackvalue * info.itemdirection[board_controller.itemtracker] ) / 4;
                    
                //display hit message
                textbox(x, y, string((board_controller.attackvalue * info.itemdirection[board_controller.itemtracker])/4), c_fuchsia, c_white);
                /*
                board_tbg.targetx = x;
                board_tbg.targety = y;
                board_tbg.value = string(( board_controller.attackvalue * info.itemdirection[board_controller.itemtracker] ) / 4)
                board_tbg.frontcolor = c_fuchsia;
                board_tbg.backcolor = c_white;
                board_tbg.display = 1;
                */

            }
                
            //boundary checking
                //if curing would heal the character past its maximum evasion
            if( evasion[1]+evasion[2] &gt; board_controller.evasion_cap )
            {
                //cap defense off at maximum
                evasion[2] = board_controller.evasion_cap - evasion[1];
            }
            //else if less than 0, cap at 0
            else if( evasion[1]+evasion[2] &lt; 0 )
            {
                evasion[2] = evasion[1]*(-1);
            }
                
        }
        //if targetting attack
        else if( info.itemtarget[board_controller.itemtracker] == 6 )
        {
            //if 0 or more damage is being inflicted
            if( board_controller.attackvalue &gt; 0 )
            {
                //alter attack accordingly and by a quarter
                attack[2] = ( board_controller.attackvalue * info.itemdirection[board_controller.itemtracker] ) / 4;
                    
                //display hit message
                textbox(x, y, string((board_controller.attackvalue * info.itemdirection[board_controller.itemtracker])/4), c_fuchsia, c_white);
                /*
                board_tbg.targetx = x;
                board_tbg.targety = y;
                board_tbg.value = string(( board_controller.attackvalue * info.itemdirection[board_controller.itemtracker] ) / 4)
                board_tbg.frontcolor = c_fuchsia;
                board_tbg.backcolor = c_white;
                board_tbg.display = 1;
                */

            }
                
            //boundary checking
                //if curing would heal the character past its maximum attack
            if( attack[1]+attack[2] &gt; board_controller.attack_cap )
            {
                //cap attack off at maximum
                attack[2] = board_controller.attack_cap - attack[1];
            }
            //else if less than 0, cap at 0
            else if( attack[1]+attack[2] &lt; 0 )
            {
                attack[2] = attack[1]*(-1);
            }
        }

        //if targetting defense
        else if( info.itemtarget[board_controller.itemtracker] == 7)
        {
            //if 0 or more damage is being inflicted
            if( board_controller.attackvalue &gt; 0 )
            {
                //alter defense accordingly and by a quarter
                defense[2] = ( board_controller.attackvalue * info.itemdirection[board_controller.itemtracker] ) / 4;
                    
                //display hit message
                textbox(x, y, string((board_controller.attackvalue * info.itemdirection[board_controller.itemtracker])/4), c_fuchsia, c_white);
                /*
                board_tbg.targetx = x;
                board_tbg.targety = y;
                board_tbg.value = string(( board_controller.attackvalue * info.itemdirection[board_controller.itemtracker] ) / 4)
                board_tbg.frontcolor = c_fuchsia;
                board_tbg.backcolor = c_white;
                board_tbg.display = 1;
                */

            }
                
            //boundary checking
                //if curing would heal the character past its maximum defense
            if( defense[1]+defense[2] &gt; board_controller.defense_cap )
            {
                //cap defense off at maximum
                defense[2] = board_controller.defense_cap - defense[1];
            }
            //else if less than 0, cap at 0
            else if( defense[1]+defense[2] &lt; 0 )
            {
                defense[2] = defense[1]*(-1);
            }
        }
        //if targetting magicpower
        else if( info.itemtarget[board_controller.itemtracker] == 8 )
        {
            //if 0 or more damage is being inflicted
            if( board_controller.attackvalue &gt; 0 )
            {
                //alter attack accordingly and by a quarter
                magicpower[2] = ( board_controller.attackvalue * info.itemdirection[board_controller.itemtracker] ) / 4;
                    
                //display hit message
                textbox(x, y, string((board_controller.attackvalue * info.itemdirection[board_controller.itemtracker])/4), c_fuchsia, c_white);
                /*
                board_tbg.targetx = x;
                board_tbg.targety = y;
                board_tbg.value = string(( board_controller.attackvalue * info.itemdirection[board_controller.itemtracker] ) / 4)
                board_tbg.frontcolor = c_fuchsia;
                board_tbg.backcolor = c_white;
                board_tbg.display = 1;
                */

            }
                
            //boundary checking
                //if curing would heal the character past its maximum magicpower
            if( magicpower[1]+magicpower[2] &gt; board_controller.magicpower_cap )
            {
                //cap magicpower off at maximum
                magicpower[2] = board_controller.magicpower_cap - magicpower[1];
            }
            //else if less than 0, cap at 0
            else if( magicpower[1]+magicpower[2] &lt; 0 )
            {
                magicpower[2] = magicpower[1]*(-1);
            }
        }
        //if targetting magicdefense
        else if( info.itemtarget[board_controller.itemtracker] == 9 )
        {
            //if 0 or more damage is being inflicted
            if( board_controller.attackvalue &gt; 0 )
            {
                //alter attack accordingly and by a quarter
                magicdefense[2] = ( board_controller.attackvalue * info.itemdirection[board_controller.itemtracker] ) / 4;
                    
                //display hit message
                textbox(x, y, string((board_controller.attackvalue * info.itemdirection[board_controller.itemtracker])/4), c_fuchsia, c_white);
                /*
                board_tbg.targetx = x;
                board_tbg.targety = y;
                board_tbg.value = string(( board_controller.attackvalue * info.itemdirection[board_controller.itemtracker] ) / 4)
                board_tbg.frontcolor = c_fuchsia;
                board_tbg.backcolor = c_white;
                board_tbg.display = 1;
                */

            }
                
            //boundary checking
                //if curing would heal the character past its maximum magicdefense
            if( magicdefense[1]+magicdefense[2] &gt; board_controller.magicdefense_cap )
            {
                //cap magicdefense off at maximum
                magicdefense[2] = board_controller.magicdefense_cap - magicdefense[1];
            }
            //else if less than 0, cap at 0
            else if( magicdefense[1]+magicdefense[2] &lt; 0 )
            {
                magicdefense[2] = magicdefense[1]*(-1);
            }
        }
        //if targetting movement
        else if( info.itemtarget[board_controller.itemtracker] == 10 )
        {
            //if 0 or more damage is being inflicted
            if( board_controller.attackvalue &gt; 0 )
            {
                //alter attack accordingly and by a quarter
                movement[2] = ( board_controller.attackvalue * info.itemdirection[board_controller.itemtracker] ) / 4;
                    
                //display hit message
                textbox(x, y, string((board_controller.attackvalue * info.itemdirection[board_controller.itemtracker])/4), c_fuchsia, c_white);
                /*
                board_tbg.targetx = x;
                board_tbg.targety = y;
                board_tbg.value = string(( board_controller.attackvalue * info.itemdirection[board_controller.itemtracker] ) / 4)
                board_tbg.frontcolor = c_fuchsia;
                board_tbg.backcolor = c_white;
                board_tbg.display = 1;
                */

            }
                
            //boundary checking
                //if curing would heal the character past its maximum movement
            if( movement[1]+movement[2] &gt; board_controller.movement_cap )
            {
                //cap movement off at maximum
                movement[2] = board_controller.movement_cap - movement[1];
            }
            //else if less than 0, cap at 0
            else if( movement[1]+movement[2] &lt; 0 )
            {
                movement[2] = movement[1]*(-1);
            }
        }
        //if targetting range
        else if( info.itemtarget[board_controller.itemtracker] == 11 )
        {
            //if 0 or more damage is being inflicted
            if( board_controller.attackvalue &gt; 0 )
            {
                //alter attack accordingly and by a quarter
                range[2] = ( board_controller.attackvalue * info.itemdirection[board_controller.itemtracker] ) / 4;
                    
                //display hit message
                textbox(x, y, string((board_controller.attackvalue * info.itemdirection[board_controller.itemtracker])/4), c_fuchsia, c_white);
                /*
                board_tbg.targetx = x;
                board_tbg.targety = y;
                board_tbg.value = string(( board_controller.attackvalue * info.itemdirection[board_controller.itemtracker] ) / 4)
                board_tbg.frontcolor = c_fuchsia;
                board_tbg.backcolor = c_white;
                board_tbg.display = 1;
                */

            }
                
            //boundary checking
                //if curing would heal the character past its maximum range
            if( range[1]+range[2] &gt; board_controller.range_cap )
            {
                //cap range off at maximum
                range[2] = board_controller.range_cap - range[1];
            }
            //else if less than 0, cap at 0
            else if( range[1]+range[2] &lt; 0 )
            {
                range[2] = range[1]*(-1);
            }
        }
        //if item is targetting life status
        else if( info.techniquetarget[board_controller.techniquetracker] == 12 )
        {
            //if technique is removing auto-resurrection
            if( board_controller.attackvalue == -1 &amp;&amp; deadflag &gt; 1 )
            {
                //alter deadflag accordingly
                    //auto-res to alive
                deadflag = deadflag - 1;
                
                //display hit message
                textbox(x, y, 'Mortal', c_dkgray, c_white);
                /*
                board_tbg.targetx = x;
                board_tbg.targety = y;
                board_tbg.value = 'Mortal';
                board_tbg.frontcolor = c_dkgray;
                board_tbg.backcolor = c_white;
                board_tbg.display = 1;
                */
        
            }
            //if technique is adding auto-resurrection
            if( board_controller.attackvalue == 1 &amp;&amp; deadflag &gt; 0 )
            {
                //alter deadflag accordingly
                    //alive to auto-res
                deadflag = deadflag + 1;
                
                //display hit message
                textbox(x, y, 'Immortal', c_dkgray, c_white);
                /*
                board_tbg.targetx = x;
                board_tbg.targety = y;
                board_tbg.value = 'Immortal';
                board_tbg.frontcolor = c_dkgray;
                board_tbg.backcolor = c_white;
                board_tbg.display = 1;
                */
            }
            //if technique is killing target
            if( board_controller.attackvalue == -1 &amp;&amp; deadflag == 1 )
            {
                //alter deadflag accordingly
                    //alive to dead
                deadflag = 0;
                hp = 0;
                
                //display hit message
                textbox(x, y, 'Death', c_dkgray, c_white);
                /*
                board_tbg.targetx = x;
                board_tbg.targety = y;
                board_tbg.value = 'Death';
                board_tbg.frontcolor = c_dkgray;
                board_tbg.backcolor = c_white;
                board_tbg.display = 1;
                */
            }
            //if technique is ressurecting the target
            else if( board_controller.attackvalue == 1 &amp;&amp; deadflag == 0 )
            {
                //alter deadflag accordingly
                    //dead to alive
                deadflag = 1;
                
                //reset statistics
                    hpmax[2] = 0;
                    mpmax[2] = 0;
                    tpmax[2] = 0;
                    
                    hp = hpmax[1]/4;
                    
                //reset statistics
                accuracy[2] = 0;
                evasion[2] = 0;
                attack[2] = 0;
                defense[2] = 0;
                magicpower[2] = 0;
                magicdefense[2] = 0;
                range[2] = 0;
                movement[2] = 0;
                    
                //load bonuses based on equipped weapons
                
                hpmax[2] =          info.weaponbonus[rhand, 01] + info.weaponbonus[lhand, 01] + info.helmbonus[helm, 01] + info.armorbonus[armor, 01] + info.bootsbonus[boots, 01];
                mpmax[2] =          info.weaponbonus[rhand, 02] + info.weaponbonus[lhand, 02] + info.helmbonus[helm, 02] + info.armorbonus[armor, 02] + info.bootsbonus[boots, 02];
                tpmax[2] =          info.weaponbonus[rhand, 03] + info.weaponbonus[lhand, 03] + info.helmbonus[helm, 03] + info.armorbonus[armor, 03] + info.bootsbonus[boots, 03];
                accuracy[2] =       info.weaponbonus[rhand, 04] + info.weaponbonus[lhand, 04] + info.helmbonus[helm, 04] + info.armorbonus[armor, 04] + info.bootsbonus[boots, 04];
                evasion[2] =        info.weaponbonus[rhand, 05] + info.weaponbonus[lhand, 05] + info.helmbonus[helm, 05] + info.armorbonus[armor, 05] + info.bootsbonus[boots, 05];
                attack[2] =         info.weaponbonus[rhand, 06] + info.weaponbonus[lhand, 06] + info.helmbonus[helm, 06] + info.armorbonus[armor, 06] + info.bootsbonus[boots, 06];
                defense[2] =        info.weaponbonus[rhand, 07] + info.weaponbonus[lhand, 07] + info.helmbonus[helm, 07] + info.armorbonus[armor, 07] + info.bootsbonus[boots, 07];
                magicpower[2] =     info.weaponbonus[rhand, 08] + info.weaponbonus[lhand, 08] + info.helmbonus[helm, 08] + info.armorbonus[armor, 08] + info.bootsbonus[boots, 08];
                magicdefense[2] =   info.weaponbonus[rhand, 09] + info.weaponbonus[lhand, 09] + info.helmbonus[helm, 09] + info.armorbonus[armor, 09] + info.bootsbonus[boots, 09];
                range[2] =          info.weaponbonus[rhand, 10] + info.weaponbonus[lhand, 10] + info.helmbonus[helm, 10] + info.armorbonus[armor, 10] + info.bootsbonus[boots, 10];
                movement[2] =       info.weaponbonus[rhand, 11] + info.weaponbonus[lhand, 11] + info.helmbonus[helm, 11] + info.armorbonus[armor, 11] + info.bootsbonus[boots, 11];
                //deadflag =          info.weaponbonus[rhand, 12] + info.weaponbonus[lhand, 12] + info.helmbonus[helm, 12] + info.armorbonus[armor, 12] + info.bootsbonus[boots, 12] + deadflag;
                
                //boundary checking
                    //if ressurecting would bring the character past its maximum range
                if( deadflag &gt; board_controller.dead_cap )
                {
                    //cap range off at maximum
                    deadflag = board_controller.dead_cap;
                }
                //else if less than 0, cap at 0
                else if( deadflag &lt; 0 )
                {
                    deadflag = 0;
                }
                
                //display hit message
                textbox(x, y, 'Life', c_dkgray, c_white);
                /*
                board_tbg.targetx = x;
                board_tbg.targety = y;
                board_tbg.value = 'Life';
                board_tbg.frontcolor = c_dkgray;
                board_tbg.backcolor = c_white;
                board_tbg.display = 1;
                */

            }
                
                
        }


        }
        else
        {
            //record a miss with a value of 0
            board_controller.attackvalue = 0;
                
            //display miss message
            textbox(x, y, 'MISS!', c_black, c_white);
            /*
            board_tbg.targetx = x;
            board_tbg.targety = y;
            board_tbg.value = 'MISS!';
            board_tbg.frontcolor = c_black;
            board_tbg.backcolor = c_white;
            board_tbg.display = 1;
            */
        }
        //clear attackvalue
        //board_controller.attackvalue = 0;
             
        //destroy target
        //board_target.destroy = 1;
                    
        //remove focus
        board_controller.itemfocus = 0;
            
        //return focus to the board
        board_controller.boardfocus = 1;
                   
        //reset movetracker
        board_controller.movetracker = 0;
        //board_controller.itemtracker = 0;
             
        //boundary checking   
            //determine if character has died
        if( hp &lt; 1 )
        {
            //dead
            deadflag = 0;
                
            //reset modifiers
            maxhp[2] = 0;
            maxmp[2] = 0;
            maxtp[2] = 0;
            accuracy[2] = 0;
            evasion[2] = 0;
            attack[2] = 0;
            defense[2] = 0;
            magicpower[2] = 0;
            magicdefense[2] = 0;
            movement[2] = 0;
            range[2] = 0;

            //if dead player was complete and on current player's team
            if( completeflag == 1 &amp;&amp; board_controller.player == player)
            {
                //rollback completed players
                board_controller.playertracker[player] = board_controller.playertracker[player] - 1;
            }
                
            //reduce number of players on the respective team
            board_controller.playerlimit[player] = board_controller.playerlimit[player] - 1;
                
            //determine if entire team has died
            if( board_controller.playerlimit[player] == 0 )
            {
                //declare opposite team a winner
                if( player == 1 )
                {
                    //declare player 2 a winner
                    show_message('Player 2 wins!');
                }
                else if( player == 2 )
                {
                    //declare player 1 a winner
                    show_message('Player 1 wins!');
                }
            }
        }
            
        //trip item completion
        board_controller.itemcomplete = 1; 
            
        //board_controller.itemtracker = 0;
            
    }
}</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
