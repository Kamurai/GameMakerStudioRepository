<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Goomba_0_Right</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_EnemyType</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>FaceRight = true; //true = left; false = right
relative_Ratio = 0.5; //relative movement speed to the obj_CharSquare

JumpFlag = false;
JumpRelease = false;

image_speed = 0;
image_index = 5;

CharDistance = 0;

EmotionState = 0;

FrameRate = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>CharDistance = distance_to_object(obj_CharType);

if(CharDistance &lt; 8196)
{
    if(obj_CharType.x &gt; x)
    {
        FaceRight = false;
        scr_SetGEnemySpriteIndex();
    }
    else
    {
        FaceRight = true;
        scr_SetGEnemySpriteIndex();
    }
}

if(FaceRight)
{
    hspeed = obj_CharType.BaseMove * relative_Ratio * (-1);
}    
else
{
    hspeed = obj_CharType.BaseMove * relative_Ratio;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>IsOnGround = scr_IsOnGround()

/*
if(keyboard_check(vk_left) == true &amp;&amp; hspeed &gt; BaseMove*(-1))
{
    hspeed = hspeed - BaseMove*MovePercentage;
}
if(keyboard_check(vk_right) == true &amp;&amp; hspeed &lt; BaseMove)
{
    hspeed = hspeed + BaseMove*MovePercentage;
}
*/

//if character is not on the ground
if( IsOnGround == false )
{
    /*
    if((keyboard_check(vk_up) == true) &amp;&amp; (JumpRelease == false))
    {
        if(CurrentJump &gt; 0)
        {
            vspeed = vspeed + CurrentJump*(-1) + obj_Controller.Gravity;
            CurrentJump = CurrentJump - 1;
        }
        else
        {
            JumpRelease = true;
        }
    }*/
    //else
    //{
    //    if( IsOnGround == false )
    //    {
    //        vspeed = vspeed + obj_Controller.Gravity;
    //    }
    //}
    vspeed = vspeed + obj_Controller.Gravity;

    if(JumpFlag == false)
    {
        JumpFlag = true;
    }
}
//else character is on the ground
else
{
    if(JumpRelease == true)
    {
        JumpRelease = false;
        //CurrentJump = BaseJump;
    }

    if(JumpFlag == true)
    {
        JumpFlag = false;
    }
    
    if(vspeed &gt; 0)
    {
        vspeed = 0;
    }
        
    if(hspeed &gt; 0)
    {
        hspeed = hspeed + obj_Controller.Friction*(-1);
        if(hspeed &lt; 0)
        {
            hspeed = 0;
        }
    }
    else if(hspeed &lt; 0)
    {
        hspeed = hspeed + obj_Controller.Friction;
        if(hspeed &gt; 0)
        {
            hspeed = 0;
        }
    }    
     // if(hspeed != 0)
    //{
        //hspeed = hspeed * obj_Controller.Friction;
      /*
        if(hspeed &gt; 0)
        {
            if(keyboard_check(vk_right) == false)
            {
                hspeed = hspeed * obj_Controller.Friction;
            }
        }
        else if(hspeed &lt; 0)
        {
            if(keyboard_check(vk_left) == false)
            {
                hspeed = hspeed * obj_Controller.Friction;
            }
        }
        */    
       
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//scr_SetStaticSpriteByEmotion();

if(EmotionState != obj_Controller.EmotionState)
{
    EmotionState = obj_Controller.EmotionState;

    scr_SetGEnemySpriteIndex();
}

if(hspeed &gt; 0)
{
    if(image_speed == 0)
    {
        image_speed = FrameRate;
    }
}
else if(hspeed &lt; 0)
{
    if(image_speed == 0)
    {
        image_speed = FrameRate;
    }
}

if(hspeed == 0)
{
    image_speed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if this object would collide with a block
if( place_meeting(x+hspeed, y+vspeed, obj_BlockType) == true &amp;&amp; place_meeting(x, y, obj_BlockType) == false)
{
    with(obj_BlockType)
    {
        //if this is the block that would be colliding
        if(place_meeting(x+(-1)*other.hspeed,y+(-1)*other.vspeed,other) == true)
        {
            //vertical jumping
            if(other.vspeed &gt; 0 &amp;&amp; other.hspeed == 0)
            {
                other.vspeed = other.y + other.vspeed + other.sprite_height - y;
            }
            else if(other.vspeed &lt; 0 &amp;&amp; other.hspeed == 0)
            {
                other.vspeed = y + sprite_height - other.y + other.vspeed;
            }
            else if(other.vspeed &gt; 0 &amp;&amp; (other.y + other.sprite_height) &lt; y)
            {
                other.vspeed = y - other.y - other.sprite_height-1;
                //other.vspeed = other.y + other.vspeed + other.sprite_height - y;
                //vspeed = 0;
            }
 /*           
            else if(other.vspeed &lt; 0 &amp;&amp; (y + sprite_height) &lt; other.y)
            {
                other.vspeed = other.y - y - sprite_height+1;
                //other.vspeed = y + sprite_height - other.y + other.vspeed;
                //vspeed = 0;
            }
        
        
        
            if(other.hspeed &gt; 0 &amp;&amp; (other.x + other.sprite_width &lt; x))
            {
                other.hspeed = x - other.x - other.sprite_width;
                //other.hspeed = other.x + other.sprite_width + other.hspeed - x;
                //other.hspeed = x - other.x + other.sprite_width;
                //hspeed = 0;
            }
            else if(other.hspeed &lt; 0 &amp;&amp; (x + sprite_width) &lt; other.x)
            {
                other.hspeed = other.x - x - sprite_width;
                //other.hspeed = x + sprite_width - (other.x + other.hspeed);
                //hspeed = 0;
            }
*/            
            
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if this object would collide with a wall
if( place_meeting(x+hspeed, y+vspeed, obj_WallType) == true &amp;&amp; place_meeting(x, y, obj_WallType) == false)
{
    with(obj_WallType)
    {
        //if this is the wall that would be colliding
        if(place_meeting(x+(-1)*other.hspeed,y+(-1)*other.vspeed,other) == true)
        {
            /*
            if(other.vspeed &gt; 0 &amp;&amp; other.hspeed == 0)
            {
                other.vspeed = other.y + other.vspeed + other.sprite_height - y;
            }
            else if(other.vspeed &lt; 0 &amp;&amp; other.hspeed == 0)
            {
                other.vspeed = y + sprite_height - other.y + other.vspeed;
            }
            else if(other.vspeed &gt; 0 &amp;&amp; (other.y + other.sprite_height) &lt; y)
            {
                other.vspeed = y - other.y - other.sprite_height-1;
                //other.vspeed = other.y + other.vspeed + other.sprite_height - y;
                //vspeed = 0;
            }
            */
            
            
            if(other.hspeed &gt; 0 &amp;&amp; vspeed == 0)
            {
                //other.hspeed = other.x + other.sprite_width + other.hspeed - x+1;
                other.hspeed = x - other.x - other.sprite_width;
                //hspeed = 0;
            }
            //else if(other.hspeed &lt; 0 &amp;&amp; x != other.x+hspeed &amp;&amp; x != other.x+other.sprite_width+hspeed) // &amp;&amp; (x + sprite_width) &gt; (other.x + other.hspeed))
            else if(other.hspeed &lt; 0 &amp;&amp; vspeed == 0)
            {
                //other.hspeed = x + sprite_width - (other.x + other.hspeed)-1;
                other.hspeed = (other.x - x - sprite_width)*(-1);
                //hspeed = 0;
            }
            else if(other.hspeed &gt; 0 &amp;&amp; (other.x + other.sprite_width + other.hspeed &gt; x) &amp;&amp; other.x + other.sprite_width &lt; x)
            {
                //other.hspeed = other.x + other.sprite_width + other.hspeed - x+1;
                other.hspeed = x - other.x - other.sprite_width;
                //hspeed = 0;
            }
            //else if(other.hspeed &lt; 0 &amp;&amp; x != other.x+hspeed &amp;&amp; x != other.x+other.sprite_width+hspeed) // &amp;&amp; (x + sprite_width) &gt; (other.x + other.hspeed))
            else if(other.hspeed &lt; 0 &amp;&amp; (x + sprite_width) &lt; (other.x + other.hspeed) &amp;&amp; other.x &gt; x + sprite_width)
            {
                //other.hspeed = x + sprite_width - (other.x + other.hspeed)-1;
                other.hspeed = (other.x - x - sprite_width)*(-1);
                //hspeed = 0;
            }
            
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>512,512</point>
  </PhysicsShapePoints>
</object>
