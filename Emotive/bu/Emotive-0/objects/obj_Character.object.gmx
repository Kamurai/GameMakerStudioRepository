<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Character_0_Right</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_CharType</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 0;

EmotionState = 0;

BaseMove = 64;
MovePercentage = 1.00;


BaseJump = 12;
CurrentJump = BaseJump;

JumpFlag = false;
JumpRelease = false;

Flipper = true;
PlaySound1 = false;
PlaySound2 = false;

tracker = 0;

FrameRate = 1;
FaceRight = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>211</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_sound</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>6</kind>
            <sound>snd_dying</sound>
          </argument>
          <argument>
            <kind>3</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>332</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_end_game</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if((x - view_wview[0]/2) &gt; 0 &amp;&amp; (x + view_wview[0]/2) &lt; room_width)
{
    view_xview[0] = x - view_wview[0]/2;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if( x &lt; 0 || y &gt; room_height)
{
    room_restart();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>IsOnGround = scr_IsOnGround()

//if character is not on the ground
if( IsOnGround == false )
{
    //if pushing left or right
    if(keyboard_check(vk_left) || keyboard_check(vk_right))
    {
        //if pushing left
        if(keyboard_check(vk_left) == true &amp;&amp; hspeed &gt; BaseMove*(-1))
        {
            //hspeed = hspeed - BaseMove*MovePercentage;
            hspeed = BaseMove*MovePercentage*(-1);
            FaceRight = false;
            //scr_SetSpriteIndex();
        }
        //if pushing right
        if(keyboard_check(vk_right) == true &amp;&amp; hspeed &lt; BaseMove)
        {
            //hspeed = hspeed + BaseMove*MovePercentage;
            hspeed = BaseMove*MovePercentage;
            FaceRight = true;
            //scr_SetSpriteIndex();
        }
    }
    else
    {
        hspeed = 0;
    }
    
    if((keyboard_check(vk_up) == true) &amp;&amp; (JumpRelease == false))
    {
        if(CurrentJump &gt; 0)
        {
            vspeed = vspeed + CurrentJump*(-1) + obj_Controller.Gravity;
            CurrentJump = CurrentJump - 1;
        }
        else
        {
            JumpRelease = true;
        }
    }
    //else
    //{
    //    if( IsOnGround == false )
    //    {
    //        vspeed = vspeed + obj_Controller.Gravity;
    //    }
    //}
    vspeed = vspeed + obj_Controller.Gravity;

    if(JumpFlag == false)
    {
        JumpFlag = true;
    }
}
//else character is on the ground
else
{
    if(JumpRelease == true)
    {
        JumpRelease = false;
        //CurrentJump = BaseJump;
    }

    if(JumpFlag == true)
    {
        JumpFlag = false;
    }
    
    if(vspeed &gt; 0)
    {
        vspeed = 0;
    }
    
    scr_SetSpriteIndex();

    //if pushing left or right
    if(keyboard_check(vk_left) || keyboard_check(vk_right))
    {
        //if pushing left
        if(keyboard_check(vk_left) == true &amp;&amp; hspeed &gt; BaseMove*(-1))
        {
            //hspeed = hspeed - BaseMove*MovePercentage;
            hspeed = BaseMove*MovePercentage*(-1);
            FaceRight = false;
            //scr_SetSpriteIndex();
        }
        //if pushing right
        if(keyboard_check(vk_right) == true &amp;&amp; hspeed &lt; BaseMove)
        {
            //hspeed = hspeed + BaseMove*MovePercentage;
            hspeed = BaseMove*MovePercentage;
            FaceRight = true;
            //scr_SetSpriteIndex();
        }
    }
    else
    {
        //if moving right
        if(hspeed &gt; 0)
        {
            //apply friction to the left
            hspeed = hspeed - obj_Controller.Friction;
            if(hspeed &lt; 0)
            {
                hspeed = 0;
            }
        }
        //if moving left
        else if(hspeed &lt; 0)
        {
            //apply friction to the right
            hspeed = hspeed + obj_Controller.Friction;
            if(hspeed &gt; 0)
            {
                hspeed = 0;
            }
        }
    }
      /*
    if(hspeed != 0)
    {
        hspeed = hspeed * obj_Controller.Friction;
       
        if(hspeed &gt; 0)
        {
            if(keyboard_check(vk_right) == false)
            {
                hspeed = hspeed * obj_Controller.Friction;
            }
        }
        else if(hspeed &lt; 0)
        {
            if(keyboard_check(vk_left) == false)
            {
                hspeed = hspeed * obj_Controller.Friction;
            }
        }
           
    }     */
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//scr_SetStaticSpriteByEmotion();

if(EmotionState != obj_Controller.EmotionState)
{
    EmotionState = obj_Controller.EmotionState;

    if(scr_IsOnGround)
    {
        scr_SetSpriteIndex();
    }
    else
    {
        scr_SetJumpSpriteIndex();
    }
}

if(hspeed &gt; 0)
{
    if(image_speed == 0)
    {
        image_speed = FrameRate;
    }
}
else if(hspeed &lt; 0)
{
    if(image_speed == 0)
    {
        image_speed = FrameRate;
    }
}

if(hspeed == 0)
{
    image_speed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if this object would collide with a block
if( place_meeting(x+hspeed, y+vspeed, obj_BlockType) == true &amp;&amp; place_meeting(x, y, obj_BlockType) == false)
{
    with(obj_BlockType)
    {
        //if this is the block that would be colliding
        if(place_meeting(x+(-1)*other.hspeed,y+(-1)*other.vspeed,other) == true)
        {
            //falling
            if(other.vspeed &gt; 0 &amp;&amp; other.hspeed == 0)
            {
                other.vspeed = other.y + other.vspeed + other.sprite_height - y;
            }
            //jumping straight up
            else if(other.vspeed &lt; 0 &amp;&amp; other.hspeed == 0)
            {
                //other.vspeed = y + sprite_height - other.y + other.vspeed;
            }
            else if(other.vspeed &gt; 0 &amp;&amp; (other.y + other.sprite_height) &lt; y)
            {
                other.vspeed = y - other.y - other.sprite_height-1;
                //other.vspeed = other.y + other.vspeed + other.sprite_height - y;
                //vspeed = 0;
            }
 /*           
            else if(other.vspeed &lt; 0 &amp;&amp; (y + sprite_height) &lt; other.y)
            {
                other.vspeed = other.y - y - sprite_height+1;
                //other.vspeed = y + sprite_height - other.y + other.vspeed;
                //vspeed = 0;
            }
        
        
        
            if(other.hspeed &gt; 0 &amp;&amp; (other.x + other.sprite_width &lt; x))
            {
                other.hspeed = x - other.x - other.sprite_width;
                //other.hspeed = other.x + other.sprite_width + other.hspeed - x;
                //other.hspeed = x - other.x + other.sprite_width;
                //hspeed = 0;
            }
            else if(other.hspeed &lt; 0 &amp;&amp; (x + sprite_width) &lt; other.x)
            {
                other.hspeed = other.x - x - sprite_width;
                //other.hspeed = x + sprite_width - (other.x + other.hspeed);
                //hspeed = 0;
            }
*/            
            
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if this object would collide with a wall
if( place_meeting(x+hspeed, y+vspeed, obj_WallType) == true &amp;&amp; place_meeting(x, y, obj_WallType) == false)
{
    with(obj_WallType)
    {
        //if this is the wall that would be colliding
        if(place_meeting(x+(-1)*other.hspeed,y+(-1)*other.vspeed,other) == true)
        {
            /*
            if(other.vspeed &gt; 0 &amp;&amp; other.hspeed == 0)
            {
                other.vspeed = other.y + other.vspeed + other.sprite_height - y;
            }
            else if(other.vspeed &lt; 0 &amp;&amp; other.hspeed == 0)
            {
                other.vspeed = y + sprite_height - other.y + other.vspeed;
            }
            else if(other.vspeed &gt; 0 &amp;&amp; (other.y + other.sprite_height) &lt; y)
            {
                other.vspeed = y - other.y - other.sprite_height-1;
                //other.vspeed = other.y + other.vspeed + other.sprite_height - y;
                //vspeed = 0;
            }
            */
            
            //if walking right
            if(other.hspeed &gt; 0 &amp;&amp; vspeed == 0)
            {
                //other.hspeed = other.x + other.sprite_width + other.hspeed - x+1;
                other.hspeed = x - other.x - other.sprite_width;// + obj_Controller.Friction*(-1);//*8;
                //hspeed = 0;
                if(other.hspeed &lt; 0)
                {
                    other.hspeed = 0;
                }
            }
            //if walking left
            //else if(other.hspeed &lt; 0 &amp;&amp; x != other.x+hspeed &amp;&amp; x != other.x+other.sprite_width+hspeed) // &amp;&amp; (x + sprite_width) &gt; (other.x + other.hspeed))
            else if(other.hspeed &lt; 0 &amp;&amp; vspeed == 0)
            {
                //other.hspeed = x + sprite_width - (other.x + other.hspeed)-1;
                other.hspeed = (other.x - x - sprite_width)*(-1);// - obj_Controller.Friction;//*8;
                //hspeed = 0;
                if(other.hspeed &gt; 0)
                {
                    other.hspeed = 0;
                }
            }
            /*
            
            else 
            if(other.hspeed &gt; 0 &amp;&amp; (other.x + other.sprite_width + other.hspeed &gt; x) &amp;&amp; other.x + other.sprite_width &lt; x)
            {
                //other.hspeed = other.x + other.sprite_width + other.hspeed - x+1;
                other.hspeed = x - other.x - other.sprite_width;
                //hspeed = 0;
            }
            //else if(other.hspeed &lt; 0 &amp;&amp; x != other.x+hspeed &amp;&amp; x != other.x+other.sprite_width+hspeed) // &amp;&amp; (x + sprite_width) &gt; (other.x + other.hspeed))
            else if(other.hspeed &lt; 0 &amp;&amp; (x + sprite_width) &lt; (other.x + other.hspeed) &amp;&amp; other.x &gt; x + sprite_width)
            {
                //other.hspeed = x + sprite_width - (other.x + other.hspeed)-1;
                other.hspeed = (other.x - x - sprite_width)*(-1);
                //hspeed = 0;
            }
            */
            
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if( x + hspeed &lt; 0 )
{
    hspeed = 0;
}

if( x + sprite_width + hspeed &gt; room_width )
{
    hspeed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(place_meeting(x,y,obj_EnemyType) == true)
{
    obj_Controller.tracker++;
    
    tracker++;
    if(tracker &gt; 10)
    {
    
        if(Flipper == true)
        {
            Flipper = false;
            PlaySound1 = true;
            PlaySound2 = false;
        }
        else if(Flipper == false)
        {
            Flipper = true;
            PlaySound2 = true;
            PlaySound1 = false;
        }
        tracker = 0;
    }
    speed = speed - 1;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>612</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>PlaySound1</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>true</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>211</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_sound</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>6</kind>
            <sound>snd_damage</sound>
          </argument>
          <argument>
            <kind>3</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>PlaySound1</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>false</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>421</id>
        <kind>3</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>612</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>PlaySound2</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>true</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>211</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_sound</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>6</kind>
            <sound>snd_killcharacter</sound>
          </argument>
          <argument>
            <kind>3</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>PlaySound2</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>false</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="9" enumb="38">
      <action>
        <libid>1</libid>
        <id>612</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>JumpFlag</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>false</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>211</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_sound</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>6</kind>
            <sound>snd_killmonster</sound>
          </argument>
          <argument>
            <kind>3</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if character is on the ground
if( scr_IsOnGround() == true )
{
    vspeed = vspeed + BaseJump*(-1);
    JumpFlag = true;
    CurrentJump = BaseJump;
    scr_SetJumpSpriteIndex();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="38">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>JumpRelease = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
