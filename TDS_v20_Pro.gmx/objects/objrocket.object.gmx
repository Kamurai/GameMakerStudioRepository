<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprrocket</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="4" ename="objenemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//THIS PART IS A SIMPLE EXAMPLE ON HOW TO MAKE SLIGHTLY RANDOM EXPLOSIONS USING A SINGLE (NON-ANIMATED) SPRITE, (this doesn't use a high quality sprite so look might not be good, but the code is what matters)

var density; 
density=5 //the density of the explosion

repeat(density)
{
    var a;
    a=instance_create(x+lengthdir_x(objrocket.sprite_width/2,objrocket.image_angle),y+lengthdir_y(objrocket.sprite_width/2,objrocket.image_angle),objexplosion); //the explosion itself (created at the tip of the rocket)
    a.image_angle=random(360); //the angle of the explosion part
}
instance_destroy(); //all the explosion parts have been made, so destroy the rocket

/*
On a side note:
Please be aware, that the higher the density variable value is, the more explosion objects will be created, making the explosion more destructive, and too many of them could cause lag.
Please keep this in mind when using it.
If you would like to see a more efficient version of this, ask for it on this example's topic, or PM me, then it will be added into v3.
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objwall">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//THIS PART IS A SIMPLE EXAMPLE ON HOW TO MAKE SLIGHTLY RANDOM EXPLOSIONS USING A SINGLE (NON-ANIMATED) SPRITE, (this doesn't use a high quality sprite so look might not be good, but the code is what matters)

var density; 
density=5; //the density of the explosion

repeat(density)
{
    var a;
    a=instance_create(x+lengthdir_x(objrocket.sprite_width/2,objrocket.image_angle),y+lengthdir_y(objrocket.sprite_width/2,objrocket.image_angle),objexplosion); //the explosion itself (created at the tip of the rocket)
    a.image_angle=random(360); //the angle of the explosion part
}
instance_destroy(); //all the explosion parts have been made, so destroy the rocket

/*
On a side note:
Please be aware, that the higher the density variable value is, the more explosion objects will be created, making the explosion more destructive, and too many of them could cause lag.
Please keep this in mind when using it.
If you would like to see a more efficient version of this, ask for it on this example's topic, or PM me, then it will be added into v3.
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
