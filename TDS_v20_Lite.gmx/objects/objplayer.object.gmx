<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprplayer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//this object is the player...

show_info() //shows game info (remove for actual game use)

myHealth=50; //gives the player some health
maxHealth=50; //the maximum health that the player can have

//***************variables for guns*****************
gun=0; //this is used to identify which gun is being used (in this example it ranges from 0-4 [see below on weapon details])
reload=false; //this is used to determine whether the weapon is reloading, when true, the weapon cannot be fired nor can it be changed
wpnCount=5; //this is the number of weapons (used in changing the weapons)
canShoot=true; //this is for shooting, if true, you can shoot, if its false, you can't
timePassed=0; //used for reload progress bar (this represents how much time has passed since the reload started)

//Unlike v1 of this example, I've introduced a 2 dimensional array for the weapons and their different attributes. I have also added a maximum for spare ammo, so went you pick ammo up, you aren't able to carry infinite amounts
//The 1st dimension in the array is the weapon. The 2nd is the attribute.
//Caution: This can be confusing, so you may want to read it a few times before using it.

/*
  Weapon information array format...
    General form: gunArray[x,y]
      x = Gun id
      y = Attribute
        More on y...
          0  -  Weapon name : Used in HUD
          1  -  Current ammo
          2  -  Max current ammo
          3  -  Spare ammo
          4  -  Max spare ammo
          5  -  Accuracy : The smaller the number, the more accurate (0 is perfect)
          6  -  Fire Rate : The smaller the number, the faster it shoots (0 is instant)
          7  -  Reload rate : Time it takes to reload
          8  -  Ammo type : What object is used as a projectile
          9  -  Ammo speed : How fast should the projectile be shot
          10 -  Number of shots : How many projectiles are fired at once
          11 -  The damage the projectile causes
*/

//Weapon 1 - Assault rifle
gunArray[0,0]="1. Assault Rifle";
gunArray[0,1]=50;
gunArray[0,2]=50;
gunArray[0,3]=250;
gunArray[0,4]=500;
gunArray[0,5]=5;
gunArray[0,6]=5;
gunArray[0,7]=room_speed*1.5;
gunArray[0,8]=objbullet;
gunArray[0,9]=20;
gunArray[0,10]=1;
gunArray[0,11]=1;

//Weapon 2 - Shotgun
gunArray[1,0]="2. Shotgun";
gunArray[1,1]=8;
gunArray[1,2]=8;
gunArray[1,3]=40;
gunArray[1,4]=80;
gunArray[1,5]=30;
gunArray[1,6]=25;
gunArray[1,7]=room_speed*2;
gunArray[1,8]=objbullet;
gunArray[1,9]=16;
gunArray[1,10]=15;
gunArray[1,11]=1;

//Weapon 3 - Uzi
gunArray[2,0]="3. Uzi";
gunArray[2,1]=60;
gunArray[2,2]=60;
gunArray[2,3]=300;
gunArray[2,4]=600;
gunArray[2,5]=10;
gunArray[2,6]=1;
gunArray[2,7]=room_speed*2;
gunArray[2,8]=objbullet;
gunArray[2,9]=20;
gunArray[2,10]=1;
gunArray[2,11]=0.75;

//Weapon 4 - Rocket Launcher
gunArray[3,0]="4. Rocket Launcher";
gunArray[3,1]=4;
gunArray[3,2]=4;
gunArray[3,3]=20;
gunArray[3,4]=40;
gunArray[3,5]=2;
gunArray[3,6]=100;
gunArray[3,7]=room_speed*3;
gunArray[3,8]=objrocket;
gunArray[3,9]=20;
gunArray[3,10]=1;
gunArray[3,11]=0;

//Weapon 5 - Sniper Rifle
gunArray[4,0]="5. Sniper Rifle";
gunArray[4,1]=10;
gunArray[4,2]=10;
gunArray[4,3]=50;
gunArray[4,4]=100;
gunArray[4,5]=0.5;
gunArray[4,6]=60;
gunArray[4,7]=room_speed*2.5;
gunArray[4,8]=objbullet;
gunArray[4,9]=25;
gunArray[4,10]=1;
gunArray[4,11]=20;

//The following is used ONLY for the Uzi (these are for when you fire the uzi, accuracy goes up/down)
accurUpRate=0.75; //the rate at which accuracy will decrease by
minAccur=gunArray[2,5]; //the minimum accuracy for the uzi
maxAccur=minAccur+(gunArray[2,2]*accurUpRate); //the maximum accuracy for the uzi (I multiplied the maximum ammo, by the accuracy decrease rate [accurUpRate] to get a maximum for the loss of accuracy)
accurUp=false; //this variable determines whether the accuracy of the uzi will go up/down (up signifies loss of accuracy)

//************************************************************************************
/*
On a side note:
Please be aware that I use one sprite for the player, so you will need to add sprite changing code if you wish to change the sprites when changing weapons.
This example is made to show the effects of different types of weapons.
If you want me to develop this sprite changing code for you. Please leave the request on this example's topic.
OR 
PM me the request. 
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//The reloading alarm...
var curAmmo,maxAmmo,sprAmmo,diff;
curAmmo=gunArray[gun,1]; //current ammo
maxAmmo=gunArray[gun,2]; //max ammo
sprAmmo=gunArray[gun,3]; //spare ammo
diff=(maxAmmo-curAmmo); //difference between max and current

if (sprAmmo &gt;= diff) //if the amount of spare ammo is greater than or equal to the difference
{
    gunArray[gun,3]=(sprAmmo-diff); //reduce spare ammo by the difference
    gunArray[gun,1]=maxAmmo; //set the current to the max
}
else //if the ammount of spare ammo is less than the difference
{
    gunArray[gun,3]=0; //set the spare ammo to 0
    gunArray[gun,1]=(curAmmo+sprAmmo); //increase the current ammo by whatever is left of spare ammo
}
reload=false; //reloading is over
canShoot=true; //so we can shoot again
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//This alarm is used to allow you to continue shooting by setting the canShoot variable back to true
canShoot=true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//******************************controls where the player will look************************************
if (point_distance(x,y,mouse_x,mouse_y) &gt; 18) //if the distance between the mouse and the player is greater than 18
{
    direction=point_direction(x+lengthdir_x(15,direction+270),y+lengthdir_y(15,direction+270),mouse_x,mouse_y); //finds point to look from (15 is the distance from the origin to the middle of the gun)
}
else //if the distance is less than or equal to 18
{
    if (point_distance(x,y,mouse_x,mouse_y) &gt; 0) //if the distance is greater than 0
    {
        direction=point_direction(x,y,mouse_x,mouse_y); //points towards mouse directly, rather than using gun position
    }
}
image_index=direction; //sets image angle (index) to face the facing direction

if (gunArray[gun,1] &lt;= 0 &amp;&amp; gunArray[gun,3] &gt; 0) //if current ammo is less than or equal to 0, and current spare ammo is greater than 0
{
    reload=true; //start reloading
}

//**************************reloading************************
if (reload==true &amp;&amp; alarm[1]==-1) //if you need to reload, and the reloading alarm hasn't been set
{
    alarm[1]=gunArray[gun,7]; //set the reloading alarm to the reload rate of the gun you're using
    canShoot=false; //to prevent shooting
}

//********************uzi's accuracy change********************
if (gun==2 &amp;&amp; accurUp==true)    //if the Uzi is being used and accuracy up variable is true
{
    if (gunArray[gun,5] &lt; maxAccur) //if current accuracy is less than maximum accuracy
    {
        gunArray[gun,5]+=accurUpRate; //decrease the accuracy for the Uzi (remember: a higher number is worse accuracy)
    }
}
if (accurUp==false || gun!=2) //if the Uzi is not being used, or the your not firing (when accurUp is false)
{
    if (gunArray[2,5] &gt; minAccur) //if current accuracy is greater than minimum accuracy
    {
        gunArray[2,5]-=accurUpRate; //increase the accuracy for the Uzi (remember: a higher number is worse accuracy)
    }
}

//********************reload rate progress********************
if (reload==true) //if reloading
{
    timePassed+=1; //adds 1 onto the amount of time passed
}
else if (timePassed!=0) //if not reloading, and the timePassed variable isn't 0
{
    timePassed=0; //set timePassed to 0 (to be ready for next reload)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objexplosion">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>myHealth-=0.5 //take 0.5 off of current health (i recommend a small number as the explosion part will cause damage so long as it exists, and is touching)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="87">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//this is only a basic movement system and may not be very efficient
//this checks whether a solid object is in front of it, and if not, it moves forward the distance that it is checking
if ((place_free(x+lengthdir_x(3,image_index),y+lengthdir_y(3,image_index))) &amp;&amp; (point_distance(x,y,mouse_x,mouse_y) &gt; 40))
{
    x=x+lengthdir_x(2,image_index); //2 is the speed
    y=y+lengthdir_y(2,image_index);
}
//if you would like a more complex movement system or a better explanation to this one, PM me
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="83">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//this is only a basic movement system and may not be very efficient
//this checks whether a solid object is in front of it, and if not, it moves forward the distance that it is checking
if ((place_free(x-lengthdir_x(2,image_index),y-lengthdir_y(2,image_index))) &amp;&amp; (point_distance(x,y,mouse_x,mouse_y) &gt; 20))
{
    x=x-lengthdir_x(1,image_index); //1 is the speed
    y=y-lengthdir_y(1,image_index);
}
//if you would like a more complex movement system or a better explanation to this one, PM me
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//this is only a basic movement system and may not be very efficient
//this checks whether a solid object is in front of it, and if not, it moves forward the distance that it is checking
if ((place_free(x+lengthdir_x(2.5,image_index-90),y+lengthdir_y(2.5,image_index-90))) &amp;&amp; (point_distance(x,y,mouse_x,mouse_y) &gt; 20))
{
    x=x+lengthdir_x(1.5,image_index-90); //1.5 is the speed
    y=y+lengthdir_y(1.5,image_index-90);
}
//if you would like a more complex movement system or a better explanation to this one, PM me
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="65">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//this is only a basic movement system and may not be very efficient
//this checks whether a solid object is in front of it, and if not, it moves forward the distance that it is checking
if ((place_free(x+lengthdir_x(2.5,image_index+90),y+lengthdir_y(2.5,image_index+90))) &amp;&amp; (point_distance(x,y,mouse_x,mouse_y) &gt; 20))
{
    x=x+lengthdir_x(1.5,image_index+90); //1.5 is the speed
    y=y+lengthdir_y(1.5,image_index+90);
}
//if you would like a more complex movement system or a better explanation to this one, PM me
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="61">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (reload==false) //this will permit you to change weapons only if your current one isn't reloading
{
    if (gun==0) //if your current weapon is equal to or less than the 1
    {
        gun=(wpnCount-1); //sets the gun variable variable to the number of your weapons minus one (so you have your last weapon)
    }
    else if (gun &lt; wpnCount) //if your current weapon is equal to or less than your number of weapons
    {
        gun-=1; //subtract one from the gun variable (previous weapon)
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="60">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (reload==false) //this will permit you to change weapons only if your current one isn't reloading
{
    if (gun &lt; (wpnCount-1)) //if your current gun is less than the number of weapons in your armament
    {
        gun+=1 //add one onto the gun variable (next weapon)
    }
    else if (gun &gt;= (wpnCount-1)) //if your current weapon is equal to or greater than number of weapons in your armament
    {
        gun=0; //sets the gun variable to 0 (your first weapon)
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//This event is run when the Global Left mouse button is released

accurUp=false //as you're not longer firing, the uzi's accuracy up variable becomes false, so accuracy will begin going back to normal
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//This event is run when the Global Left mouse button is first pressed

if (gun==2) //if you're using the Uzi
{
    accurUp=true; //set the variable which allows for accuracy to be reduced (called accurUp as a higher accuracy number is worse accuracy)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//As you saw, this is in Global Mouse button not just normal... This is necessary as it won't shoot in just Left Mouse button unless the mouse is over the player

if (reload==false) //if your not reloading
{
    if (canShoot==true) //if you can shoot
    {
        var ammo;
        ammo=gunArray[gun,1]; //current ammo
        if (ammo&gt;0) //if the current weapon has any ammo
        {
            repeat(gunArray[gun,10]) //repeat the number of shots that the current weapon fires at once
            {
                var accr, a;
                accr=gunArray[gun,5]; //the accuracy of the current weapon
                a=instance_create(x+lengthdir_x(53,image_index-18),y+lengthdir_y(53,image_index-18),gunArray[gun,8]); //create the weapon's projectile at the gun's barrel
                a.speed=gunArray[gun,9]; //give the newly created projectile speed based on how fast the current weapon shots it
                a.direction=((image_index-(accr/2))+random(accr)); //give it a random direction based on the accuracy of the current weapon
                a.image_index=a.direction; //set image_index to the chosen direction
                a.damage=gunArray[gun,11]; //set the damage of the projectile
            }
            alarm[0]=gunArray[gun,6]; //set alarm 0 to the rate at which the weapon shots
            canShoot=false; //prevent shooting until alarm 0 allows us to shoot again
            gunArray[gun,1]-=1; //set the current ammo of the weapon to 1 less
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//------the aim-----
window_set_cursor(cr_cross); //changes the cursor to a cross

//---player itself---
draw_sprite(sprite_index,image_index,x,y); //draws the player's sprite so it won't disappear

//*******the HUD*******
viewx=view_xview[view_current]; //this to make it easier to enter view x positioning
viewy=view_yview[view_current]; //this to make it easier to enter view y positioning

//The HUD base:
draw_set_alpha(0.8); //make the base partially transparent (so it doesn't block the view)
draw_set_color(c_white); //for drawing the rectangle white
draw_rectangle(viewx+14,viewy+8,viewx+168,viewy+72,false); //a rectangle for a basic HUD
draw_set_alpha(1); //reset the drawing alpha, so nothing is partially transparent anymore
draw_set_color(c_black); //for drawing the the outline and text black
draw_rectangle(viewx+14,viewy+8,viewx+168,viewy+72,true); //the outline for a basic HUD

//The healthbar:
draw_healthbar(viewx+4,viewy+8,viewx+14,viewy+72,(myHealth/maxHealth)*100,c_black,c_red,c_green,3,true,true); //the healthbar (goes from top to bottom, hence the 3 in the direction argument)

//The weapon name and information:
draw_text(viewx+22,viewy+12,gunArray[gun,0]); //the name of the weapon
draw_text(viewx+22,viewy+32,string(gunArray[gun,1]) + " / " + string(gunArray[gun,2])); //current and max ammo
draw_text(viewx+22,viewy+50,string(gunArray[gun,3]) + " / " + string(gunArray[gun,4])); //spare and max spare ammo

//The reload rate display:
if (reload==true) //if you're reloading
{
    draw_healthbar(viewx+100,viewy+52,viewx+158,viewy+64,(timePassed/gunArray[gun,7])*100,c_black,c_aqua,c_blue,0,true,true); //the reload rate bar
}

//************************************************THE LASER SIGHT************************************************
//****in v1, the code was put here; in v2, for ease of use, i've put revised code into the script draw_laser()***
if (mouse_check_button(mb_right)) //this is the button that will be used to activate the laser
{
    draw_laser(x+lengthdir_x(50,image_index-18),y+lengthdir_y(50,image_index-18),image_index,1000,2,par_all,c_red); //draw the laser (see the script for details on how it's done)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="90">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (reload==false) //this is will permit you to change weapons only if your current one isn't reloading
{
    if (gun &lt; (wpnCount-1)) //if you're current gun is less than the number of weapons in your armament
    {
        gun+=1; //add one onto the gun variable (next weapon)
    }
    else if (gun &gt;= (wpnCount-1)) //if you're current weapon is equal to or greater than number of weapons in your armament
    {
        gun=0; //sets the gun variable to 0 (your first weapon)
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="88">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (reload==false) //this is will permit you to change weapons only if your current one isn't reloading
{
    if (gun==0) //if you're current weapon is equal to or less than the 1
    {
        gun=(wpnCount-1); //sets the gun variable variable to the number of you're weapons (so you have you're last weapon)
    }
    else if (gun &lt; wpnCount) //if you're current weapon is equal to or less than you're number of weapons
    {
        gun-=1; //subtract one from the gun variable (previous weapon)
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//**************forceful reloading*****************
var curAmmo, maxAmmo, sprAmmo;
curAmmo=gunArray[gun,1]; //find current ammo
maxAmmo=gunArray[gun,2]; //find max ammo
sprAmmo=gunArray[gun,3]; //find spare ammo
if (sprAmmo &gt; 0) //if spare ammo is greater than 0
{
    if (curAmmo != maxAmmo) //if current ammo is not the same as max ammo
    {
        alarm[1]=gunArray[gun,7]; //set the reloading alarm to the reload rate of the gun you're using
        canShoot=false; //to prevent shooting
        reload=true; //it's reloading, therefore the reload variable is set to true
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//This code will create an enemy at a random location, and tries to place it away from 'blocking' objects
var e;
e=instance_create(random(room_width),random(room_height),objenemy); //this is the enemy
while (!(place_meeting(e.x,e.y,par_all))) //while the enemy is touching something
{
    e.x=random(room_width); //change it's x coordinate
    e.y=random(room_height); //chane it's y coordinate
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
