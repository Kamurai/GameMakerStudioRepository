<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x = room_width/2;
y = room_height/2;

squarelength = 16;

squareid = 0;

m = 0;
n = 0;

flip = 0;
ring = 0;

target_x = (x-(sprite_width/2)+(squarelength/2));
target_y = (y-(sprite_height/2)+(squarelength/2));

limit = sqrt( sqr(x-target_x) + sqr(y-target_y) );

distance = 0;

number_x = (sprite_width/squarelength);
number_y = (sprite_height/squarelength);

square_m = sqrt( sqr(squarelength/2) + sqr(squarelength/2) );


for(m=1;m&lt;=(sprite_width/squarelength);m+=1)
{
    for(n=1;n&lt;=(sprite_height/squarelength);n+=1)
    {
        if( flip = 0 )
        {
            instance_create( target_x, target_y, square_w);
            flip = 1;
        }
        else if( flip = 1)
        {
            instance_create( target_x, target_y, square_b);
            flip = 0;
        }
        
        //designate square's board coordinates
        squareid.b_x = n;
        squareid.b_y = m;
        
        distance = sqrt( sqr( x - squareid.x ) + sqr( y - squareid.y ) );
            
        //desginate the square's ring
            //squareid.ring = designatering(squareid);
        ring = 0;
        for(j=1;j&lt;=((sprite_width/squarelength)-1);j+=1)
        {
            //if checking an odd ring
            if(ring == 0)
            {
//instance_destroy();
                if( (distance == (j * square_m) ) )
                {
                    squareid.ring = j;
                    //j = (sprite_width/squarelength);
                }
                
                
                ring = 1;
            }
            //if checking an even ring
            else
            {
                if( (distance &gt; ((j-1) * square_m) ) &amp;&amp; (distance &lt; ((j+1) * square_m) ) )
                {
                    squareid.ring = j;
                    //j = (sprite_width/squarelength);
                }
            
                ring = 0;
            }
            
        }
        
        
        //increment target x
        target_x = target_x + squarelength;        
    }
    
    //reset target x
    target_x = (x-(sprite_width/2)+(squarelength/2));
    //increment target y
    target_y = target_y + squarelength;
    
    if( flip = 0 )
    {
        flip = 1;
    }
    else if( flip = 1)
    {
        flip = 0;
    }

}

//instance_create( (x-(sprite_width/2)+(squarelength/2)), (y-(sprite_height/2)+(squarelength/2)), square_w);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alpha = 45;
mid = sqrt( sqr( instance_nearest(x,y,square).x - x ) + sqr( instance_nearest(x,y,square).y - y )  );
tau = 0;
theta = 0;

b = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if( image_angle == 360 )
{
    image_angle = 0;
}

if( image_angle = -1 )
{
    image_angle = 359;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//alpha = 45;


//b = 0;

/*
if( image_angle &gt; 315 )
{
    b = image_angle - 315;
}
else if( image_angle &gt; 270 )
{
    b = image_angle - 270;
}
if( image_angle &gt; 225 )
{
    b = image_angle - 225;
}
else if( image_angle &gt; 180 )
{
    b = image_angle - 180;
}
else if( image_angle &gt; 135 )
{
    b = image_angle - 135;
}
else if( image_angle &gt; 90 )
{
    b = image_angle - 90;
}
else if( image_angle &gt; 45 )
{
    b = image_angle - 45;
}
else
{
    b = image_angle - 0;
}

alpha = 45 - b;

mid = sqrt( sqr( instance_nearest(x,y,square).x - x ) + sqr( instance_nearest(x,y,square).y - y )  );
tau = sin(alpha) * mid;
theta = cos(alpha) * mid;

*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="39">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_angle = image_angle - .5;//1;

if( image_angle == -.5)//1 )
{
    image_angle = 359.5;//359;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="37">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_angle = image_angle + .5;//1;

if( image_angle == 360.5)//1 )
{
    image_angle = .5;//1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
