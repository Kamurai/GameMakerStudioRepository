<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>b_x = 0;
b_y = 0;

ring = 0;

board.squareid = id;

superflag = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>distance = sqrt( sqr( board.x - x ) + sqr( board.y - y ) );

square_m = board.square_m;


//if square is in quadrant 1
if( x &gt; board.x &amp;&amp; y &lt; board.y )
{
    alpha = arctan( (board.y - y)/(x-board.x) ) * (180/pi);
}
//if square is in quadrant 2
else if( x &lt; board.x &amp;&amp; y &lt; board.y )
{
    alpha = arctan( (board.y - y)/(board.x - x) ) * (180/pi);
}
//if square is in quadrant 3
else if( x &lt; board.x &amp;&amp; y &gt; board.y )
{
    alpha = arctan( (y-board.y)/(board.x - x) ) * (180/pi);
}
//if square is in quadrant 4
else if( x &gt; board.x &amp;&amp; y &gt; board.y )
{
    alpha = arctan( (y-board.y)/(x-board.x) ) * (180/pi);
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//superflag = 0;

//if square is not in the second quadrant, kill it
/*if( ( x &gt;= board.x || y &gt;= board.y )  )
{
    if(superflag == 0)
    {
        instance_destroy();
    }
}
else
{
    superflag = 1;
}*/


//image_angle = board_64.image_angle;

/*
//if square is in quadrant 1
if( x &gt; board.x &amp;&amp; y &lt;= board.y )
{
    x = board.x + (distance * cos(alpha*(pi/180)));
    y = board.y - (distance * sin(alpha*(pi/180)));
}
//if square is in quadrant 2
else if( x &lt;= board.x &amp;&amp; y &lt; board.y )
{
    x = board.x - (distance * cos(alpha*(pi/180)));
    y = board.y - (distance * sin(alpha*(pi/180)));
}
//if square is in quadrant 3
else if( x &lt; board.x &amp;&amp; y &gt;= board.y )
{
    x = board.x - (distance * cos(alpha*(pi/180)));
    y = board.y + (distance * sin(alpha*(pi/180)));
}
//if square is in quadrant 4
else if( x &gt;= board.x &amp;&amp; y &gt; board.y )
{
    x = board.x + (distance * cos(alpha*(pi/180)));
    y = board.y + (distance * sin(alpha*(pi/180)));
}
*/

/*
if( ((y - board_64.y) &gt;= sprite_height/2 ) &amp;&amp; ( ((x - board_64.x) &lt;= sprite_width/2 )) &amp;&amp; ((x - board_64.x) &gt; 0) )
{
    y = board_64.y + board_64.theta;
    x = board_64.x + board_64.tau;
}
*/
//if( (x - board_64.x) &lt;= sprite_width/2 )
//{
    
//}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="39">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_angle = image_angle - .5;//1;

if( image_angle == (-.5) )
{
    image_angle = 359.5;//359;
}

//if square is in quadrant 1
if( x &gt;= board.x &amp;&amp; y &lt; board.y )
{
    alpha = alpha - .5;//1;
    
    //if square is moving to quadrant 4
    if( alpha &lt; 0 )
    {
        alpha = alpha * (-1); //0;
        x = board.x + (distance * cos(alpha*(pi/180)));
        y = board.y + (distance * sin(alpha*(pi/180)));
    }
    else
    {
        x = board.x + (distance * cos(alpha*(pi/180)));
        y = board.y - (distance * sin(alpha*(pi/180)));
    }
}
//if square is in quadrant 2
else if( x &lt; board.x &amp;&amp; y &lt;= board.y )
{
    alpha = alpha + .5;//1;

    //if square is moving to quadrant 1
    if( alpha &gt; 90 )
    {
        alpha = 90 - (alpha - 90);
        x = board.x + (distance * cos(alpha*(pi/180)));
        y = board.y - (distance * sin(alpha*(pi/180)));
    }
    else
    {
        x = board.x - (distance * cos(alpha*(pi/180)));
        y = board.y - (distance * sin(alpha*(pi/180)));
    }
}
//if square is in quadrant 3
else if( x &lt;= board.x &amp;&amp; y &gt; board.y )
{
    alpha = alpha - .5;//1;
    
    //if square is moving to quadrant 2   
    if( alpha &lt; 0 )
    {
        alpha = alpha * (-1); //0;
        x = board.x - (distance * cos(alpha*(pi/180)));
        y = board.y - (distance * sin(alpha*(pi/180)));
    }
    else
    {
        x = board.x - (distance * cos(alpha*(pi/180)));
        y = board.y + (distance * sin(alpha*(pi/180)));
    }
}
//if square is in quadrant 4
else if( x &gt; board.x &amp;&amp; y &gt;= board.y )
{
    alpha = alpha + .5;//1;
    
    //if square is moving to quadrant 3
    if( alpha &gt; 90 )
    {
        alpha = 90 - (alpha - 90);
        x = board.x - (distance * cos(alpha*(pi/180)));
        y = board.y + (distance * sin(alpha*(pi/180)));
    }
    else
    {
        x = board.x + (distance * cos(alpha*(pi/180)));
        y = board.y + (distance * sin(alpha*(pi/180)));
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="37">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_angle = image_angle + .5;//1;

if( image_angle == 360.5 )
{
    image_angle = .5;//1;
}

//if square is in quadrant 1
if( x &gt; board.x &amp;&amp; y &lt;= board.y )
{
    alpha = alpha + .5;//1;
    
    //if square is moving to quadrant 2
    if( alpha &gt; 90 )
    {
        alpha = 90 - (alpha - 90);
        x = board.x - (distance * cos(alpha*(pi/180)));
        y = board.y - (distance * sin(alpha*(pi/180)));
    }
    else
    {
        x = board.x + (distance * cos(alpha*(pi/180)));
        y = board.y - (distance * sin(alpha*(pi/180)));
    }
}
//if square is in quadrant 2
else if( x &lt;= board.x &amp;&amp; y &lt; board.y )
{
    alpha = alpha - .5;//1;
    
    //if square is moving to quadrant 3
    if( alpha &lt; 0 )
    {
        alpha = alpha * (-1);
        x = board.x - (distance * cos(alpha*(pi/180)));
        y = board.y + (distance * sin(alpha*(pi/180)));
    }
    else
    {
        x = board.x - (distance * cos(alpha*(pi/180)));
        y = board.y - (distance * sin(alpha*(pi/180)));
    }
}
//if square is in quadrant 3
else if( x &lt; board.x &amp;&amp; y &gt;= board.y )
{
    alpha = alpha + .5;//1;
    
    //if square is moving to quadrant 4
    if( alpha &gt; 90 )
    {
        alpha = 90 - (alpha - 90);
        x = board.x + (distance * cos(alpha*(pi/180)));
        y = board.y + (distance * sin(alpha*(pi/180)));
    }
    else
    {
        x = board.x - (distance * cos(alpha*(pi/180)));
        y = board.y + (distance * sin(alpha*(pi/180)));
    }
}
//if square is in quadrant 4
else if( x &gt;= board.x &amp;&amp; y &gt; board.y )
{
    alpha = alpha - .5;//1;
    
    //if square is moving to quadrant 1
    if( alpha &lt; 0 )
    {
        alpha = alpha * (-1);
        x = board.x + (distance * cos(alpha*(pi/180)));
        y = board.y - (distance * sin(alpha*(pi/180)));
    }
    else
    {
        x = board.x + (distance * cos(alpha*(pi/180)));
        y = board.y + (distance * sin(alpha*(pi/180)));
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
