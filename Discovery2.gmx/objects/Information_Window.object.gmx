<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-3</depth>
  <persistent>0</persistent>
  <parentName>Interface_Object</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Selected = 0;

State = 0;
Description = "flat";
Level = 0;
Health = 0
MaxHealth = 0;
Attack = 0;
Speed = 0;
Value = 0;

Offset_x = Mini_Map.Width;
Offset_y = Mini_Map.Offset_y;

Width = 180;
Height = Mini_Map.Height;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
x = view_xview[0] + Offset_x;
y = view_yview[0] + Offset_y;


if( Controller.Selected == 0 )
{
    Selected = 0;
}
else //if( Controller.Selected != 0 )
{
    Selected = Controller.Selected;
    Description = (Controller.Selected).Description;
    State = Info.State[(Controller.Selected).State];
    Object_Title = object_get_name((Controller.Selected).object_index);
    Level = (Controller.Selected).Level;
    Health = (Controller.Selected).Health;
    MaxHealth = Info.unithealth[(Controller.Selected).Type,  (Controller.Selected).Level];
    Attack = (Controller.Selected).Attack;
    Speed = (Controller.Selected).Speed;
    Value = (Controller.Selected).Value;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font("font0");

//draw border
//draw_set_color(c_black);
//draw_rectangle((x), (y), (x+320), (y+80), 1);
//draw_rectangle((x), (y), (x+Width), (y+Height), 1);

draw_background(bkgd_Information_Window, x, y);
//draw_sprite(spr_Information_Window, -1, x, y);

//draw text
draw_set_color(c_white);

if( Selected == 0 )
{
}
//Builder
else if(Selected.Type == 0)
{
    //draw_text_transformed( (x+10), (y), "Description: ", 1, 1, 0);
    //draw_text_transformed( (x+10+70), (y), Description, 1, 1, 0);
    draw_text_transformed( (x+10), (y+5), Description, 1, 1, 0);

    draw_text_transformed( (x+10), (y+25), "State: ", 1, 1, 0);
    draw_text_transformed( (x+10+50), (y+25), State, 1, 1, 0);

    draw_text_transformed( (x+10), (y+40), "Level: ", 1, 1, 0);
    draw_text_transformed( (x+10+50), (y+40), Level, 1, 1, 0);

    draw_text_transformed( (x+10), (y+55), "Health: ", 1, 1, 0);
    //draw_text_transformed( (x+10+50), (y+55), Health, 1, 1, 0);
    //draw_text_transformed( (x+10+120), (y+55), " / ", 1, 1, 0);
    //draw_text_transformed( (x+10+130), (y+55), MaxHealth, 1, 1, 0);
    draw_text_transformed( (x+10+50), (y+55), string(Health) + " / " + string(MaxHealth), 1, 1, 0);

    draw_text_transformed( (x+10), (y+70), "Build: ", 1, 1, 0);
    draw_text_transformed( (x+10+50), (y+70), Attack, 1, 1, 0);

    draw_text_transformed( (x+10), (y+85), "Speed: ", 1, 1, 0);
    draw_text_transformed( (x+10+50), (y+85), Speed, 1, 1, 0);

    //draw_text_transformed( (x+10), (y+100), "Value: ", 1, 1, 0);
    //draw_text_transformed( (x+10+50), (y+100), Value, 1, 1, 0);
}
//Harvester
else if(Selected.Type == 1)
{
    //draw_text_transformed( (x+10), (y), "Description: ", 1, 1, 0);
    //draw_text_transformed( (x+10+70), (y), Description, 1, 1, 0);
    draw_text_transformed( (x+10), (y+5), Description, 1, 1, 0);

    draw_text_transformed( (x+10), (y+25), "State: ", 1, 1, 0);
    draw_text_transformed( (x+10+50), (y+25), State, 1, 1, 0);

    draw_text_transformed( (x+10), (y+40), "Level: ", 1, 1, 0);
    draw_text_transformed( (x+10+50), (y+40), Level, 1, 1, 0);

    draw_text_transformed( (x+10), (y+55), "Health: ", 1, 1, 0);
    //draw_text_transformed( (x+10+50), (y+55), Health, 1, 1, 0);
    //draw_text_transformed( (x+10+120), (y+55), " / ", 1, 1, 0);
    //draw_text_transformed( (x+10+130), (y+55), MaxHealth, 1, 1, 0);
    draw_text_transformed( (x+10+50), (y+55), string(Health) + " / " + string(MaxHealth), 1, 1, 0);

    draw_text_transformed( (x+10), (y+70), "Harvest: ", 1, 1, 0);
    draw_text_transformed( (x+10+50), (y+70), Attack, 1, 1, 0);

    draw_text_transformed( (x+10), (y+85), "Speed: ", 1, 1, 0);
    draw_text_transformed( (x+10+50), (y+85), Speed, 1, 1, 0);

    draw_text_transformed( (x+10), (y+100), "Value: ", 1, 1, 0);
    draw_text_transformed( (x+10+50), (y+100), Value, 1, 1, 0);
    
    if( ValueType == 0)
    {
    }
    else if( ValueType == 16)
    {
        draw_text_transformed( (x+10+50+30), (y+85), "Wood", 1, 1, 0);
    }
    else if( ValueType == 17)
    {
        draw_text_transformed( (x+10+50+30), (y+85), "Ore", 1, 1, 0);
    }
    else if( ValueType == 18)
    {
        draw_text_transformed( (x+10+50+30), (y+85), "Essence", 1, 1, 0);
    }
    
}
//Fighter or Monster
else if(Selected.Type == 2 ||
        Selected.Type == 3)
{
    //draw_text_transformed( (x+10), (y), "Description: ", 1, 1, 0);
    //draw_text_transformed( (x+10+70), (y), Description, 1, 1, 0);
    draw_text_transformed( (x+10), (y+5), Description, 1, 1, 0);

    draw_text_transformed( (x+10), (y+25), "State: ", 1, 1, 0);
    draw_text_transformed( (x+10+50), (y+25), State, 1, 1, 0);

    draw_text_transformed( (x+10), (y+40), "Level: ", 1, 1, 0);
    draw_text_transformed( (x+10+50), (y+40), Level, 1, 1, 0);

    draw_text_transformed( (x+10), (y+55), "Health: ", 1, 1, 0);
    //draw_text_transformed( (x+10+50), (y+55), Health, 1, 1, 0);
    //draw_text_transformed( (x+10+120), (y+55), " / ", 1, 1, 0);
    //draw_text_transformed( (x+10+130), (y+55), MaxHealth, 1, 1, 0);
    draw_text_transformed( (x+10+50), (y+55), string(Health) + " / " + string(MaxHealth), 1, 1, 0);

    draw_text_transformed( (x+10), (y+70), "Attack: ", 1, 1, 0);
    draw_text_transformed( (x+10+50), (y+70), Attack, 1, 1, 0);

    draw_text_transformed( (x+10), (y+85), "Speed: ", 1, 1, 0);
    draw_text_transformed( (x+10+50), (y+85), Speed, 1, 1, 0);

    //draw_text_transformed( (x+10), (y+100), "Value: ", 1, 1, 0);
    //draw_text_transformed( (x+10+50), (y+100), Value, 1, 1, 0);
}
//Building (Non-Attacking, Non-Resource Generating)
else if(Selected.Type == 4 ||
        Selected.Type == 5 ||
        Selected.Type == 6 ||
        Selected.Type == 7)
{
    //draw_text_transformed( (x+10), (y), "Description: ", 1, 1, 0);
    //draw_text_transformed( (x+10+70), (y), Description, 1, 1, 0);
    draw_text_transformed( (x+10), (y+5), Description, 1, 1, 0);

    draw_text_transformed( (x+10), (y+25), "State: ", 1, 1, 0);
    draw_text_transformed( (x+10+50), (y+25), State, 1, 1, 0);

    draw_text_transformed( (x+10), (y+40), "Level: ", 1, 1, 0);
    draw_text_transformed( (x+10+50), (y+40), Level, 1, 1, 0);

    draw_text_transformed( (x+10), (y+55), "Health: ", 1, 1, 0);
    //draw_text_transformed( (x+10+50), (y+55), Health, 1, 1, 0);
    //draw_text_transformed( (x+10+120), (y+55), " / ", 1, 1, 0);
    //draw_text_transformed( (x+10+130), (y+55), MaxHealth, 1, 1, 0);
    draw_text_transformed( (x+10+50), (y+55), string(Health) + " / " + string(MaxHealth), 1, 1, 0);

    if( Selected.Type == 4 || Selected.Type == 7 )
    {
        for (i=0; i &lt; 3; i+=1)
        {
            if( Selected.alarm[i] != (-1) )
            {
                draw_text_transformed( (x+10), (y+70), "Time Remaining: " + string(Selected.alarm[i]/room_speed) + " s", 1, 1, 0);
            }
        }
        
    }
    else if( Selected.Type == 5 || Selected.Type == 6 )
    {
        for (i=0; i &lt; 2; i+=1)
        {
            if( Selected.alarm[i] != (-1) )
            {
                draw_text_transformed( (x+10), (y+70), "Time Remaining: " + string(Selected.alarm[i]/room_speed) + " s", 1, 1, 0);
            }
        }
        
    }
    
    //draw_text_transformed( (x+10), (y+70), "Attack: ", 1, 1, 0);
    //draw_text_transformed( (x+10+50), (y+70), Attack, 1, 1, 0);

    //draw_text_transformed( (x+10), (y+85), "Speed: ", 1, 1, 0);
    //draw_text_transformed( (x+10+50), (y+85), Speed, 1, 1, 0);

    //draw_text_transformed( (x+10), (y+70), "Value: ", 1, 1, 0);
    //draw_text_transformed( (x+10+50), (y+70), Value, 1, 1, 0);
}
//Generator
else if(Selected.Type == 8)
{
    //draw_text_transformed( (x+10), (y), "Description: ", 1, 1, 0);
    //draw_text_transformed( (x+10+70), (y), Description, 1, 1, 0);
    draw_text_transformed( (x+10), (y+5), Description, 1, 1, 0);

    draw_text_transformed( (x+10), (y+25), "State: ", 1, 1, 0);
    draw_text_transformed( (x+10+50), (y+25), State, 1, 1, 0);

    draw_text_transformed( (x+10), (y+40), "Level: ", 1, 1, 0);
    draw_text_transformed( (x+10+50), (y+40), Level, 1, 1, 0);

    draw_text_transformed( (x+10), (y+55), "Health: ", 1, 1, 0);
    //draw_text_transformed( (x+10+50), (y+55), Health, 1, 1, 0);
    //draw_text_transformed( (x+10+120), (y+55), " / ", 1, 1, 0);
    //draw_text_transformed( (x+10+130), (y+55), MaxHealth, 1, 1, 0);
    draw_text_transformed( (x+10+50), (y+55), string(Health) + " / " + string(MaxHealth), 1, 1, 0);

    //draw_text_transformed( (x+10), (y+70), "Attack: ", 1, 1, 0);
    //draw_text_transformed( (x+10+50), (y+70), Attack, 1, 1, 0);

    //draw_text_transformed( (x+10), (y+85), "Speed: ", 1, 1, 0);
    //draw_text_transformed( (x+10+50), (y+85), Speed, 1, 1, 0);

    draw_text_transformed( (x+10), (y+70), "Production Rate: ", 1, 1, 0);
    draw_text_transformed( (x+10+110), (y+70), Value, 1, 1, 0);
    
    if( Selected.Type == 8 )
    {
        for (i=0; i &lt; 1; i+=1)
        {
            if( Selected.alarm[i] != (-1) )
            {
                draw_text_transformed( (x+10), (y+85), "Time Remaining: " + string(Selected.alarm[i]/room_speed) + " s", 1, 1, 0);
            }
        }
        
    }
    
}
//indestructible AllBad
else if(Selected.Type == 9)
{
    //draw_text_transformed( (x+10), (y), "Description: ", 1, 1, 0);
    //draw_text_transformed( (x+10+70), (y), Description, 1, 1, 0);
    draw_text_transformed( (x+10), (y+5), Description, 1, 1, 0);

    draw_text_transformed( (x+10), (y+25), "State: ", 1, 1, 0);
    draw_text_transformed( (x+10+50), (y+25), State, 1, 1, 0);

    draw_text_transformed( (x+10), (y+40), "Level: ", 1, 1, 0);
    draw_text_transformed( (x+10+50), (y+40), Level, 1, 1, 0);

    draw_text_transformed( (x+10), (y+55), "Health: ", 1, 1, 0);
    //draw_text_transformed( (x+10+50), (y+55), Health, 1, 1, 0);
    //draw_text_transformed( (x+10+120), (y+55), " / ", 1, 1, 0);
    //draw_text_transformed( (x+10+130), (y+55), MaxHealth, 1, 1, 0);
    draw_text_transformed( (x+10+50), (y+55), "Indestructible", 1, 1, 0);

    //draw_text_transformed( (x+10), (y+70), "Build Strength: ", 1, 1, 0);
    //draw_text_transformed( (x+10+50), (y+70), Attack, 1, 1, 0);

    //draw_text_transformed( (x+10), (y+70), "Speed: ", 1, 1, 0);
    //draw_text_transformed( (x+10+50), (y+70), Speed, 1, 1, 0);

    //draw_text_transformed( (x+10), (y+100), "Value: ", 1, 1, 0);
    //draw_text_transformed( (x+10+50), (y+100), Value, 1, 1, 0);    
}
//Stationary building with attack
else if(Selected.Type == 10 ||
        Selected.Type == 11 ||
        Selected.Type == 12 ||
        Selected.Type == 13 ||
        Selected.Type == 14 ||
        Selected.Type == 15 )
{
    //draw_text_transformed( (x+10), (y), "Description: ", 1, 1, 0);
    //draw_text_transformed( (x+10+70), (y), Description, 1, 1, 0);
    draw_text_transformed( (x+10), (y+5), Description, 1, 1, 0);

    draw_text_transformed( (x+10), (y+25), "State: ", 1, 1, 0);
    draw_text_transformed( (x+10+50), (y+25), State, 1, 1, 0);

    draw_text_transformed( (x+10), (y+40), "Level: ", 1, 1, 0);
    draw_text_transformed( (x+10+50), (y+40), Level, 1, 1, 0);

    draw_text_transformed( (x+10), (y+55), "Health: ", 1, 1, 0);
    //draw_text_transformed( (x+10+50), (y+55), Health, 1, 1, 0);
    //draw_text_transformed( (x+10+120), (y+55), " / ", 1, 1, 0);
    //draw_text_transformed( (x+10+130), (y+55), MaxHealth, 1, 1, 0);
    draw_text_transformed( (x+10+50), (y+55), string(Health) + " / " + string(MaxHealth), 1, 1, 0);

    draw_text_transformed( (x+10), (y+70), "Attack: ", 1, 1, 0);
    draw_text_transformed( (x+10+50), (y+70), Attack, 1, 1, 0);

    //draw_text_transformed( (x+10), (y+85), "Speed: ", 1, 1, 0);
    //draw_text_transformed( (x+10+50), (y+85), Speed, 1, 1, 0);

    //draw_text_transformed( (x+10), (y+85), "Value: ", 1, 1, 0);
    //draw_text_transformed( (x+10+50), (y+85), Value, 1, 1, 0);
    
    if( Selected.Type == 10 )
    {
        for (i=1; i &lt; 7; i+=1)
        {
            if( Selected.alarm[i] != (-1) )
            {
                draw_text_transformed( (x+10), (y+85), "Time Remaining: " + string(Selected.alarm[i]/room_speed) + " s", 1, 1, 0);
            }
        }
        
    }
}
//Resources
else if(Selected.Type == 16 ||
        Selected.Type == 17 ||
        Selected.Type == 18)
{
    //draw_text_transformed( (x+10), (y), "Description: ", 1, 1, 0);
    //draw_text_transformed( (x+10+70), (y), Description, 1, 1, 0);
    draw_text_transformed( (x+10), (y+5), Description, 1, 1, 0);

    draw_text_transformed( (x+10), (y+25), "State: ", 1, 1, 0);
    draw_text_transformed( (x+10+50), (y+25), State, 1, 1, 0);

    draw_text_transformed( (x+10), (y+40), "Level: ", 1, 1, 0);
    draw_text_transformed( (x+10+50), (y+40), Level, 1, 1, 0);

    //draw_text_transformed( (x+10), (y+55), "Health: ", 1, 1, 0);
    //draw_text_transformed( (x+10+50), (y+55), Health, 1, 1, 0);
    //draw_text_transformed( (x+10+120), (y+55), " / ", 1, 1, 0);
    //draw_text_transformed( (x+10+130), (y+55), MaxHealth, 1, 1, 0);
    //draw_text_transformed( (x+10+50), (y+55), string(Health) + " / " + string(MaxHealth), 1, 1, 0);

    //draw_text_transformed( (x+10), (y+70), "Attack: ", 1, 1, 0);
    //draw_text_transformed( (x+10+50), (y+70), Attack, 1, 1, 0);

    //draw_text_transformed( (x+10), (y+85), "Speed: ", 1, 1, 0);
    //draw_text_transformed( (x+10+50), (y+85), Speed, 1, 1, 0);

    draw_text_transformed( (x+10), (y+55), "Value: ", 1, 1, 0);
    draw_text_transformed( (x+10+50), (y+55), Value, 1, 1, 0);
}
//Destructible bad
else if(Selected.Type == 19)
{
    //draw_text_transformed( (x+10), (y), "Description: ", 1, 1, 0);
    //draw_text_transformed( (x+10+70), (y), Description, 1, 1, 0);
    draw_text_transformed( (x+10), (y+5), Description, 1, 1, 0);

    draw_text_transformed( (x+10), (y+25), "State: ", 1, 1, 0);
    draw_text_transformed( (x+10+50), (y+25), State, 1, 1, 0);

    draw_text_transformed( (x+10), (y+40), "Level: ", 1, 1, 0);
    draw_text_transformed( (x+10+50), (y+40), Level, 1, 1, 0);

    draw_text_transformed( (x+10), (y+55), "Health: ", 1, 1, 0);
    //draw_text_transformed( (x+10+50), (y+55), Health, 1, 1, 0);
    //draw_text_transformed( (x+10+120), (y+55), " / ", 1, 1, 0);
    //draw_text_transformed( (x+10+130), (y+55), MaxHealth, 1, 1, 0);
    draw_text_transformed( (x+10+50), (y+55), string(Health) + " / " + string(MaxHealth), 1, 1, 0);

    //draw_text_transformed( (x+10), (y+70), "Attack: ", 1, 1, 0);
    //draw_text_transformed( (x+10+50), (y+70), Attack, 1, 1, 0);

    //draw_text_transformed( (x+10), (y+85), "Speed: ", 1, 1, 0);
    //draw_text_transformed( (x+10+50), (y+85), Speed, 1, 1, 0);

    //draw_text_transformed( (x+10), (y+70), "Value: ", 1, 1, 0);
    //draw_text_transformed( (x+10+50), (y+70), Value, 1, 1, 0);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
