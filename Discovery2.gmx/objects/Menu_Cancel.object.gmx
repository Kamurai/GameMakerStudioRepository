<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Menu_Cancel</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>Menu_Object</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Lock_x = x - Options_Window.x;
Lock_y = y - Options_Window.y;

Active = 0;
Type = 23;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x = Options_Window.x + Lock_x;
y = Options_Window.y + Lock_y;


if( (Controller.Selected) == 0 )
{
    instance_destroy();
}
else if( Options_Window.Load == 1 )
{
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

//Determine Selected Type
    //if HQ Building
if( (Controller.Selected).Type == 4 )
{
    //Check appropriate alarms
        //Cancel Upgrade
    if( (Controller.Selected).alarm[0] != (-1) )
    {    
        //disable active alarm
        (Controller.Selected).alarm[0] = (-1);
    }
    //Cancel Creation of Builder
    else if( (Controller.Selected).alarm[1] != (-1) )
    {    
        //disable active alarm
        (Controller.Selected).alarm[1] = (-1);
    }
    //Cancel Creation of Harvester
    else if( (Controller.Selected).alarm[2] != (-1) )
    {    
        //disable active alarm
        (Controller.Selected).alarm[2] = (-1);
    }

}
//if Fighter Barracks
else if( (Controller.Selected).Type == 5 )
{
    //Check appropriate alarms
        //Cancel Upgrade
    if( (Controller.Selected).alarm[0] != (-1) )
    {    
        //disable active alarm
        (Controller.Selected).alarm[0] = (-1);
    }
    //Cancel Creation of Fighter
    else if( (Controller.Selected).alarm[1] != (-1) )
    {    
        //disable active alarm
        (Controller.Selected).alarm[1] = (-1);
    }
}
//if Fighter Enhancer
else if( (Controller.Selected).Type == 6 )
{
    //Check appropriate alarms
        //Cancel Upgrade
    if( (Controller.Selected).alarm[0] != (-1) )
    {    
        //disable active alarm
        (Controller.Selected).alarm[0] = (-1);
    }
    //Cancel Upgrade of Fighter
    else if( (Controller.Selected).alarm[1] != (-1) )
    {    
        //disable active alarm
        (Controller.Selected).alarm[1] = (-1);
    }
}
//if Fighter Enhancer
else if( (Controller.Selected).Type == 7 )
{
    //Check appropriate alarms
        //Cancel Upgrade
    if( (Controller.Selected).alarm[0] != (-1) )
    {    
        //disable active alarm
        (Controller.Selected).alarm[0] = (-1);
    }
    //Cancel Upgrade of Builder
    else if( (Controller.Selected).alarm[1] != (-1) )
    {    
        //disable active alarm
        (Controller.Selected).alarm[1] = (-1);
    }
    //Cancel Upgrade of Harvester
    else if( (Controller.Selected).alarm[2] != (-1) )
    {    
        //disable active alarm
        (Controller.Selected).alarm[2] = (-1);
    }
}
//if Generator
else if( (Controller.Selected).Type == 8 )
{
    //Check appropriate alarms
        //Cancel Upgrade
    if( (Controller.Selected).alarm[0] != (-1) )
    {    
        //disable active alarm
        (Controller.Selected).alarm[0] = (-1);
    }
 
}
//if Defensive Tower
else if( (Controller.Selected).Type == 10 )
{
    //Check appropriate alarms
        //Cancel Upgrade
    if( (Controller.Selected).alarm[0] != (-1) )
    {    
        //disable active alarm
        (Controller.Selected).alarm[0] = (-1);
    }
    //Cancel UpgradeTo of Long Range Tower
    else if( (Controller.Selected).alarm[1] != (-1) )
    {    
        //disable active alarm
        (Controller.Selected).alarm[1] = (-1);
    }
    //Cancel UpgradeTo of Short Range Tower
    else if( (Controller.Selected).alarm[2] != (-1) )
    {    
        //disable active alarm
        (Controller.Selected).alarm[2] = (-1);
    }
    //Cancel UpgradeTo of Short Range Blast Tower
    else if( (Controller.Selected).alarm[3] != (-1) )
    {    
        //disable active alarm
        (Controller.Selected).alarm[3] = (-1);
    }
    //Cancel UpgradeTo of Inferno Tower
    else if( (Controller.Selected).alarm[4] != (-1) )
    {    
        //disable active alarm
        (Controller.Selected).alarm[4] = (-1);
    }
    //Cancel UpgradeTo of Healing Tower
    else if( (Controller.Selected).alarm[5] != (-1) )
    {    
        //disable active alarm
        (Controller.Selected).alarm[5] = (-1);
    } 
}
//if Long Range Tower
else if( (Controller.Selected).Type == 11 )
{
    //Check appropriate alarms
        //Cancel Upgrade
    if( (Controller.Selected).alarm[0] != (-1) )
    {    
        //disable active alarm
        (Controller.Selected).alarm[0] = (-1);
    }
}
//if Short Range Tower
else if( (Controller.Selected).Type == 12 )
{
    //Check appropriate alarms
        //Cancel Upgrade
    if( (Controller.Selected).alarm[0] != (-1) )
    {    
        //disable active alarm
        (Controller.Selected).alarm[0] = (-1);
    }
}
//if Short Range Blast Tower
else if( (Controller.Selected).Type == 13 )
{
    //Check appropriate alarms
        //Cancel Upgrade
    if( (Controller.Selected).alarm[0] != (-1) )
    {    
        //disable active alarm
        (Controller.Selected).alarm[0] = (-1);
    }
}
//if Inferno Tower
else if( (Controller.Selected).Type == 14 )
{
    //Check appropriate alarms
        //Cancel Upgrade
    if( (Controller.Selected).alarm[0] != (-1) )
    {    
        //disable active alarm
        (Controller.Selected).alarm[0] = (-1);
    }
}
//if Healing Tower
else if( (Controller.Selected).Type == 15 )
{
    //Check appropriate alarms
        //Cancel Upgrade
    if( (Controller.Selected).alarm[0] != (-1) )
    {    
        //disable active alarm
        (Controller.Selected).alarm[0] = (-1);
    }
}

if( (Controller.Selected).State == 5 || (Controller.Selected).State == 7 )
{
    (Controller.Selected).State = 0;
}

instance_destroy();

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
