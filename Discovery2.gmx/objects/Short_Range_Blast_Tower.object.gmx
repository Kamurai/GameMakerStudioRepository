<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_SRB_Tower6</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>Building</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Destination_x = x;
Destination_y = y;

//determine object type
Type = 13;
Level = Controller.CurrentLevel[Type];


Selectable = 0;
State = 0;

Description = "Short Range Blast Tower.";

Health = Info.unithealth[Type, Level];
Attack = Info.attack[Type, Level];
Speed = Info.unitspeed[Type, Level];
Value = Info.value[Type, Level];

VISION_RADIUS = Info.Range[2]; //Used in obj_fog_controller to remove the fog
DRAW_FOG = 0 //if true (1), then this object will be drawn beneath the gray fog.
SHOW_VISION = 1 //if false, then the fog around the object will not be removed.
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if( Controller.Destination_x == x &amp;&amp; Controller.Destination_y == y )
{
    Options_Window.Load = 1;
    Controller.Selected = id;
    Controller.Destination_x = 0;
    Controller.Destination_y = 0;
    Selectable = 1;
    image_alpha = .5;
    instance_create(x, y, Frame);
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//if there is a Target AND Target is in range
if( distance_to_object(AllBad) &lt; Info.Range[1] &amp;&amp; instance_number(AllBad) &gt; 0 )
{
        Target = (instance_nearest(x, y, AllBad));
        //remove target if it is indestructible
            //this may cause the tower not to fire if placed to close to an indestructable
        if( (Target).Type == 9 ) 
        {
            Target = 0;
        }
        State = 4;
}
else
{
        Target = 0;
        State = 0;
}

//if there is an available Target
if( Target != 0 )
{    
     Controller.Pass = Attack;
        instance_create(x, y, Ammunition);
        instance_create( (Target).x, (Target).y, Blast );
        alarm[1] = room_speed;
        
        
}
else
{
    State = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if Selected Building's state is "Generating Unit"
if( State == 5 )
{
    
    //instance_create(x, (sprite_height/2)+y+8, Builder);

    
    if( Controller.CurrentLevel[(Controller.Selected).Type] &lt; 10 )
    {    
        Controller.CurrentLevel[(Controller.Selected).Type] = Controller.CurrentLevel[(Controller.Selected).Type] + 1;
        
        //Update stats
        Level = Controller.CurrentLevel[Type];     
        Attack = Info.attack[Type, Level];
        //Speed = Info.unitspeed[Type, Level];
    
        //Health increases by the difference in level and previous level    
        Health = Health + (Info.unithealth[Type, Level] - Info.unithealth[Type, (Level - 1) ]  );
    
    }
    
    
    alarm[0] = -1;
    State = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>



if( Controller.Selected == 0 )
{
    //if selected
    if( Selectable == 1 )
    {
        Controller.Selected = id;
    }   
}

//if state is "pre-built"
if( State == 9 )
{
    //lock coordinates
    x = mouse_x;
    y = mouse_y;
}
//if state is "UnderConstruction"
else if( State == 6 )
{
    solid = 1;    
}
else if( State == 0 )
{
    //find nearest AllBad in aggro range
        //set destination to the NEAREST
            //if Attacker is "Ready" or "Moving"
            //AND AllBads exist
    if( distance_to_object(AllBad) &lt; Info.Range[1] &amp;&amp; instance_number(AllBad) &gt; 0 )
    {
        Target = (instance_nearest(x, y, AllBad));
        if( (Target).Type == 9 ) 
        {
            Target = 0;
        }
        State = 4;
    }
    else
    {
        Target = 0;
    }
}

//if "attacking" AND has a Target AND attacker is NOT being told to move away
if( State == 4 &amp;&amp; Target != 0 )
{
    //if alarm is not active
    if( alarm[1] == (-1) )
    {
        //instance_create(x, y, Ammunition);
        //set alarm
            //for 1 sec or room_speed steps
        alarm[1] = room_speed;
    }
    
    
}
else if( State == 4 &amp;&amp; Target == 0 )
{
    alarm[1] = -1;
    State = 0;
}


if( State == 8 || Health == 0 )
{
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
