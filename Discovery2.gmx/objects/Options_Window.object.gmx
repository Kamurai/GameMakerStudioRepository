<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-3</depth>
  <persistent>0</persistent>
  <parentName>Interface_Object</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Load = 0;
Target = 0;

//width of view - minimap's width and information window's width
    //
Width = view_wview[0] - Mini_Map.Width - Information_Window.Width;
Height = Information_Window.Height;

Offset_x = Information_Window.Offset_x + Information_Window.Width;
Offset_y = Information_Window.Offset_y;




Border = 10;

//assuming a 10 pixel border
//vertical: 158 pixels - 20 (top and bottom)
//138 available for buttons
//34.5 pixels tall for four rows
Vset = 34;

//assuming a 10 pixel border
//horizontal: 362 pixels - 20 (left and right)
//342 available for buttons
//114 pixels wide for three columns
Hset = (Width - (2*Border))/3;


instance_create(x+Border+(2*Hset), y+Border+(3*Vset), Menu_Exit);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if cursor is not meeting a button
//if( place_meeting(mouse_x, mouse_y, Menu_Object) == 0 )
if( (mouse_x &lt; x) || (mouse_y &lt; y)  )
{
    Display.CurrentWood = 0;
    Display.CurrentOre = 0;
    Display.CurrentEssence = 0;
    Display.CurrentEnergy = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//x = view_xview[0] + 260;
x = view_xview[0] + Offset_x;

y = view_yview[0] + Offset_y;

//assuming a 10 pixel border
//vertical: 158 pixels - 20 (top and bottom)
//138 available for buttons
//34 pixels tall for four rows

//assuming a 10 pixel border
//horizontal: 420 pixels - 20 (left and right)
//400 available for buttons
//133 pixels wide for three columns

if( Load == 1 )
{
    //Builder
    if( Target.Type == 0 )
    {
        //row 1
        instance_create(x+Border, y+Border, Menu_Move);
        instance_create((x+Border+(Hset)), y+Border, Menu_Repair);
        instance_create((x+Border+(2*Hset)), y+Border, Menu_Build_HQ_Building);
        //row 2
        instance_create((x+Border), (y+Border+(Vset)), Menu_Build_Fighter_Barracks);
        instance_create((x+Border+(Hset)), (y+Border+(Vset)), Menu_Build_Fighter_Enhancer);
        instance_create((x+Border+(2*Hset)), (y+Border+(Vset)), Menu_Build_Worker_Enhancer);
        //row 3
        instance_create((x+Border), (y+Border+2*(Vset)), Menu_Build_Defensive_Tower);
        instance_create((x+Border+(Hset)), (y+Border+(2*Vset)), Menu_Build_Generator);
        instance_create((x+Border+(2*Hset)), (y+Border+(2*Vset)), Menu_Destroy);

    }
    //Harvester
    else if( Target.Type == 1 )
    {
        //row 1
        instance_create(x+Border, y+Border, Menu_Move);
        instance_create((x+Border+(Hset)), y+Border, Menu_Harvest);
        instance_create((x+Border+(2*Hset)), y+Border, Menu_Destroy);    
    }
    //Fighter
    else if( Target.Type == 2 )
    {
        //row 1
        instance_create(x+Border, y+Border, Menu_Move);
        instance_create((x+Border+(Hset)), y+Border, Menu_Attack);
        instance_create((x+Border+(2*Hset)), y+Border, Menu_Destroy);
    }
    //Monster
    else if( Target.Type == 3 )
    {
        //N/A for monsters
    }
    //HQ_Building
    else if( Target.Type == 4 )
    {
        //row 1
        instance_create((x+Border), y+Border, Menu_Create_Builder);        
        instance_create((x+Border+(Hset)), y+Border, Menu_Create_Harvester);
        instance_create((x+Border+(2*Hset)), y+Border, Menu_Upgrade);
        //row 2
        instance_create((x+Border), (y+Border+(Vset)), Menu_Destroy);      
    }
    //Fighter_Barracks
    else if( Target.Type == 5 )
    {
        //row 1
        instance_create((x+Border), y+Border, Menu_Create_Fighter);        
        instance_create((x+Border+(Hset)), y+Border, Menu_Upgrade);
        instance_create((x+Border+(2*Hset)), y+Border, Menu_Destroy);
    }
    //Fighter_Enhancer
    else if( Target.Type == 6 )
    {
        //row 1
        instance_create((x+Border), y+Border, Menu_Upgrade_Fighter);        
        instance_create((x+Border+(Hset)), y+Border, Menu_Upgrade);
        instance_create((x+Border+(2*Hset)), y+Border, Menu_Destroy);
    }
    //Worker_Enhancer
    else if( Target.Type == 7 )
    {
        //row 1
        instance_create((x+Border), y+Border, Menu_Upgrade_Builder);        
        instance_create((x+Border+(Hset)), y+Border, Menu_Upgrade_Harvester);
        instance_create((x+Border+(2*Hset)), y+Border, Menu_Upgrade);
        //row 2
        instance_create((x+Border), (y+Border+(Vset)), Menu_Destroy);
    }
    //Generator
    else if( Target.Type == 8 )
    {
        //row 1
        instance_create((x+Border), y+Border, Menu_Upgrade);
        instance_create((x+Border+(Hset)), y+Border, Menu_Destroy);
    }
    //Monster_Maker_i
    else if( Target.Type == 9 )
    {
        //N/A for Indestrucible monster makers
    }
    //Defensive_Tower
    else if( Target.Type == 10 )
    {
        //row 1
        instance_create((x+Border), y+Border, Menu_Attack);
        instance_create((x+Border+(Hset)), y+Border, Menu_UpgradeTo_Long_Range_Tower);
        instance_create((x+Border+(2*Hset)), y+Border, Menu_UpgradeTo_Short_Range_Tower);
        //row 2
        instance_create((x+Border), (y+Border+(Vset)), Menu_UpgradeTo_Short_Range_Blast_Tower);
        instance_create((x+Border+(Hset)), (y+Border+(Vset)), Menu_UpgradeTo_Inferno_Tower);
        instance_create((x+Border+(2*Hset)), (y+Border+(Vset)), Menu_UpgradeTo_Healing_Tower);
        //row 3
        instance_create((x+Border), (y+Border+(2*Vset)), Menu_Upgrade);
        instance_create((x+Border+(Hset)), (y+Border+(2*Vset)), Menu_Destroy);
    }
    //Long_Range_Tower
    else if( Target.Type == 11 )
    {
        //row 1
        instance_create((x+Border), y+Border, Menu_Attack);        
        instance_create((x+Border+(Hset)), y+Border, Menu_Upgrade);
        instance_create((x+Border+(2*Hset)), y+Border, Menu_Destroy);
    }
    //Short_Range_Tower
    else if( Target.Type == 12 )
    {
        //row 1
        instance_create((x+Border), y+Border, Menu_Attack);        
        instance_create((x+Border+(Hset)), y+Border, Menu_Upgrade);
        instance_create((x+Border+(2*Hset)), y+Border, Menu_Destroy);
    }
    //Short_Range_Blast_Tower
    else if( Target.Type == 13 )
    {
        //row 1
        instance_create((x+Border), y+Border, Menu_Attack);        
        instance_create((x+Border+(Hset)), y+Border, Menu_Upgrade);
        instance_create((x+Border+(2*Hset)), y+Border, Menu_Destroy);
    }
    //Inferno_Tower
    else if( Target.Type == 14 )
    {
        //row 1
        instance_create((x+Border), y+Border, Menu_Upgrade);
        instance_create((x+Border+(Hset)), y+Border, Menu_Destroy);
    }
    //Healing_Tower
    else if( Target.Type == 15 )
    {
        //row 1
        instance_create((x+Border), y+Border, Menu_Upgrade);
        instance_create((x+Border+(Hset)), y+Border, Menu_Destroy);
    }
    //Woods
    else if( Target.Type == 16 )
    {
        //N/A for Woods
    }
    //Mine
    else if( Target.Type == 17 )
    {
        //N/A for Mines
    }
    //Rift
    else if( Target.Type == 18 )
    {
        //N/A for Rifts
    }
    //Monster_Maker_d
    else if( Target.Type == 19 )
    {
        //N/A for Destructible monster makers
    }    

    //if Target's State is "Upgrading" or "Generating Unit"
    if( (Target).State == 5 || (Target).State == 7)
    {
        //create cancellation button
        instance_create( (x+Border), (y+Border+(3*Vset)), Menu_Cancel);
    }

    
    
    Load = 0;
}

if( Target != Controller.Selected )
{
    Target = Controller.Selected;
    Load = 1;    
}

if( Target = 0 )
{
    //Controller.Command = 0;
    //Controller.Option = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//draw border
//draw_set_color(c_black);
//draw_rectangle((x), (y), (x+220), (y+80), 1);
//draw_rectangle((x), (y), (x+Width), (y+Height), 1);

//draw background
//draw_set_color(c_maroon);
//draw_rectangle((x), (y), (x+220), (y+80), 0);
//draw_rectangle((x), (y), (x+Width), (y+Height), 0);

draw_background(bkgd_Options_Window, x, y);
//draw_sprite(spr_Options_Window, -1, x, y);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
