<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>Interface_Object</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>CurrentWood = 0;
CurrentOre = 0;
CurrentEssence = 0;
CurrentEnergy = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if( Controller.hold == 1 &amp;&amp; (mouse_y &lt; view_yview[0] + Controller.Interface_Offset))
{
    draw_set_color(c_fuchsia);
    draw_rectangle(Controller.mousx, Controller.mousy, mouse_x, mouse_y, 1);
}

//draw display backgrounds
draw_set_color(c_gray);
//top right
draw_rectangle(view_xview[0]+208+350, view_yview[0], view_xview[0]+208+220+270, view_yview[0]+22, 0);


//top left
//draw_rectangle(view_xview[0], view_yview[0], view_xview[0]+130, view_yview[0]+88, 0);
//2nd top left
//draw_rectangle(view_xview[0]+130, view_yview[0], view_xview[0]+130+70, view_yview[0]+88, 0);

draw_background(bkgd_Master_Resource, view_xview[0], view_yview[0]);

//draw display borders
draw_set_color(c_black);
//top right
draw_rectangle(view_xview[0]+8+550, view_yview[0], view_xview[0]+8+200+220+270, view_yview[0]+22, 1);
//top left
draw_rectangle(view_xview[0], view_yview[0], view_xview[0]+130, view_yview[0]+88, 1);
//2nd top left
draw_rectangle(view_xview[0]+130, view_yview[0], view_xview[0]+130+70, view_yview[0]+88, 1);


draw_set_color(c_white);

//"animate" resources in top-left
draw_text(view_xview[0], view_yview[0], "Wood:");
draw_text(view_xview[0], view_yview[0]+22, "Ore:");
draw_text(view_xview[0], view_yview[0]+44, "Essence:");
draw_text(view_xview[0], view_yview[0]+66, "Energy:");


draw_text(view_xview[0]+70, view_yview[0], Controller.masterWood);
draw_text(view_xview[0]+70, view_yview[0]+22, Controller.masterOre);
draw_text(view_xview[0]+70, view_yview[0]+44, Controller.masterEssence);
draw_text(view_xview[0]+70, view_yview[0]+66, Controller.masterEnergy);

//2nd top left (selected costs)
    draw_text(view_xview[0]+70+70, view_yview[0], CurrentWood);
    draw_text(view_xview[0]+70+70, view_yview[0]+22, CurrentOre);
    draw_text(view_xview[0]+70+70, view_yview[0]+44, CurrentEssence);
    draw_text(view_xview[0]+70+70, view_yview[0]+66, CurrentEnergy);






//"animate" clock in top-right
draw_text(view_xview[0]+208+210+155, view_yview[0], "Clock: ");
draw_text(view_xview[0]+208+210+205, view_yview[0], Clock.hours);

draw_text(view_xview[0]+208+210+215, view_yview[0], ":");
draw_text(view_xview[0]+208+210+220, view_yview[0], Clock.minutes);

draw_text(view_xview[0]+208+210+240, view_yview[0], ":");
draw_text(view_xview[0]+208+210+245, view_yview[0], Clock.seconds);

/*
if( Controller.hold == 1 )
{
    draw_set_color(c_fuchsia);
    draw_rectangle(Controller.mousx, Controller.mousy, mouse_x, mouse_y, 1);
}

//draw display backgrounds
draw_set_color(c_gray);
//top right
draw_rectangle(view_xview[0]+350, view_yview[0], view_xview[0]+220+270, view_yview[0]+22, 0);
//top left
draw_rectangle(view_xview[0], view_yview[0], view_xview[0]+130, view_yview[0]+88, 0);

//draw display borders
draw_set_color(c_black);
//top right
draw_rectangle(view_xview[0]+350, view_yview[0], view_xview[0]+220+270, view_yview[0]+22, 1);
//top left
draw_rectangle(view_xview[0], view_yview[0], view_xview[0]+130, view_yview[0]+88, 1);


//"animate" resources in top-left
draw_text(view_xview[0], view_yview[0], "Wood:");
draw_text(view_xview[0], view_yview[0]+22, "Ore:");
draw_text(view_xview[0], view_yview[0]+44, "Essence:");
draw_text(view_xview[0], view_yview[0]+66, "Energy:");


draw_text(view_xview[0]+70, view_yview[0], Controller.masterWood);
draw_text(view_xview[0]+70, view_yview[0]+22, Controller.masterOre);
draw_text(view_xview[0]+70, view_yview[0]+44, Controller.masterEssence);
draw_text(view_xview[0]+70, view_yview[0]+66, Controller.masterEnergy);



//"animate" clock in top-right
draw_text(view_xview[0]+210+155, view_yview[0], "Clock: ");
draw_text(view_xview[0]+210+205, view_yview[0], Clock.hours);

draw_text(view_xview[0]+210+215, view_yview[0], ":");
draw_text(view_xview[0]+210+220, view_yview[0], Clock.minutes);

draw_text(view_xview[0]+210+240, view_yview[0], ":");
draw_text(view_xview[0]+210+245, view_yview[0], Clock.seconds);
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
