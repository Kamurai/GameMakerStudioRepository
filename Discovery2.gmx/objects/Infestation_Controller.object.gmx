<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>Interface_Object</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//infestation period
    //in seconds
        //10 minutes
/*
Under original numbers 18 minutes would evenly distribute across 3 hours.
*/
Period = room_speed * 600;
alarm[0] = Period;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//upgrade all Enemies 1 level up to current level of HQ_Building


//AllBad
    //Baddy

    //upgrade Baddy Current levels
        //Monster
            //if Monster is upgradeable
    if( Controller.CurrentLevel[3] &lt; 10 )
    {
        //if Baddy level is equal to Current level (assumed true)
            //upgrade Current level   
        Controller.CurrentLevel[3] = Controller.CurrentLevel[3] + 1;
    }
    
    //upgrade actual Monsters
        //for each Monster
    with( Monster )
    {
        //if upgradeable
        if( Level &lt; 10 )
        {
            Level = Level + 1;
            
            Attack = Info.attack[Type, Level];
            Speed = Info.unitspeed[Type, Level];
    
            //Health increases by the difference in level and previous level    
            Health = Health + (Info.unithealth[Type, Level] - Info.unithealth[Type, (Level - 1) ]  );
        }
    }
    
//Bad

    //upgrade Bad Current levels
        //Monster Maker Indestructible
            //if Monster Maker Indestructible is upgradeable
    if( Controller.CurrentLevel[9] &lt; 10 )
    {
        //if Bad level is equal to Current level (assumed true)
            //upgrade Current level   
        Controller.CurrentLevel[9] = Controller.CurrentLevel[9] + 1;
    }
   
    //Monster Maker Destructible
        //if Monster Maker Destructible is upgradeable
    if( Controller.CurrentLevel[19] &lt; 10 )
    {
        //if Bad level is equal to Current level (assumed true)
            //upgrade Current level   
        Controller.CurrentLevel[19] = Controller.CurrentLevel[19] + 1;
    }
      
    //upgrade actual Monster Maker Indestructibles
        //for each Monster Maker Indestructible
    with( Monster_Maker_i )
    {
        //if upgradeable
        if( Level &lt; 10 )
        {
            Level = Level + 1;
            
            //Attack = Info.attack[Type, Level];
            //Speed = Info.unitspeed[Type, Level];
    
            //Health increases by the difference in level and previous level    
            //Health = Health + (Info.unithealth[Type, Level] - Info.unithealth[Type, (Level - 1) ]  );
            
            if( (room_speed * Info.buildtime[3, Controller.CurrentLevel[3]]) &lt; alarm[0] )
            {
                alarm[0] = room_speed * Info.buildtime[3, Controller.CurrentLevel[3]];
            }
        }
    }  
            
    //upgrade actual Monster Maker Destructibles
        //for each Monster Maker Destructible
    with( Monster_Maker_d )
    {
        //if upgradeable
        if( Level &lt; 10 )
        {
            Level = Level + 1;
            
            //Attack = Info.attack[Type, Level];
            //Speed = Info.unitspeed[Type, Level];
    
            //Health increases by the difference in level and previous level    
            Health = Health + (Info.unithealth[Type, Level] - Info.unithealth[Type, (Level - 1) ]  );
            
            if( (room_speed * Info.buildtime[3, Controller.CurrentLevel[3]]) &lt; alarm[0] )
            {
                alarm[0] = room_speed * Info.buildtime[3, Controller.CurrentLevel[3]];
            }
        }
    }
    
    
    
alarm[0] = Period;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
