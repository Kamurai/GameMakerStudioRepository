<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_HQ_Building</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>Building</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Destination_x = x;
Destination_y = y+(sprite_height/2)+(16);

//determine object type
Type = 4;
Level = Controller.CurrentLevel[Type];

alarm[0] = -1;
alarm[1] = -1;
alarm[2] = -1;

Selectable = 0;
State = 0;

Description = "HQ Building.";

Health = Info.unithealth[Type, Level];
Attack = Info.attack[Type, Level];
Speed = Info.unitspeed[Type, Level];
Value = Info.value[Type, Level];

Target = 0;


VISION_RADIUS = Info.Range[3]; //Used in obj_fog_controller to remove the fog
DRAW_FOG = 0 //if true (1), then this object will be drawn beneath the gray fog.
SHOW_VISION = 1 //if false, then the fog around the object will not be removed.

//Building a Building
if( !(Clock.realseconds == 0 &amp;&amp; Clock.time &lt;= 1) )
{
    Health = 1;
    //Change State to "Pre-Built"
    State = 9;
    image_alpha = .5;
    solid = 0;
    
    
    VISION_RADIUS = 0//200 //Used in obj_fog_controller to remove the fog
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if Selected Building's state is "Generating Unit"
if( State == 7 )
{
    //instance_create((Controller.Selected).x, ((Controller.Selected).sprite_height/2)+(Controller.Selected).y+8, Builder);    
    
    instance_create(Destination_x, Destination_y, Harvester);
    alarm[2] = -1;
    State = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if Selected Building's state is "Generating Unit"
if( State == 7 )
{
    //instance_create((Controller.Selected).x, ((Controller.Selected).sprite_height/2)+(Controller.Selected).y+8, Builder);    
    
    instance_create(Destination_x, Destination_y, Builder);
    alarm[1] = -1;
    State = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if Selected Building's state is "Upgrading"
if( State == 5 )
{
    
    //upgrade HQ Building Current Level
        //if HQ Building level is upgradeable
    if( Controller.CurrentLevel[4] &lt; 10 )
    {
        //if Building level is equal to Current level
        if( Level == Controller.CurrentLevel[4] )
        {
            //upgrade Current level   
            Controller.CurrentLevel[4] = Controller.CurrentLevel[4] + 1;
        }
        
        //if upgrading HQ Building current level to level 5
        if( Controller.CurrentLevel[(Controller.Selected).Type] == 5 )
        {
            //Modify Generator's Current Level to 5
            Controller.CurrentLevel[8] = 5;   
        }
    }
    
    //upgrade HQ Building itself
        //if HQ Building level is upgradeable
    if( Level &lt; 10 )
    {
        Level = Level + 1;
        
        //Attack = Info.attack[Type, Level];
        //Speed = Info.unitspeed[Type, Level];
    
        //Health increases by the difference in level and previous level    
        Health = Health + (Info.unithealth[Type, Level] - Info.unithealth[Type, (Level - 1) ]  );
    }   
        
    
//AllBad
    //Baddy

    //upgrade Baddy Current levels
        //Monster
            //if Monster is upgradeable
    if( Controller.CurrentLevel[3] &lt; 10 )
    {
        //if Baddy level is equal to Current level (assumed true)
            //upgrade Current level   
        Controller.CurrentLevel[3] = Controller.CurrentLevel[3] + 1;
    }
    
    //upgrade actual Monsters
        //for each Monster
    with( Monster )
    {
        //if upgradeable
        if( Level &lt; 10 &amp;&amp; Controller.CurrentLevel[Type] &lt; Controller.CurrentLevel[4] )
        {
            Level = Level + 1;
            
            Attack = Info.attack[Type, Level];
            Speed = Info.unitspeed[Type, Level];
    
            //Health increases by the difference in level and previous level    
            Health = Health + (Info.unithealth[Type, Level] - Info.unithealth[Type, (Level - 1) ]  );
        }
    }
    
//Bad

    //upgrade Bad Current levels
        //Monster Maker Indestructible
            //if Monster Maker Indestructible is upgradeable
    if( Controller.CurrentLevel[9] &lt; 10 )
    {
        //if Bad level is equal to Current level (assumed true)
            //upgrade Current level   
        Controller.CurrentLevel[9] = Controller.CurrentLevel[9] + 1;
    }
   
    //Monster Maker Destructible
        //if Monster Maker Destructible is upgradeable
    if( Controller.CurrentLevel[19] &lt; 10 )
    {
        //if Bad level is equal to Current level (assumed true)
            //upgrade Current level   
        Controller.CurrentLevel[19] = Controller.CurrentLevel[19] + 1;
    }
        
            
    //upgrade actual Monster Maker Indestructibles
        //for each Monster Maker Indestructible
    with( Monster_Maker_i )
    {    
        //if upgradeable
        if( Level &lt; 10 &amp;&amp; Controller.CurrentLevel[Type] &lt; Controller.CurrentLevel[4] )
        {
            Level = Level + 1;
            
            //Attack = Info.attack[Type, Level];
            //Speed = Info.unitspeed[Type, Level];
    
            //Health increases by the difference in level and previous level    
            //Health = Health + (Info.unithealth[Type, Level] - Info.unithealth[Type, (Level - 1) ]  );
            
            if( (room_speed * Info.buildtime[3, Controller.CurrentLevel[3]]) &lt; alarm[0] )
            {
                alarm[0] = room_speed * Info.buildtime[3, Controller.CurrentLevel[3]];
            }
        }
    }
    
    //upgrade actual Monster Maker Destructibles
        //for each Monster Maker Destructible
    with( Monster_Maker_d )
    {
        //if upgradeable
        if( Level &lt; 10 &amp;&amp; Controller.CurrentLevel[Type] &lt; Controller.CurrentLevel[4] )
        {
            Level = Level + 1;
            
            //Attack = Info.attack[Type, Level];
            //Speed = Info.unitspeed[Type, Level];
    
            //Health increases by the difference in level and previous level    
            Health = Health + (Info.unithealth[Type, Level] - Info.unithealth[Type, (Level - 1) ]  );
            
            if( (room_speed * Info.buildtime[3, Controller.CurrentLevel[3]]) &lt; alarm[0] )
            {
                alarm[0] = room_speed * Info.buildtime[3, Controller.CurrentLevel[3]];
            }
        }
    }
    
//Infestation

    //reset Infestation Controller wait time
    Infestation_Controller.alarm[0] = Infestation_Controller.Period;
    
//Resources
    
    //upgrade Woods Current Level
        //if Woods level is upgradeable
    if( Controller.CurrentLevel[16] &lt; 10 )
    {
        //if Resource level is equal to Current level (assumed true)
            //upgrade Current level   
        Controller.CurrentLevel[16] = Controller.CurrentLevel[16] + 1;
    }
    //upgrade Mine Current Level
        //if Mine level is upgradeable
    if( Controller.CurrentLevel[17] &lt; 10 )
    {
        //if Resource level is equal to Current level (assumed true)
            //upgrade Current level   
        Controller.CurrentLevel[17] = Controller.CurrentLevel[17] + 1;
    }
    //upgrade Woods Current Level
        //if Woods level is upgradeable
    if( Controller.CurrentLevel[18] &lt; 10 )
    {
        //if Resource level is equal to Current level (assumed true)
            //upgrade Current level   
        Controller.CurrentLevel[18] = Controller.CurrentLevel[18] + 1;
    }
        
    //upgrade all actual Resources 1 level up to current level of HQ_Building
    with( Resource )
    {
        //if upgradeable
        if( Level &lt; 10 &amp;&amp; Controller.CurrentLevel[Type] &lt; Controller.CurrentLevel[4] )
        {
            Level = Level + 1;
            
            //adjust value
            //Value increases by the difference in level and previous level    
            Value = Value + (Info.value[Type, Level] - Info.value[Type, (Level - 1) ]  );
        }
    }
    
    
    alarm[0] = -1;
    State = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>





//if state is "pre-built"
if( State == 9 )
{
    //lock coordinates
    x = mouse_x;
    y = mouse_y;
}
//if state is "UnderConstruction"
else if( State == 6 )
{
    solid = 1;
    
    //if Building is complete
    if( Building.Health == Info.unithealth[ Type, Controller.CurrentLevel[Type] ] )
    {
        //"Ready" Building
        State = 0;
    }

}

if( State == 8 || Health == 0 )
{
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
