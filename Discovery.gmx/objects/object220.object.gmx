<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>HQ_Building.Level = 2;

Controller.CurrentLevel[4] = 10//2;

Controller.CurrentLevel[10] = 10;

//Period = room_speed * 3;
//alarm[0] = Period;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//upgrade all Units a level at the designated Period (set in alarm)


//Friendly
    //Unit

    //upgrade Unit Current levels
        //Builder
            //if Builder is upgradeable
    if( Controller.CurrentLevel[0] &lt; 10 )
    {
        //if Unit level is equal to Current level (assumed true)
            //upgrade Current level   
        Controller.CurrentLevel[0] = Controller.CurrentLevel[0] + 1;
    }
    
    //upgrade actual Builders
        //for each Builders
    with( Builder )
    {
        //if upgradeable
        if( Level &lt; 10 )
        {
            Level = Level + 1;
            
            Attack = Info.attack[Type, Level];
            Speed = Info.unitspeed[Type, Level];
    
            //Health increases by the difference in level and previous level    
            Health = Health + (Info.unithealth[Type, Level] - Info.unithealth[Type, (Level - 1) ]  );
        }
    }
    
    //upgrade Unit Current levels
        //Harvester
            //if Harvester is upgradeable
    if( Controller.CurrentLevel[1] &lt; 10 )
    {
        //if Unit level is equal to Current level (assumed true)
            //upgrade Current level   
        Controller.CurrentLevel[1] = Controller.CurrentLevel[1] + 1;
    }
    
    //upgrade actual Harvesters
        //for each Harvesters
    with( Harvester )
    {
        //if upgradeable
        if( Level &lt; 10 )
        {
            Level = Level + 1;
            
            Attack = Info.attack[Type, Level];
            Speed = Info.unitspeed[Type, Level];
    
            //Health increases by the difference in level and previous level    
            Health = Health + (Info.unithealth[Type, Level] - Info.unithealth[Type, (Level - 1) ]  );
        }
    }
    
    //upgrade Unit Current levels
        //Fighter
            //if Fighter is upgradeable
    if( Controller.CurrentLevel[2] &lt; 10 )
    {
        //if Unit level is equal to Current level (assumed true)
            //upgrade Current level   
        Controller.CurrentLevel[2] = Controller.CurrentLevel[2] + 1;
    }
    
    //upgrade actual Fighters
        //for each Fighters
    with( Fighter )
    {
        //if upgradeable
        if( Level &lt; 10 )
        {
            Level = Level + 1;
            
            Attack = Info.attack[Type, Level];
            Speed = Info.unitspeed[Type, Level];
    
            //Health increases by the difference in level and previous level    
            Health = Health + (Info.unithealth[Type, Level] - Info.unithealth[Type, (Level - 1) ]  );
        }
    }
    
//Buildings

    //upgrade Building Current levels
        //HQ Building
            //if HQ Building is upgradeable
    if( Controller.CurrentLevel[4] &lt; 10 )
    {
        //if Building level is equal to Current level (assumed true)
            //upgrade Current level   
        Controller.CurrentLevel[4] = Controller.CurrentLevel[4] + 1;
    }
   
    //upgrade actual HQ Building
        //for each HQ Building
    with( HQ_Building )
    {
        //if upgradeable
        if( Level &lt; 10 )
        {
            Level = Level + 1;
            
            //Attack = Info.attack[Type, Level];
            //Speed = Info.unitspeed[Type, Level];
    
            //Health increases by the difference in level and previous level    
            Health = Health + (Info.unithealth[Type, Level] - Info.unithealth[Type, (Level - 1) ]  );
            
            
        }
    }
     
    //Fighter_Barracks
        //if Fighter_Barracks is upgradeable
    if( Controller.CurrentLevel[5] &lt; 10 )
    {
        //if Building level is equal to Current level (assumed true)
            //upgrade Current level   
        Controller.CurrentLevel[5] = Controller.CurrentLevel[4] + 1;
    }
   
    //upgrade actual Fighter_Barracks
        //for each Fighter_Barracks
    with( Fighter_Barracks )
    {
        //if upgradeable
        if( Level &lt; 10 )
        {
            Level = Level + 1;
            
            //Attack = Info.attack[Type, Level];
            //Speed = Info.unitspeed[Type, Level];
    
            //Health increases by the difference in level and previous level    
            Health = Health + (Info.unithealth[Type, Level] - Info.unithealth[Type, (Level - 1) ]  );
            
            
        }
    } 
    
    //Fighter_Enhancer
        //if Fighter_Enhancer is upgradeable
    if( Controller.CurrentLevel[6] &lt; 10 )
    {
        //if Building level is equal to Current level (assumed true)
            //upgrade Current level   
        Controller.CurrentLevel[6] = Controller.CurrentLevel[6] + 1;
    }
   
    //upgrade actual Fighter_Enhancer
        //for each Fighter_Enhancer
    with( Fighter_Enhancer )
    {
        //if upgradeable
        if( Level &lt; 10 )
        {
            Level = Level + 1;
            
            //Attack = Info.attack[Type, Level];
            //Speed = Info.unitspeed[Type, Level];
    
            //Health increases by the difference in level and previous level    
            Health = Health + (Info.unithealth[Type, Level] - Info.unithealth[Type, (Level - 1) ]  );
            
            
        }
    } 
    
    //Worker_Enhancer
        //if Worker_Enhancer is upgradeable
    if( Controller.CurrentLevel[7] &lt; 10 )
    {
        //if Building level is equal to Current level (assumed true)
            //upgrade Current level   
        Controller.CurrentLevel[7] = Controller.CurrentLevel[7] + 1;
    }
   
    //upgrade actual Worker_Enhancer
        //for each Worker_Enhancer
    with( Worker_Enhancer )
    {
        //if upgradeable
        if( Level &lt; 10 )
        {
            Level = Level + 1;
            
            //Attack = Info.attack[Type, Level];
            //Speed = Info.unitspeed[Type, Level];
    
            //Health increases by the difference in level and previous level    
            Health = Health + (Info.unithealth[Type, Level] - Info.unithealth[Type, (Level - 1) ]  );
            
            
        }
    } 
    
    //Generator
        //if Generator is upgradeable
    if( Controller.CurrentLevel[8] &lt; 10 )
    {
        //if Building level is equal to Current level (assumed true)
            //upgrade Current level   
        Controller.CurrentLevel[8] = Controller.CurrentLevel[8] + 1;
    }
   
    //upgrade actual Generator
        //for each Generator
    with( Generator )
    {
        //if upgradeable
        if( Level &lt; 10 )
        {
            Level = Level + 1;
            
            //Attack = Info.attack[Type, Level];
            //Speed = Info.unitspeed[Type, Level];
    
            //Health increases by the difference in level and previous level    
            Health = Health + (Info.unithealth[Type, Level] - Info.unithealth[Type, (Level - 1) ]  );
            
            
        }
    }
    
    //Defensive Tower
        //if Defensive Tower is upgradeable
    if( Controller.CurrentLevel[10] &lt; 10 )
    {
        //if Building level is equal to Current level (assumed true)
            //upgrade Current level   
        Controller.CurrentLevel[10] = Controller.CurrentLevel[10] + 1;
    }
   
    //upgrade actual Defensive_Tower
        //for each Defensive_Tower
    with( Defensive_Tower )
    {
        //if upgradeable
        if( Level &lt; 10 )
        {
            Level = Level + 1;
            
            //Attack = Info.attack[Type, Level];
            //Speed = Info.unitspeed[Type, Level];
    
            //Health increases by the difference in level and previous level    
            Health = Health + (Info.unithealth[Type, Level] - Info.unithealth[Type, (Level - 1) ]  );
            
            
        }
    }
    
    //Long Range Tower
        //if Long Range Tower is upgradeable
    if( Controller.CurrentLevel[11] &lt; 10 )
    {
        //if Building level is equal to Current level (assumed true)
            //upgrade Current level   
        Controller.CurrentLevel[11] = Controller.CurrentLevel[11] + 1;
    }
   
    //upgrade actual Long Range Tower
        //for each Long Range Tower
    with( Long_Range_Tower )
    {
        //if upgradeable
        if( Level &lt; 10 )
        {
            Level = Level + 1;
            
            //Attack = Info.attack[Type, Level];
            //Speed = Info.unitspeed[Type, Level];
    
            //Health increases by the difference in level and previous level    
            Health = Health + (Info.unithealth[Type, Level] - Info.unithealth[Type, (Level - 1) ]  );
            
            
        }
    }
    
    //Short Range Tower
        //if Short Range Tower is upgradeable
    if( Controller.CurrentLevel[12] &lt; 10 )
    {
        //if Building level is equal to Current level (assumed true)
            //upgrade Current level   
        Controller.CurrentLevel[12] = Controller.CurrentLevel[12] + 1;
    }
   
    //upgrade actual Short Range Tower
        //for each Short Range Tower
    with( Short_Range_Tower )
    {
        //if upgradeable
        if( Level &lt; 10 )
        {
            Level = Level + 1;
            
            //Attack = Info.attack[Type, Level];
            //Speed = Info.unitspeed[Type, Level];
    
            //Health increases by the difference in level and previous level    
            Health = Health + (Info.unithealth[Type, Level] - Info.unithealth[Type, (Level - 1) ]  );
            
            
        }
    }
    
    //Short Range Blast Tower
        //if Short Range Blast Tower is upgradeable
    if( Controller.CurrentLevel[13] &lt; 10 )
    {
        //if Building level is equal to Current level (assumed true)
            //upgrade Current level   
        Controller.CurrentLevel[13] = Controller.CurrentLevel[13] + 1;
    }
   
    //upgrade actual Short Range Blast Tower
        //for each Short Range Blast Tower
    with( Short_Range_Blast_Tower )
    {
        //if upgradeable
        if( Level &lt; 10 )
        {
            Level = Level + 1;
            
            //Attack = Info.attack[Type, Level];
            //Speed = Info.unitspeed[Type, Level];
    
            //Health increases by the difference in level and previous level    
            Health = Health + (Info.unithealth[Type, Level] - Info.unithealth[Type, (Level - 1) ]  );
            
            
        }
    }
    
    //Inferno Tower
        //if Inferno Tower is upgradeable
    if( Controller.CurrentLevel[14] &lt; 10 )
    {
        //if Building level is equal to Current level (assumed true)
            //upgrade Current level   
        Controller.CurrentLevel[14] = Controller.CurrentLevel[14] + 1;
    }
   
    //upgrade actual Inferno Tower
        //for each Inferno Tower
    with( Inferno_Tower )
    {
        //if upgradeable
        if( Level &lt; 10 )
        {
            Level = Level + 1;
            
            //Attack = Info.attack[Type, Level];
            //Speed = Info.unitspeed[Type, Level];
    
            //Health increases by the difference in level and previous level    
            Health = Health + (Info.unithealth[Type, Level] - Info.unithealth[Type, (Level - 1) ]  );
            
            
        }
    }
    
    //Healing Tower
        //if Healing Tower is upgradeable
    if( Controller.CurrentLevel[15] &lt; 10 )
    {
        //if Building level is equal to Current level (assumed true)
            //upgrade Current level   
        Controller.CurrentLevel[15] = Controller.CurrentLevel[15] + 1;
    }
   
    //upgrade actual Healing Tower
        //for each Healing Tower
    with( Healing_Tower )
    {
        //if upgradeable
        if( Level &lt; 10 )
        {
            Level = Level + 1;
            
            //Attack = Info.attack[Type, Level];
            //Speed = Info.unitspeed[Type, Level];
    
            //Health increases by the difference in level and previous level    
            Health = Health + (Info.unithealth[Type, Level] - Info.unithealth[Type, (Level - 1) ]  );
            
            
        }
    }
    
alarm[0] = Period;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
