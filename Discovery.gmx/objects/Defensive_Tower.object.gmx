<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_D_Tower1</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>Building</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Destination_x = x;
Destination_y = y;

//determine object type
Type = 10;
Level = Controller.CurrentLevel[Type];

alarm[0] = (-1);
alarm[1] = (-1);
alarm[2] = (-1);
alarm[3] = (-1);
alarm[4] = (-1);
alarm[5] = (-1);
alarm[6] = (-1);

Selectable = 0;
State = 0;

Description = "Defensive Tower.";

Health = Info.unithealth[Type, Level];
Attack = Info.attack[Type, Level];
Speed = Info.unitspeed[Type, Level];
Value = Info.value[Type, Level];

VISION_RADIUS = Info.Range[2]; //Used in obj_fog_controller to remove the fog
DRAW_FOG = 0 //if true (1), then this object will be drawn beneath the gray fog.
SHOW_VISION = 1 //if false, then the fog around the object will not be removed.

//Building a Building
if( !(Clock.realseconds == 0 &amp;&amp; Clock.time &lt;= 1) )
{
    Health = 1;
    //Change State to "Pre-Built"
    State = 9;
    image_alpha = .5;
    solid = 0;
    
    VISION_RADIUS = 0//200 //Used in obj_fog_controller to remove the fog
    //DRAW_FOG = 0 //if true (1), then this object will be drawn beneath the gray fog.
    //SHOW_VISION = 0//1 //if false, then the fog around the object will not be removed.

}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if Selected Building's state is "Upgrading"
if( State == 5 )
{
    alarm[6] = -1;
    State = 0;
    
    //if Defensive Tower is selected
    if( (Controller.Selected) == id )
    {
        Controller.Destination_x = x;
        Controller.Destination_y = y;
    }
    
    //change instance to Long Range Tower
    instance_change(Healing_Tower, true);
    
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if Selected Building's state is "Generating Unit"
if( State == 5 )
{
    alarm[5] = -1;
    State = 0;
    
    //if Defensive Tower is selected
    if( (Controller.Selected) == id )
    {
        Controller.Destination_x = x;
        Controller.Destination_y = y;
    }
    
    //change instance to Inferno Tower
    instance_change(Inferno_Tower, true);
    

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if Selected Building's state is "Generating Unit"
if( State == 5 )
{
    alarm[4] = -1;
    State = 0;
    
    //if Defensive Tower is selected
    if( (Controller.Selected) == id )
    {
        Controller.Destination_x = x;
        Controller.Destination_y = y;
    }
    
    //change instance to Short Range Blast Tower
    instance_change(Short_Range_Blast_Tower, true);
    
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if Selected Building's state is "Generating Unit"
if( State == 5 )
{
    alarm[3] = -1;
    State = 0;
    
    //if Defensive Tower is selected
    if( (Controller.Selected) == id )
    {
        Controller.Destination_x = x;
        Controller.Destination_y = y;
    }
    
    //change instance to Short Range Tower
    instance_change(Short_Range_Tower, true);
    
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>    //if Selected Building's state is "Upgrading"
if( State == 5 )
{
    alarm[2] = -1;
    State = 0;
    
    //instance_destroy();
    
    //if Defensive Tower is selected
    if( (Controller.Selected) == id )
    {
        Controller.Destination_x = x;
        Controller.Destination_y = y;
        Contorller.Selected = 0;
    } 
    
    //change instance to Long Range Tower
    instance_change(Long_Range_Tower, true);
    
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//if there is a Target AND Target is in range
if( distance_to_object(AllBad) &lt; Info.Range[2] &amp;&amp; instance_number(AllBad) &gt; 0 )
{
        Target = (instance_nearest(x, y, AllBad));
        if( (Target).Type == 9 ) 
        {
            Target = 0;
        }
        State = 4;
        //Destination_x = (instance_nearest(x, y, AllBad)).x;
        //Destination_y = (instance_nearest(x, y, AllBad)).y;
}
else
{
        Target = 0;
}

//if there is an available Target
if( Target != 0 )
{    

//if the destructible's current health - attacker's attack (/room_speed for "per step") is MORE THAN OR EQUAL TO 0
        //if( destrucible.health - attacker.attack per sec &gt;= 0 )
    if( ((Target).Health - Attack &gt; 0 ) )
    {
        instance_create(x, y, Ammunition);
        //decrement Resource's value
        (Target).Health = (Target).Health - (Attack);
        alarm[1] = room_speed;
        
        
    }
    //if decrement would excede Resource's available value
    else if( ((Target).Health - Attack &lt;= 0 ) )
    {
        //decrement Resource's value to 0
        (Target).Health = 0;
        (Target).State = 8;
        
        Target = 0;
        State = 0;
        
        //Destination_x = x;
        //Destination_y = y;
        
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if Selected Building's state is "Upgrading"
if( State == 5 )
{
    
    //instance_create(x, (sprite_height/2)+y+8, Builder);

    
    if( Controller.CurrentLevel[(Controller.Selected).Type] &lt; 10 )
    {    
        Controller.CurrentLevel[(Controller.Selected).Type] = Controller.CurrentLevel[(Controller.Selected).Type] + 1;
        
        //Update stats
        Level = Controller.CurrentLevel[Type];     
        Attack = Info.attack[Type, Level];
        //Speed = Info.unitspeed[Type, Level];
    
        //Health increases by the difference in level and previous level    
        Health = Health + (Info.unithealth[Type, Level] - Info.unithealth[Type, (Level - 1) ]  );
    
    }
    
    
    alarm[0] = -1;
    State = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>


/*
if( Controller.Selected == 0 )
{
    //if selected
    if( Selectable == 1 )
    {
        Controller.Selected = id;
    }   
}
*/

//if state is "pre-built"
if( State == 9 )
{
    //lock coordinates
    x = mouse_x;
    y = mouse_y;
}
//if state is "UnderConstruction"
else if( State == 6 )
{
    solid = 1;    
}
else if( State == 0 )
{
    //find nearest AllBad in aggro range
        //set destination to the NEAREST
            //if Attacker is "Ready" or "Moving"
            //AND AllBads exist
    if( distance_to_object(AllBad) &lt; Info.Range[2] &amp;&amp; instance_number(AllBad) &gt; 0 )
    {
        Target = (instance_nearest(x, y, AllBad));
        if( (Target).Type == 9 ) 
        {
            Target = 0;
        }
        State = 4;
        //Destination_x = (instance_nearest(x, y, AllBad)).x;
        //Destination_y = (instance_nearest(x, y, AllBad)).y;
    }
    else
    {
        Target = 0;
    }
}

//if "attacking" AND has a Target AND attacker is NOT being told to move away
if( State == 4 &amp;&amp; Target != 0 )
{
    //if alarm is not active
    if( alarm[1] == (-1) )
    {
        instance_create(x, y, Ammunition);
        //set alarm
            //for 1 sec or room_speed steps
        alarm[1] = room_speed;
    }
    
    
}
else if( State == 4 &amp;&amp; Target == 0 )
{
    alarm[1] = -1;
    State = 0;
}


if( State == 8 || Health == 0 )
{
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
