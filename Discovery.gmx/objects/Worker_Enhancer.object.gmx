<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Worker_Enhancer</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>Building</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Destination_x = x;
Destination_y = y;

//determine object type
Type = 7;
Level = Controller.CurrentLevel[Type];

alarm[0] = -1;
alarm[1] = -1;
alarm[2] = -1;

Selectable = 0;
State = 0;

Description = "Worker Enhancer.";

Health = Info.unithealth[Type, Level];
Attack = Info.attack[Type, Level];
Speed = Info.unitspeed[Type, Level];
Value = Info.value[Type, Level];

VISION_RADIUS = Info.Range[2]; //Used in obj_fog_controller to remove the fog
DRAW_FOG = 0 //if true (1), then this object will be drawn beneath the gray fog.
SHOW_VISION = 1 //if false, then the fog around the object will not be removed.

//Building a Building
if( !(Clock.realseconds == 0 &amp;&amp; Clock.time &lt;= 1) )
{
    Health = 1;
    //Change State to "Pre-Built"
    State = 9;
    image_alpha = .5;
    solid = 0;
    
    VISION_RADIUS = 0//200 //Used in obj_fog_controller to remove the fog
    //DRAW_FOG = 0 //if true (1), then this object will be drawn beneath the gray fog.
    //SHOW_VISION = 0//1 //if false, then the fog around the object will not be removed.

}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if Selected Building's state is "Upgrading"
if( State == 5 )
{
    
    //upgrade Harvesters
    if( Controller.CurrentLevel[1] &lt; 10 )
    {   
        Controller.CurrentLevel[1] = Controller.CurrentLevel[1] + 1;
        Controller.Upgrade = 1;
        
        Controller.Time = 0;
        
    }

    
    
    alarm[2] = -1;
    State = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if Selected Building's state is "Upgrading"
if( State == 5 )
{
    
    //upgrade Builders
    if( Controller.CurrentLevel[0] &lt; 10 )
    {   
        Controller.CurrentLevel[0] = Controller.CurrentLevel[0] + 1;
        Controller.Upgrade = 0;
        
        Controller.Time = 0;
        
    }

    
    
    alarm[1] = -1;
    State = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if Selected Building's state is "Generating Unit"
if( State == 5 )
{
    
    //instance_create(x, (sprite_height/2)+y+8, Builder);

    
    if( Controller.CurrentLevel[(Controller.Selected).Type] &lt; 10 )
    {    
        Controller.CurrentLevel[(Controller.Selected).Type] = Controller.CurrentLevel[(Controller.Selected).Type] + 1;
        
        //Update stats
        Level = Controller.CurrentLevel[Type];     
        //Attack = Info.attack[Type, Level];
        //Speed = Info.unitspeed[Type, Level];
    
        //Health increases by the difference in level and previous level    
        Health = Health + (Info.unithealth[Type, Level] - Info.unithealth[Type, (Level - 1) ]  );
    
    }
    
    
    alarm[0] = -1;
    State = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>



if( Controller.Selected == 0 )
{
    //if selected
    if( Selectable == 1 )
    {
        Controller.Selected = id;
    }   
}

//if state is "pre-built"
if( State == 9 )
{
    //lock coordinates
    x = mouse_x;
    y = mouse_y;
}
//if state is "UnderConstruction"
else if( State == 6 )
{
    solid = 1;
    
    //if there is a builder building this building
    if( (Target).Target == 0 )
    {
        Target = 0;
    }
    //else build building
    else
    {
/*        //if the Building's current health + builder's attack (/room_speed for "per step") is LESS THAN the Building's maxHealth
        //if( health + builder.attack per sec &lt; maxHealth )
        //if( Health + (Info.attack[ Target.Type, Controller.CurrentLevel[Target.Type] ])/room_speed &lt; Info.unithealth[ Type, Controller.CurrentLevel[Type] ] )
        if( Health + ((Target).Attack/room_speed) &lt; Info.unithealth[ Type, Controller.CurrentLevel[Type] ] )
        {
            //increment Building health
            //Health = Health + (Info.attack[ (Target).Type, Controller.CurrentLevel[(Target).Type] ]/room_speed);
            Health = Health + ((Target).Attack/room_speed);
        }
        //if increment would excede Building's max Health
        else
        {
            //make current Health Building's max Health
            Health = Info.unithealth[ Type, Controller.CurrentLevel[Type] ];
            //Building is complete
            Target = 0;
            State = 0;
        }
        */
    }
    
}

if( State == 8 || Health == 0 )
{
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
