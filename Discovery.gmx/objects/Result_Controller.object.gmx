<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>Interface_Object</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//win/lose conditions

//win condition
    //All enemies (units and buildings) are destroyed
if( instance_number(AllBad) == 0 )
{
    //deploy notification
    textbox(view_xview[0]+158, view_yview[0]+158, "Congratulations you've defeated all your enemies!  Press any key to continue.", c_black, c_white);
        
    //calculate score (Assault mode is assumed under this condition)
        //determine scored points for each building
    with( Building )
    {
        //one point for each resource it would cost to make the building
           //divider for current health / maximum health
                //add to score
        score = score + (Info.sumwoodcost[Type, Level])//*(Health/Info.health[Type, Level]));
        score = score + (Info.sumorecost[Type, Level])//*(Health/Info.health[Type, Level]));
        score = score + (Info.sumessencecost[Type, Level])//*(Health/Info.health[Type, Level]));
        score = score + (Info.sumenergycost[Type, Level])//*(Health/Info.health[Type, Level]));
    }
    //determine scored points for each unit
    with( Unit )
    {
       //one point for each resource it would cost to make the building
            //divider for current health / maximum health
                //add to score
        score = score + (Info.woodcost[Type, Level])//*(Health/Info.health[Type, Level]));
        score = score + (Info.orecost[Type, Level])//*(Health/Info.health[Type, Level]));
        score = score + (Info.essencecost[Type, Level])//*(Health/Info.health[Type, Level]));
        score = score + (Info.energycost[Type, Level])//*(Health/Info.health[Type, Level]));

    }    
        
    //determine scored points for low time (possibly use a divider, e.g. score/time)
       //modify score
    score = score/(Clock.realseconds);
            
    //deploy high score notification
    highscore_show(score);
    
    //restart game
    game_restart();
}

//lose condition
    //All allies (units and buildings) are destroyed
if( instance_number(Friendly) == 0 )
{
    //deploy notification
    textbox((view_xview[0] + 158), (view_yview[0] + 158), "OH NO!  It looks like you've been overrun by enemies!  Press any key to continue.", c_black, c_white);
        
    //determine scored points for high time (1 point per second)
       //modify score
    score = score + Clock.realseconds;
                   
    //deploy high score notification
    highscore_show(score);
    
    //restart game
    game_restart();        
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
