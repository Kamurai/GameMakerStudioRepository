<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-3</depth>
  <persistent>0</persistent>
  <parentName>Interface_Object</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Width = 158;
Height = 158;

Offset_x = 0;
Offset_y = Controller.Interface_Offset;


//Map_Surface = surface_create(room_width, room_height);



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x = view_xview[0] + Offset_x;
y = view_yview[0] + Offset_y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if mouse is being pressed within the bounds of the Min_Map object
if( (mouse_x &gt;= x &amp;&amp; mouse_x &lt;= (x + Width) ) &amp;&amp; ( mouse_y &gt;= y &amp;&amp; mouse_y &lt;= (y + Height) ) )
{
    //determine near border
        //if near left and top border
    if( (((((mouse_x - x) / Width) * room_width) - (view_wview[0]/2)) &lt; 0) &amp;&amp; ((((mouse_y - y) / Height) * room_height) - (view_hview[0]/2) &lt; 0) )
    {
        //set view based on the proportion of where the mouse is clicked on the mini map

        //The proportion of x to x + Width to the room_width

        view_xview[0] = 0;//(((mouse_x - x) / Width) * room_width) - (view_wview[0]/2);

        //The proportion of y to y + Height to the room_height

        view_yview[0] = 0;//(((mouse_y - y) / Height) * room_height) - (view_hview[0]/2);
    }        
        
        //if near left and bottom border
    else if( (((((mouse_x - x) / Width) * room_width) - (view_wview[0]/2)) &lt; 0) &amp;&amp; ((((mouse_y - y) / Height) * room_height) - (view_hview[0]/2) &gt; (room_height-view_yview[0])) )
    {
        //set view based on the proportion of where the mouse is clicked on the mini map

        //The proportion of x to x + Width to the room_width

        view_xview[0] = 0;//(((mouse_x - x) / Width) * room_width) - (view_wview[0]/2);

        //The proportion of y to y + Height to the room_height

        view_yview[0] = room_height - view_hview[0];//(((mouse_y - y) / Height) * room_height) - (view_hview[0]/2);
    } 
    
        
       //if near top and right border
    else if( (((((mouse_x - x) / Width) * room_width) - (view_wview[0]/2)) &gt; (room_width-view_xview[0])) &amp;&amp; ((((mouse_y - y) / Height) * room_height) - (view_hview[0]/2) &lt; 0) )
    {
        //set view based on the proportion of where the mouse is clicked on the mini map

        //The proportion of x to x + Width to the room_width

        view_xview[0] = room_width - view_wview[0];//(((mouse_x - x) / Width) * room_width) - (view_wview[0]/2);

        //The proportion of y to y + Height to the room_height

        view_yview[0] = 0;//(((mouse_y - y) / Height) * room_height) - (view_hview[0]/2);
    }    
       //if near bottom and right border
    else if( (((((mouse_x - x) / Width) * room_width) - (view_wview[0]/2)) &gt; (room_width-view_xview[0]) &amp;&amp; ((((mouse_y - y) / Height) * room_height) - (view_hview[0]/2) &gt; (room_height-view_yview[0]))) )
    {
        //set view based on the proportion of where the mouse is clicked on the mini map

        //The proportion of x to x + Width to the room_width

        view_xview[0] = room_width - view_wview[0];//(((mouse_x - x) / Width) * room_width) - (view_wview[0]/2);

        //The proportion of y to y + Height to the room_height

        view_yview[0] = room_height - view_hview[0];//(((mouse_y - y) / Height) * room_height) - (view_hview[0]/2);
    }   
       //if near left border
    else if( (((((mouse_x - x) / Width) * room_width) - (view_wview[0]/2)) &lt; 0) )
    {
        //set view based on the proportion of where the mouse is clicked on the mini map

        //The proportion of x to x + Width to the room_width

        view_xview[0] = 0;//(((mouse_x - x) / Width) * room_width) - (view_wview[0]/2);

        //The proportion of y to y + Height to the room_height

        view_yview[0] = (((mouse_y - y) / Height) * room_height) - (view_hview[0]/2);
    }    
       //if near bottom border
    else if( (((((mouse_y - y) / Height) * room_height) - (view_hview[0]/2)) &gt; (room_height-view_hview[0]))  )
    {
        //set view based on the proportion of where the mouse is clicked on the mini map

        //The proportion of x to x + Width to the room_width

        view_xview[0] = (((mouse_x - x) / Width) * room_width) - (view_wview[0]/2);

        //The proportion of y to y + Height to the room_height

        view_yview[0] = room_height - view_hview[0];//(((mouse_y - y) / Height) * room_height) - (view_hview[0]/2);
    }      
       //if near top border
    else if( ((((mouse_y - y) / Height) * room_height) - (view_hview[0]/2) &lt; 0) )
    {
        //set view based on the proportion of where the mouse is clicked on the mini map

        //The proportion of x to x + Width to the room_width

        view_xview[0] = (((mouse_x - x) / Width) * room_width) - (view_wview[0]/2);

        //The proportion of y to y + Height to the room_height

        view_yview[0] = 0;//(((mouse_y - y) / Height) * room_height) - (view_hview[0]/2);
    }    
        
       //if near right border
    else if( ((((mouse_x - x) / Width) * room_width) - (view_wview[0]/2)) &gt; (room_width-view_wview[0])  )
    {
        //set view based on the proportion of where the mouse is clicked on the mini map

        //The proportion of x to x + Width to the room_width

        view_xview[0] = room_width - view_wview[0];//(((mouse_x - x) / Width) * room_width) - (view_wview[0]/2);

        //The proportion of y to y + Height to the room_height

        view_yview[0] = (((mouse_y - y) / Height) * room_height) - (view_hview[0]/2);
    }   
        
       //otherwise act as normal
    else
    {
    
         //set view based on the proportion of where the mouse is clicked on the mini map

        //The proportion of x to x + Width to the room_width

        view_xview[0] = (((mouse_x - x) / Width) * room_width) - (view_wview[0]/2);

        //The proportion of y to y + Height to the room_height

        view_yview[0] = (((mouse_y - y) / Height) * room_height) - (view_hview[0]/2);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(c_black);
draw_rectangle((x), (y), (x+Width), (y+Height), 1);

draw_set_color(c_dkgray);
draw_rectangle((x), (y), (x+Width), (y+Height), 0);

//draw_map(view_xview+2, view_yview+2, 100, 50, view_xview, view_yview, view_xview+320, view_yview+240);
draw_map(x, y, Width, Height, 0, 0, room_width, room_height, c_green);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw_set_color(c_black);
//draw_rectangle((x), (y), (x+Width), (y+Height), 1);

//draw_set_color(c_dkgray);
//draw_rectangle((x), (y), (x+Width), (y+Height), 0);


//draw_surface_stretched(Map_Surface, x, y, Width, Height);

//Draw stretched minimap image
//draw_surface_stretched(minimapImage,view_xview[0],view_yview[0],Width,Height);


/*
draw_set_color(c_black);
draw_rectangle((x), (y), (x+80), (y+80), 1);

draw_set_color(c_red);
draw_rectangle((x), (y), (x+80), (y+80), 0);
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
