<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Index = (-1);

Offset_x = 24;
Offset_y = 24 + obj_Table.sprite_height + 24;

Margin_x = 10;
Margin_y = 10;

limit_x = 128;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
x = view_xview[0] + Offset_x;
y = view_yview[0] + Offset_y;


if( position_meeting(mouse_x,mouse_y,master_Game) == true )
{
    Target = instance_nearest(mouse_x,mouse_y,master_Game);
    Index = (Target).MasterIndex;
}
else
{
    Index = (-1);
}
//else //if( Controller.Selected != 0 )
//{
    //Selected = Controller.Selected;
    //Description = (Controller.Selected).Description;
    //State = Info.State[(Controller.Selected).State];
    //Object_Title = object_get_name((Controller.Selected).object_index);
    //Level = (Controller.Selected).Level;
    //Health = (Controller.Selected).Health;
    //MaxHealth = Info.unithealth[(Controller.Selected).Type,  (Controller.Selected).Level];
    //Attack = (Controller.Selected).Attack;
    //Speed = (Controller.Selected).Speed;
    //Value = (Controller.Selected).Value;
//}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(font2);

//draw text
draw_set_color(c_black);



if( Index  == (-1) )
{
}
else
{
    draw_text_ext((x+(Margin_x*1)), (y+(Margin_y*1)), master_Info.Name[Index], -1, limit_x)
    
    if(master_Info.Game[Index] == "Chess")
    {
        if(master_Info.Type[Index] == "Piece")
        {
            if((Target).image_index == 0)
            {
                draw_text_ext((x+(Margin_x*1)),(y+(Margin_y*2)),"White", -1, limit_x);
            }
            else
            {
                draw_text_ext((x+(Margin_x*1)),(y+(Margin_y*2)),"Black", -1, limit_x);
            }
        }
        
        draw_text_ext((x+(Margin_x*1)), (y+(Margin_y*3)), master_Info.Description[Index], -1, limit_x);
    }
    else if(master_Info.Game[Index] == "PlayingCards")
    {
        if(master_Info.Type[Index] == "Deck")
        {
            draw_text_ext((x+(Margin_x*1)), (y+(Margin_y*1)), master_Info.Name[Index], -1, limit_x);
        }
        else if(master_Info.Type[Index] == "Card")
        {
            if((Target).image_index == 0)
            {
                draw_text_ext((x+(Margin_x*1)), (y+(Margin_y*2)), master_Info.Name[Index], -1, limit_x);
                draw_text_ext((x+(Margin_x*1)), (y+(Margin_y*3)), master_Info.Description[Index], -1, limit_x);
            }
            else
            {
                draw_text_ext((x+(Margin_x*1)), (y+(Margin_y*2)), "Playing Card", -1, limit_x);
            }
        }
    }
    else if(master_Info.Game[Index] == "Quit")
    {
        draw_text_ext((x+(Margin_x*1)), (y+(Margin_y*1)), master_Info.Name[Index], -1, limit_x);
        draw_text_ext((x+(Margin_x*1)), (y+(Margin_y*3)), master_Info.Description[Index], -1, limit_x);
    }
    else if(master_Info.Game[Index] == "Catan")
    {
        if((master_Info.Type[Index] == "Deck") || (master_Info.Type[Index] == "Stack") || (master_Info.Type[Index] == "Dice") || (master_Info.Type[Index] == "Token") || (master_Info.Type[Index] == "Chit"))
        {
            draw_text_ext((x+(Margin_x*1)), (y+(Margin_y*1)), master_Info.Name[Index], -1, limit_x);
            draw_text_ext((x+(Margin_x*1)), (y+(Margin_y*3)), master_Info.Description[Index], -1, limit_x);            
        }
        else if((master_Info.Type[Index] == "Card") || (master_Info.Type[Index] == "Tile"))
        {
            if((Target).image_index == 0)
            {
                draw_text_ext((x+(Margin_x*1)), (y+(Margin_y*2)), master_Info.Name[Index], -1, limit_x);
                draw_text_ext((x+(Margin_x*1)), (y+(Margin_y*3)), master_Info.Description[Index], -1, limit_x);
            }
            else
            {
                draw_text_ext((x+(Margin_x*1)), (y+(Margin_y*2)), "Playing Card", -1, limit_x);
            }
        }
        else if((master_Info.Type[Index] == "Piece"))
        {
            draw_text_ext((x+(Margin_x*1)), (y+(Margin_y*1)), master_Info.Name[Index], -1, limit_x);
            if(master_Info.Name[Index] == "Knight")
            {
                draw_text_ext((x+(Margin_x*1)), (y+(Margin_y*2)), "Level: " + string((Target).Value), -1, limit_x);
            }
            draw_text_ext((x+(Margin_x*1)), (y+(Margin_y*3)), master_Info.Description[Index], -1, limit_x);            
        }
        else if((master_Info.Type[Index] == "Chart"))
        {
            draw_text_ext((x+(Margin_x*1)), (y+(Margin_y*1)), master_Info.Name[Index], -1, limit_x);
            if(master_Info.Name[Index] == "Barbarian Chart")
            {
                draw_text_ext((x+(Margin_x*1)), (y+(Margin_y*2)), "Barbarians: " + string((Target).Score) + " / 7", -1, limit_x);
                draw_text_ext((x+(Margin_x*1)), (y+(Margin_y*3)), master_Info.Description[Index], -1, limit_x);
            }
            else if(master_Info.Name[Index] == "Catan Score Chart")
            {
                draw_text_ext((x+(Margin_x*1)), (y+(Margin_y*2)), "Victory: " + string((Target).Victory), -1, limit_x);
                draw_text_ext((x+(Margin_x*1)), (y+(Margin_y*3)), "Gold: " + string((Target).Gold), -1, limit_x);
                draw_text_ext((x+(Margin_x*1)), (y+(Margin_y*4)), "Trade: " + string((Target).Trade), -1, limit_x);
                draw_text_ext((x+(Margin_x*1)), (y+(Margin_y*5)), "Politics: " + string((Target).Politics), -1, limit_x);
                draw_text_ext((x+(Margin_x*1)), (y+(Margin_y*6)), "Building: " + string((Target).Building), -1, limit_x);
                draw_text_ext((x+(Margin_x*1)), (y+(Margin_y*7)), master_Info.Description[Index], -1, limit_x);
            }
                        
                        
        }
        
        
    }
    
    
}









if(Index == 0)
{

}
else if(Index == 1)
{

}
else if(Index == 2)
{
 
}
else if(Index == 3)
{

}
else if(Index == 4)
{

}
else if(Index == 5)
{

}
else if(Index == 6 )
{

}
else if(Index == 7)
{

}
else
{
    //draw_text_transformed( (x+10), (y), "Description: ", 1, 1, 0);
    //draw_text_transformed( (x+10+70), (y), Description, 1, 1, 0);
    //draw_text_transformed( (x+8), (y+8), (Index).Name, 1, 1, 0);

    //draw_text_transformed( (x+10), (y+25), "State: ", 1, 1, 0);
    //draw_text_transformed( (x+10+50), (y+25), State, 1, 1, 0);

    //draw_text_transformed( (x+10), (y+40), "Level: ", 1, 1, 0);
    //draw_text_transformed( (x+10+50), (y+40), Level, 1, 1, 0);

    //draw_text_transformed( (x+10), (y+55), "Health: ", 1, 1, 0);
    //draw_text_transformed( (x+10+50), (y+55), Health, 1, 1, 0);
    //draw_text_transformed( (x+10+120), (y+55), " / ", 1, 1, 0);
    //draw_text_transformed( (x+10+130), (y+55), MaxHealth, 1, 1, 0);
    //draw_text_transformed( (x+10+50), (y+55), string(Health) + " / " + string(MaxHealth), 1, 1, 0);

    //draw_text_transformed( (x+10), (y+70), "Attack: ", 1, 1, 0);
    //draw_text_transformed( (x+10+50), (y+70), Attack, 1, 1, 0);

    //draw_text_transformed( (x+10), (y+85), "Speed: ", 1, 1, 0);
    //draw_text_transformed( (x+10+50), (y+85), Speed, 1, 1, 0);

    //draw_text_transformed( (x+10), (y+70), "Value: ", 1, 1, 0);
    //draw_text_transformed( (x+10+50), (y+70), Value, 1, 1, 0);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
