<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_GameObject</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 0;

obj_Play_Controller.CurrentObjectCount = obj_Play_Controller.CurrentObjectCount + 1;

/****************************************
State = 0:  Placement:  Follows the mouse about.
                            If collision with another Game Object occurs, destroy it.
                            If left-clicked:  Change to Position State.
                            If right-clicked:  Change object.
State = 1:  Position:  image_angle changes with mouse location.
                            If collision with another Game Object occurs, don't follow rotate that direction.
                                //In lieu of the above, the object will not move to State 2 while in contact.
                            If left-clicked:  Change to Readied State.
                            If right-clicked:  Change object.
State = 2:  Readied:  Ignores the mouse unless left-clicked or right-clicked.
                            If left-clicked:  Change to Position State.
                            If right-clicked:  Destroy it.
****************************************/
State = (-1);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(obj_Play_Controller.LastObjectTouched == id &amp;&amp; obj_Play_Controller.Emitting == false)
{
    obj_Play_Controller.LastObjectTouched = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>obj_Play_Controller.CurrentObjectCount = obj_Play_Controller.CurrentObjectCount - 1;
/****************************************
State = 0:  Placement:  Follows the mouse about.
                            If collision with another Game Object occurs, destroy it.
                            If left-clicked:  Change to Position State.
                            If right-clicked:  Change object.
State = 1:  Position:  image_angle changes with mouse location.
                            If collision with another Game Object occurs, don't follow rotate that direction.
                                //In lieu of the above, the object will not move to State 2 while in contact.
                            If left-clicked:  Change to Readied State.
                            If right-clicked:  Change object.
State = 2:  Readied:  Ignores the mouse unless left-clicked or right-clicked.
                            If left-clicked:  Change to Position State.
                            If right-clicked:  Destroy it.
****************************************/
if(State == 0)
{
    obj_Play_Controller.Targeting = false;
}
else if(State == 1)
{
    obj_Play_Controller.Targeting = false;
    obj_Play_Controller.Turning = false;
}
else if(State == 2)
{
    //do nothing
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/****************************************
State = 0:  Placement:  Follows the mouse about.
                            If collision with another Game Object occurs, destroy it.
                            If left-clicked:  Change to Position State.
                            If right-clicked:  Change object.
State = 1:  Position:  image_angle changes with mouse location.
                            If collision with another Game Object occurs, don't follow rotate that direction.
                                //In lieu of the above, the object will not move to State 2 while in contact.
                            If left-clicked:  Change to Readied State.
                            If right-clicked:  Change object.
State = 2:  Readied:  Ignores the mouse unless left-clicked or right-clicked.
                            If left-clicked:  Change to Position State.
                            If right-clicked:  Destroy it.
****************************************/
if(State == 0)
{
    x = mouse_x;
    y = mouse_y;
}
else if(State == 1)
{
    image_angle = arctan2((mouse_y-y),(mouse_x-x)) * (180/pi) * (-1);
    
    if(image_angle &gt; 360)
    {
        image_angle = image_angle - 360;
    }
    else if(image_angle &lt; 0)
    {
        image_angle = image_angle + 360;
    }
                        
}
else if(State == 2)
{
    //does nothing
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/****************************************
State = 0:  Placement:  Follows the mouse about.
                            If left-clicked:  Change to Position State, provided correct conditions.
                            If right-clicked:  Do nothing.
State = 1:  Position:  image_angle changes with mouse location.
                            If left-click occurs:  Change to Readied State, provided correct conditions.
                            If right-clicked:  Pick it up.
State = 2:  Readied:  Stays in place.
                            If left-clicked:  Change to Position State.
                            If right-clicked:  Pick it up.
****************************************/
if(State == (-1))
{
    State = 0;
}
else if(State == 0 &amp;&amp; (y &lt; obj_Play_Controller.DisplayUpperBound) &amp;&amp; position_meeting(mouse_x,mouse_y,self) &amp;&amp; !place_meeting(x,y,obj_GameObject))
{


    State = 1;
    obj_Play_Controller.Turning = true;
    obj_Play_Controller.LastObjectTouched = id;
    
}
else if(State == 0 &amp;&amp; (y &gt;= obj_Play_Controller.DisplayUpperBound) &amp;&amp; position_meeting(mouse_x,mouse_y,self) &amp;&amp; !place_meeting(x,y,obj_GameObject))
{


    instance_destroy();
    
}
else if(State == 1 &amp;&amp; !place_meeting(x,y,obj_GameObject) &amp;&amp; (!position_meeting(mouse_x,mouse_y,obj_GameObject) || position_meeting(mouse_x,mouse_y,self)) )
{
    if(!obj_Play_Controller.Emitting)
    {
        State = 2;
        obj_Play_Controller.Targeting = false;
        obj_Play_Controller.Turning = false;
    }
}
else if(State == 2 &amp;&amp; position_meeting(mouse_x,mouse_y,self))
{
    if(!obj_Play_Controller.Emitting &amp;&amp; !obj_Play_Controller.Turning)
    {
        State = 1;
        obj_Play_Controller.Targeting = true;
        obj_Play_Controller.Turning = true;
        obj_Play_Controller.LastObjectTouched = id;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/****************************************
State = 0:  Placement:  Follows the mouse about.
                            If left-clicked:  Change to Position State, provided correct conditions.
                            If right-clicked:  Do nothing.
State = 1:  Position:  image_angle changes with mouse location.
                            If left-click occurs:  Change to Readied State, provided correct conditions.
                            If right-clicked:  Pick it up.
State = 2:  Readied:  Stays in place.
                            If left-clicked:  Change to Position State.
                            If right-clicked:  Pick it up.
****************************************/
if(State == 0)
{
    //do nothing
}
else if(State == 1)
{
    if(!obj_Play_Controller.Emitting)
    {
        State = 0;
    }
}
else if(State == 2)
{
    if(!obj_Play_Controller.Emitting)
    {
        State = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
