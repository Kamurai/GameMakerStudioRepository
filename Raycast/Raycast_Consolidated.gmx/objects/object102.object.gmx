<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Emitting = false;
alarm[0] = 1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>EmitAngle = 90;
Source = instance_nearest(x,y,obj_Emitter);

//this will be expanded to adjust for nearest Emitter or Splitter


if(!(distance_to_object(Source) &lt;= 5))
{
    instance_destroy();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_angle = (Source).EmitAngle;

EmitAngleArray[0] = image_angle;
EmitAngle = image_angle;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_destroy();

//EmitAngle is set at this point
EmitAngleInRadians = ((EmitAngle*pi)/180);

//determine beam path:
EmitArrayX[0] = x;
EmitArrayY[0] = y;

EmitTracker = 1;
EmitAngleTracker = 0;
EmitCount = 0;

i = x;
j = y;


CurrentContactObject = Source;


Emitting = false;

while(!Emitting)
{
    //determine angle/emit direction
    if(EmitAngle == 0)
    {
        AdjustX = 1;
        AdjustY = 0;
    }
    else if(EmitAngle == 90)
    {
        AdjustX = 0;
        AdjustY = -1;
    }
    else if(EmitAngle == 180)
    {
        AdjustX = -1;
        AdjustY = 0;
    }
    else if(EmitAngle == 270)
    {
        AdjustX = 0;
        AdjustY = 1;    
    }
    else if(EmitAngle == 360)
    {
        AdjustX = 1;
        AdjustY = 0;    
    }
    else if((EmitAngle &gt; 0) &amp;&amp; (EmitAngle &lt; 90)) //quadrant 1
    {
        AdjustX = cos(EmitAngleInRadians);
        AdjustY = sin(EmitAngleInRadians) * (-1);
    }
    else if((EmitAngle &gt; 90) &amp;&amp; (EmitAngle &lt; 180)) //quadrant 2
    {
        AdjustX = cos(EmitAngleInRadians);
        AdjustY = sin(EmitAngleInRadians) * (-1);
    }
    else if((EmitAngle &gt; 180) &amp;&amp; (EmitAngle &lt; 270)) //quadrant 3
    {
        AdjustX = cos(EmitAngleInRadians);
        AdjustY = sin(EmitAngleInRadians) * (-1);
    }
    else if((EmitAngle &gt; 270) &amp;&amp; (EmitAngle &lt; 360)) //quadrant 4
    {
        AdjustX = cos(EmitAngleInRadians);
        AdjustY = sin(EmitAngleInRadians) * (-1);
    }
    
   
    Searching = true;
    //loop through coordinates on line based on angle
    while(Searching)
    {
        if(Emitting)
        {
            break;
        }
        
        i= i + AdjustX;
        j= j + AdjustY;
        
       
        
        //if GameObject is found
        if((position_meeting(i,j,obj_GameObject)) &amp;&amp; ((instance_position(i,j,obj_GameObject)) != (CurrentContactObject)))
        {
        Searching = false;
        Emitting = true;
        /*
            CurrentContactObject = real(instance_position(i,j,obj_GameObject));
            
        /*
            //if GameObject is Emitter and no beams have been drawn yet
            if(object_get_name(instance_position(i,j,obj_GameObject).object_index) == "obj_Emitter" &amp;&amp; EmitCount == 0)
            {
                //continue;
            }
            else 
        */
        
          
        Searching = false;
        Emitting = true;
        /*   
            //if GameObject is Opaque
            if(position_meeting(i,j,obj_Opaque))
            {
                //then assign coordinates
                EmitArrayX[EmitTracker] = i;
                EmitArrayY[EmitTracker] = j;
                EmitTracker++;
                EmitCount++;
                
                //end searching
                Searching = false;
                Emitting = true;
                break;
            }
            //if GameObject is Reflective
            else if(place_meeting(i,j,obj_Reflective)) //position_meeting(i,j,obj_Reflective))
            {
                //instance_destroy();
                
                //then assign coordinates
                EmitArrayX[EmitTracker] = i;
                EmitArrayY[EmitTracker] = j;
                EmitTracker++;
                EmitCount++;
                
                ImageAngle = real(instance_position(i,j,obj_Reflective).image_angle);
                
                
                //handle reflection:
                //determine from which object the light is reflecting
                //if 2 sided mirror
                if(object_get_name(instance_position(i,j,obj_Reflective).object_index) == "obj_Mirror_2Sided" || object_get_name(instance_position(i,j,obj_Reflective).object_index) == "obj_Mirror_1Sided")
                {
                    AngleDiff = (EmitAngle - ImageAngle);
                    //instance_destroy();
                
                    while((AngleDiff &lt; 0) || (AngleDiff &gt; 359))
                    {
                    
                        if(AngleDiff &gt; 360)
                        {
                            AngleDiff = AngleDiff - 360;
                        }
                        else if(AngleDiff &lt; 0)
                        {
                            AngleDiff = AngleDiff + 360;
                        }
                    }
                    
                    //if difference is 0
                    if(AngleDiff == 0)
                    {
                        //end as if opaque (hits the side)
                        Emitting = true;
                    }
                    //if difference is 180
                    else if(AngleDiff == 180)
                    {
                        //end as if opaque (hits the side)
                        Emitting = true;
                    }
                    //if difference is 360
                    else if(AngleDiff == 360)
                    {
                        //end as if opaque (hits the side)
                        Emitting = true;
                    }
                    //if difference is 90
                    else if(AngleDiff == 90)
                    {
                        //end as if opaque (reflects back on itself)
                        Emitting = true;
                    }
                    //if difference is 270
                    else if(AngleDiff == 270)
                    {
                        //end as if opaque (reflects back on itself)
                        Emitting = true;
                    }
                    //if difference is from 1 to 89 //quadrant 1
                    else if( (AngleDiff &gt; 0) &amp;&amp; (AngleDiff &lt; 90) )
                    {
                        //if reflecting vertically (quadrant 1 to quandrant 4)
                        EmitAngle = ImageAngle - (EmitAngle - 180) + (ImageAngle - 180);
                        EmitAngleInRadians = ((EmitAngle*pi)/180);
                        //instance_destroy();
                //Emitting = true;
                
                        //from [45,0] to [315,0]
                            //C = B - (A - 180) + D = B - (A - 180) + (B - 180) = 0 - (45 - 180) + (0 - 180) = 0 - (-135) + (-180) = 0 + (135) - (180) = -45 = 315 //from quadrant 1 to 4
                        
                        //from [90,45] to [0,45]
                            //C = B - (A - 180) + D = B - (A - 180) + (B - 180) = 45 - (90 - 180) + (45 - 180) = 45 - (-90) + (-135) = 45 + (90) - (135) = 135 - 135 = 0  //from quadrant 1 to 4
                    
                        //from [89,0] to [271,0]
                            //C = B - (A - 180) + D = B - (A - 180) + (B - 180) = 0 - (89 - 180) + (0 - 180) = 0 - (-91) + (-180) = 0 + (91) - (180) = -89 = 271 //from quadrant 1 to 4
                        
                        //from [90,1] to [272,1]
                            //C = B - (A - 180) + D = B - (A - 180) + (B - 180) = 1 - (90 - 180) + (1 - 180) = 1 - (-90) + (-179) = 1 + (90) - (179) = -88 = 272 //from quadrant 1 to 4
                        
                        
                        //from [1,0] to [359,0]
                            //C = B - (A - 180) + D = B - (A - 180) + (B - 180) = 0 - (1 - 180) + (0 - 180) = 0 - (-179) + (-180) = 0 + (179) - (180) = -1 = 359 //from quadrant 1 to 4
                            
                        //from [90,89] to [88,89]
                            //C = B - (A - 180) + D = B - (A - 180) + (B - 180) = 89 - (90 - 180) + (89 - 180) = 89 - (-90) + (-91) = 89 + (90) - (91) = 88 //from quadrant 1 to 4
                            
                        //if reflecting horizontally (quadrant 1 to quadrant 2)
                            //180 - (EmitAngle - (instance_position(i,j,obj_Reflective).image_angle))
                        
                        //this should never happen:
                            //in cases where the beam strikes the side of the mirror, the object should act as if opaque
                    }
                    //if difference is from 91 to 179 //quadrant 2
                    else if( (AngleDiff &gt; 90) &amp;&amp; (AngleDiff &lt; 180) )
                    {
                        //if reflecting vertically (quadrant 2 to quandrant 3)
                        EmitAngle = ImageAngle - (EmitAngle - 180) + (ImageAngle - 180);
                        EmitAngleInRadians = ((EmitAngle*pi)/180);
                        
                        //from [135,0] to [225,0]
                            //C = B - (A - 180) + D = B - (A - 180) + (B - 180) = 0 - (135 - 180) + (0 - 180) = 0 - (-45) + (-180) = 0 + (45) - (180) = -135 = 225 //from quadrant 2 to 3
                        
                        //from [90,315] to [180,315]
                            //C = B - (A - 180) + D = B - (A - 180) + (B - 180) = 315 - (90 - 180) + (315 - 180) = 315 - (-90) + (135) = 315 + (90) + (135) = 540 = 180 //from quadrant 1 or 2 to 3 or 4
                      
                        //from [91,0] to [91,0]
                            //C = B - (A - 180) + D = B - (A - 180) + (B - 180) = 0 - (91 - 180) + (0 - 180) = 0 - (-89) + (-180) = 0 + (89) - (180) = 91  //from quadrant 2 to 3
                            
                        //from [90,359] to [268,359]
                            //C = B - (A - 180) + D = B - (A - 180) + (B - 180) = 359 - (90 - 180) + (359 - 180) = 359 - (-90) + (179) = 359 + (90) + (179) = 628 = 268 //from quadrant 2 to 3
                        
                        //from [179,0] to [181,0]
                            //C = B - (A - 180) + D = B - (A - 180) + (B - 180) = 0 - (179 - 180) + (0 - 180) = 0 - (-1) + (-180) = 0 + (1) - (180) = -179 = 181 //from quadrant 2 to 3
                        
                        //from [90,271] to [92,271]
                            //C = B - (A - 180) + D = B - (A - 180) + (B - 180) = 271 - (90 - 180) + (271 - 180) = 271 - (-90) + (91) = 271 + (90) + (91) = 452 = 92 //from quadrant 1 or 2 to 3     
                            
                        //if reflecting horizontally (quadrant 2 to quadrant 1)
                            //0 + (180 - (EmitAngle - (instance_position(i,j,obj_Reflective).image_angle)))
                        
                        //this should never happen:
                            //in cases where the beam strikes the side of the mirror, the object should act as if opaque
                         
                    }
                    //if difference is from 181 to 269 //quadrant 3
                    else if( (AngleDiff &gt; 180) &amp;&amp; (AngleDiff &lt; 270) )
                    {
                        //if reflecting vertically (quadrant 3 to quandrant 2)
                        EmitAngle = ImageAngle - (EmitAngle - 180) + (ImageAngle - 180);
                        EmitAngleInRadians = ((EmitAngle*pi)/180);
                        
                        //from [181,0] to [179,0]
                            //C = B - (A - 180) + D = B - (A - 180) + (B - 180) = 0 - (181 - 180) + (0 - 180) = 0 - 1 + (-180) = 0 - 1 - 180 = -181 = 179 //from quadrant 3 to 2
                        
                        //from [90,269] to [88,269]
                            //C = B - (A - 180) + D = B - (A - 180) + (B - 180) = 269 - (90 - 180) + (269 - 180) = 269 - (-90) + 89 = 269 + 90 + 89 = 448 = 88 //from quadrant 3 to 2
                
                        //from [269,0] to [91,0]
                            //C = B - (A - 180) + D = B - (A - 180) + (B - 180) = 0 - (269 - 180) + (0 - 180) = 0 - (89) + (-180) = -269 = 91 //from quadrant 3 to 2
                        
                        //from [90,181] to [272,181]
                            //C = B - (A - 180) + D = B - (A - 180) + (B - 180) = 181 - (90 - 180) + (181 - 180) = 181 - (-90) + (1) = 181 + (90) + (1) = 272 //from quadrant 3 to 2
                        
                        //from [225,0] to [,0]
                            //C = B - (A - 180) + D = B - (A - 180) + (B - 180) = 0 - (225 - 180) + (0 - 180) = 0 - (45) + (-180) = 0 - (45) - (180) = -225 = 135 //from quadrant 3 to 2
                        
                        //from [90,225] to [,225]
                            //C = B - (A - 180) + D = B - (A - 180) + (B - 180) = 225 - (90 - 180) + (225 - 180) = 225 - (-90) + (45) = 225 + (90) + (45) = 360 = 0 //from quadrant 3 to 2
                        
                        //if reflecting horizontally (quadrant 3 to quadrant 4)
                            //270 + (270 - (EmitAngle - (instance_position(i,j,obj_Reflective).image_angle)))
                        
                        //this should never happen:
                            //in cases where the beam strikes the side of the mirror, the object should act as if opaque
                                    
                    }
                    //if difference is from 271 to 359 //quadrant 4
                    else if( (AngleDiff &gt; 270) &amp;&amp; (AngleDiff &lt; 360) )
                    {
                        //if reflecting vertically (quadrant 4 to quandrant 1)
                        EmitAngle = ImageAngle - (EmitAngle - 180) + (ImageAngle - 180);
                        EmitAngleInRadians = ((EmitAngle*pi)/180);
                        
                        //from [315,0] to [45,0]
                            //C = B - (A - 180) + D = 0 - (315 - 180) + (0 - 180) = 0 - (135) + (-180) = 0 - (135) - (180) = -315 = 45 //from quadrant 4 to 1
                        
                        //from [90,135] to [180,135]
                            //C = B - (A - 180) + D = 135 - (90 - 180) + (135 - 180) = 135 - (90 - 180) + (135 - 180) = 135 - (-90) + (-45) = 135 + (90) - (45) = 180 //from quadrant 4 to 1
                        
                        //from [271,0] to [89,0]
                            //C = B - (A - 180) + D = B - (A - 180) + (B - 180) = 0 - (271 - 180) + (0 - 180) = 0 - (91) + (-180) = 0 - (91) - (180) = -271 = 89  //from quadrant 4 to 1
                            
                        //from [90,269] to [88,269]
                            //C = B - (A - 180) + D = B - (A - 180) + (B - 180) = 269 - (90 - 180) + (269 - 180) = 269 - (-90) + (89) = 269 + (90) + (89) = 448 = 88 //from quadrant 4 to 1
                          
                        //from [359,0] to [1,0]
                            //C = B - (A - 180) + D = B - (A - 180) + (B - 180) = 0 - (359 - 180) + (0 - 180) = 0 - (179) + (-180) = 0 - (179) - (180) = -359 = 1 //from quadrant 4 to 1
                        
                        //from [90,181] to [272,181]
                            //C = B - (A - 180) + D = B - (A - 180) + (B - 180) = 181 - (90 - 180) + (181 - 180) = 181 - (-90) + (1) = 181 + (90) + (1) = 272 //from quadrant 4 to 1
                        
                        //if reflecting horizontally (quadrant 4 to quadrant 3)
                            //180 + (360 - (EmitAngle - (instance_position(i,j,obj_Reflective).image_angle)))
                            
                        //this should never happen:
                            //in cases where the beam strikes the side of the mirror, the object should act as if opaque
                    }
                }
                
                while((EmitAngle &lt; 0) || (EmitAngle &gt; 359))
                {
                
                    if(EmitAngle &gt; 360)
                    {
                        EmitAngle = EmitAngle - 360;
                    }
                    else if(EmitAngle &lt; 0)
                    {
                        EmitAngle = EmitAngle + 360;
                    }
                }
                EmitAngleInRadians = ((EmitAngle*pi)/180);
                
                EmitAngleArray[EmitTracker] = EmitAngle;
                    
                /*
                if(EmitTracker == 0 || (EmitTracker mod 2) == 0 )
                {
                    EmitAngleArray[EmitAngleTracker] = EmitAngle;
                    EmitAngleTracker = EmitAngleTracker + 1;
                }
                */
                        /*
                //loop again
                Searching = false;
            }
           */
       }
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
if(position_meeting(EmitArrayX[EmitTracker-1],EmitArrayY[EmitTracker-1],obj_Receiver))
{
    if((instance_position(EmitArrayX[EmitTracker-1],EmitArrayY[EmitTracker-1],obj_Receiver)).Connected == 0)
    {
        (instance_position(EmitArrayX[EmitTracker-1],EmitArrayY[EmitTracker-1],obj_Receiver)).image_index = 1;
        (instance_position(EmitArrayX[EmitTracker-1],EmitArrayY[EmitTracker-1],obj_Receiver)).Connected = 1;
        obj_Play_Controller.Winning = 0;
        
        with(obj_Receiver)
        {
            if(Connected == 1)
            {
                obj_Play_Controller.Winning = obj_Play_Controller.Winning + 1;
            }
        }
    }    
}
*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
if(obj_Play_Controller.Winning == obj_Info.Stock_Receiver[obj_Play_Controller.Stock_Index])
{
    if((obj_Info.Limit[obj_Play_Controller.Stock_Index] - obj_Play_Controller.CurrentObjectCount) &gt; real(obj_Master_Controller.Score[obj_Play_Controller.Stock_Index]))
    {
        obj_Master_Controller.Score[obj_Play_Controller.Stock_Index] = obj_Info.Limit[obj_Play_Controller.Stock_Index] - obj_Play_Controller.CurrentObjectCount;
    }

    if(real(obj_Master_Controller.Score[obj_Play_Controller.Stock_Index]) &gt; 0)
    {
        scr_TotalScore();
        
        if(obj_Play_Controller.Stock_Index == 1)
        {
            obj_Master_Controller.NextRoom = Level02;
            instance_create(0,0,obj_FadeOut);
            
        }
        else if(obj_Play_Controller.Stock_Index == 2)
        {
            obj_Master_Controller.NextRoom = Level03;
            instance_create(0,0,obj_FadeOut);
            
        }
        else if(obj_Play_Controller.Stock_Index == 3)
        {
            obj_Master_Controller.NextRoom = Story03;
            instance_create(0,0,obj_FadeOut);
            
        }
        else if(obj_Play_Controller.Stock_Index == 4)
        {
            obj_Master_Controller.NextRoom = Level05;
            instance_create(0,0,obj_FadeOut);
            
        }
        else if(obj_Play_Controller.Stock_Index == 5)
        {
            obj_Master_Controller.NextRoom = Level06;
            instance_create(0,0,obj_FadeOut);
            
        }
        else if(obj_Play_Controller.Stock_Index == 6)
        {
            obj_Master_Controller.NextRoom = Story06;
            instance_create(0,0,obj_FadeOut);
            
        }
        else if(obj_Play_Controller.Stock_Index == 7)
        {
            obj_Master_Controller.NextRoom = Level08;
            instance_create(0,0,obj_FadeOut);
            
        }
        else if(obj_Play_Controller.Stock_Index == 8)
        {
            obj_Master_Controller.NextRoom = Level09;
            instance_create(0,0,obj_FadeOut);
            
        }
        else if(obj_Play_Controller.Stock_Index == 9)
        {
            obj_Master_Controller.NextRoom = Story10;
            instance_create(0,0,obj_FadeOut);
            
        }
        else if(obj_Play_Controller.Stock_Index == 10)
        {
            obj_Master_Controller.NextRoom = Level11;
            instance_create(0,0,obj_FadeOut);
            
        }
        else if(obj_Play_Controller.Stock_Index == 11)
        {
            obj_Master_Controller.NextRoom = Level12;
            instance_create(0,0,obj_FadeOut);
            
        }
        else if(obj_Play_Controller.Stock_Index == 12)
        {
            obj_Master_Controller.NextRoom = Story12;
            instance_create(0,0,obj_FadeOut);
            
        }
        else if(obj_Play_Controller.Stock_Index == 13)
        {
            obj_Master_Controller.NextRoom = Level14;
            instance_create(0,0,obj_FadeOut);
            
        }
        else if(obj_Play_Controller.Stock_Index == 14)
        {
            obj_Master_Controller.NextRoom = Level15;
            instance_create(0,0,obj_FadeOut);
            
        }
        else if(obj_Play_Controller.Stock_Index == 15)
        {
            obj_Master_Controller.NextRoom = Story15;
            instance_create(0,0,obj_FadeOut);
            
        }
        else if(obj_Play_Controller.Stock_Index == 16)
        {
            obj_Master_Controller.NextRoom = Level17;
            instance_create(0,0,obj_FadeOut);
            
        }
        else if(obj_Play_Controller.Stock_Index == 17)
        {
            obj_Master_Controller.NextRoom = Level18;
            instance_create(0,0,obj_FadeOut);
            
        }
        else if(obj_Play_Controller.Stock_Index == 18)
        {
            obj_Master_Controller.NextRoom = Story18;
            instance_create(0,0,obj_FadeOut);
            
        }
        else if(obj_Play_Controller.Stock_Index == 19)
        {
            obj_Master_Controller.NextRoom = Level20;
            instance_create(0,0,obj_FadeOut);
            
        }
        else if(obj_Play_Controller.Stock_Index == 20)
        {
            obj_Master_Controller.NextRoom = Level21;
            instance_create(0,0,obj_FadeOut);
            
        }
        else if(obj_Play_Controller.Stock_Index == 21)
        {
            obj_Master_Controller.NextRoom = Story21;
            instance_create(0,0,obj_FadeOut);
            
        }
        else if(obj_Play_Controller.Stock_Index == 22)
        {
            obj_Master_Controller.NextRoom = Level23;
            instance_create(0,0,obj_FadeOut);
            
        }
        else if(obj_Play_Controller.Stock_Index == 23)
        {
            obj_Master_Controller.NextRoom = Level24;
            instance_create(0,0,obj_FadeOut);
            
        }
        else if(obj_Play_Controller.Stock_Index == 24)
        {
            obj_Master_Controller.NextRoom = Story24;
            instance_create(0,0,obj_FadeOut);
            
        }
        else if(obj_Play_Controller.Stock_Index == 25)
        {
            obj_Master_Controller.NextRoom = Level26;
            instance_create(0,0,obj_FadeOut);
            
        }
        else if(obj_Play_Controller.Stock_Index == 26)
        {
            obj_Master_Controller.NextRoom = Level27;
            instance_create(0,0,obj_FadeOut);
            
        }
        else if(obj_Play_Controller.Stock_Index == 27)
        {
            obj_Master_Controller.NextRoom = Story27;
            instance_create(0,0,obj_FadeOut);
            
        }
        else if(obj_Play_Controller.Stock_Index == 28)
        {
            obj_Master_Controller.NextRoom = Level29;
            instance_create(0,0,obj_FadeOut);
            
        }
        else if(obj_Play_Controller.Stock_Index == 29)
        {
            obj_Master_Controller.NextRoom = Level30;
            instance_create(0,0,obj_FadeOut);
            
        }
        else if(obj_Play_Controller.Stock_Index == 30)
        {
            obj_Master_Controller.NextRoom = Story30;
            instance_create(0,0,obj_FadeOut);
            
        }
        else if(obj_Play_Controller.Stock_Index == 31)
        {
            obj_Master_Controller.NextRoom = Level32;
            instance_create(0,0,obj_FadeOut);
            
        }
        else if(obj_Play_Controller.Stock_Index == 32)
        {
            obj_Master_Controller.NextRoom = Level33;
            instance_create(0,0,obj_FadeOut);
            
        }
        else if(obj_Play_Controller.Stock_Index == 33)
        {
            obj_Master_Controller.NextRoom = Story33;
            instance_create(0,0,obj_FadeOut);
            
        }
        else if(obj_Play_Controller.Stock_Index == 34)
        {
            obj_Master_Controller.NextRoom = Level35;
            instance_create(0,0,obj_FadeOut);
            
        }
        else if(obj_Play_Controller.Stock_Index == 35)
        {
            obj_Master_Controller.NextRoom = Level36;
            instance_create(0,0,obj_FadeOut);
            
        }
        else if(obj_Play_Controller.Stock_Index == 36)
        {
            obj_Master_Controller.NextRoom = Story36;
            instance_create(0,0,obj_FadeOut);
            
        }
        else if(obj_Play_Controller.Stock_Index == 37)
        {
            obj_Master_Controller.NextRoom = Level38;
            instance_create(0,0,obj_FadeOut);
            
        }
        else if(obj_Play_Controller.Stock_Index == 38)
        {
            obj_Master_Controller.NextRoom = Level39;
            instance_create(0,0,obj_FadeOut);
            
        }
        else if(obj_Play_Controller.Stock_Index == 39)
        {
            obj_Master_Controller.NextRoom = Story39;
            instance_create(0,0,obj_FadeOut);
            
        }
        else if(obj_Play_Controller.Stock_Index == 40)
        {
            obj_Master_Controller.NextRoom = Level41;
            instance_create(0,0,obj_FadeOut);
            
        }
        else if(obj_Play_Controller.Stock_Index == 41)
        {
            obj_Master_Controller.NextRoom = Level42;
            instance_create(0,0,obj_FadeOut);
            
        }
        else if(obj_Play_Controller.Stock_Index == 42)
        {
            obj_Master_Controller.NextRoom = Story42;
            instance_create(0,0,obj_FadeOut);
            
        }
        else if(obj_Play_Controller.Stock_Index == 43)
        {
            obj_Master_Controller.NextRoom = Level44;
            instance_create(0,0,obj_FadeOut);
            
        }
        else if(obj_Play_Controller.Stock_Index == 44)
        {
            obj_Master_Controller.NextRoom = Level45;
            instance_create(0,0,obj_FadeOut);
            
        }
        else if(obj_Play_Controller.Stock_Index == 45)
        {
            obj_Master_Controller.NextRoom = Story45;
            instance_create(0,0,obj_FadeOut);
            
        }
        else if(obj_Play_Controller.Stock_Index == 46)
        {
            obj_Master_Controller.NextRoom = Level47;
            instance_create(0,0,obj_FadeOut);
            
        }
        else if(obj_Play_Controller.Stock_Index == 47)
        {
            obj_Master_Controller.NextRoom = Level48;
            instance_create(0,0,obj_FadeOut);
            
        }
        else if(obj_Play_Controller.Stock_Index == 48)
        {
            obj_Master_Controller.NextRoom = Story48;
            instance_create(0,0,obj_FadeOut);
            
        }
        else if(obj_Play_Controller.Stock_Index == 49)
        {
            obj_Master_Controller.NextRoom = Level50;
            instance_create(0,0,obj_FadeOut);
            
        }
        else if(obj_Play_Controller.Stock_Index == 50)
        {
            obj_Master_Controller.NextRoom = Story51;
            instance_create(0,0,obj_FadeOut);
            
        }
              
        //instance_create(room_width/2, room_height/2, obj_DisplayWon);
    }
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(Emitting)
{
    //draw beam path based on returned array:
    //walk through emit array based on emit count
//    LineTracker = 0;
    for(tracker = 0; tracker &lt; (EmitCount); tracker++)
    {
        draw_line(EmitArrayX[tracker], EmitArrayY[tracker],EmitArrayX[tracker+1],EmitArrayY[tracker+1]);
        //EmitScaleX = (abs(EmitArrayX[tracker] - EmitArrayX[tracker+1])/sprite_width);
        //EmitScaleY = (abs(EmitArrayY[tracker] - EmitArrayY[tracker+1])/sprite_height);
        
//        EmitScaleY = point_distance(EmitArrayX[tracker], EmitArrayY[tracker], EmitArrayX[tracker+1], EmitArrayY[tracker+1])/sprite_height;
        
        /*
        if(EmitScaleX == 0)
        {
            EmitScaleX = 1;
        }
        
        if(EmitScaleY == 0)
        {
            EmitScaleY = 1;
        }
        */
        
//        draw_sprite_ext(sprite_index,image_index,EmitArrayX[tracker+1],EmitArrayY[tracker+1],sprite_width,EmitScaleY,EmitAngleArray[LineTracker]-EmitAngleArray[0],c_white,image_alpha);
        
        
        
        
        
        //draw_sprite_ext(sprite_index,image_index,EmitArrayX[tracker+1],EmitArrayY[tracker+1],EmitScaleX,EmitScaleY,EmitAngleArray[LineTracker]-EmitAngleArray[0],c_white,image_alpha);
        
        //draw_sprite_ext(sprite_index,image_index,EmitArrayX[tracker+1],EmitArrayY[tracker+1],point_distance(EmitArrayX[tracker], EmitArrayY[tracker], EmitArrayX[tracker+1], EmitArrayY[tracker+1]),point_distance(EmitArrayX[tracker], EmitArrayY[tracker], EmitArrayX[tracker+1], EmitArrayY[tracker+1])/4,EmitAngleArray[tracker]-EmitAngleArray[0],c_white,image_alpha);
        
        //draw_sprite_ext(sprite_index,image_index,EmitArrayX[tracker+1],EmitArrayY[tracker+1],1,point_distance(EmitArrayX[tracker], EmitArrayY[tracker], EmitArrayX[tracker+1], EmitArrayY[tracker+1])/4,(((EmitAngleArray[tracker]-EmitAngleArray[0])*pi)/180),c_white,image_alpha);
        //((EmitAngle*pi)/180)
        
        
        //draw_sprite_ext(sprite_index,image_index,EmitArrayX[tracker],EmitArrayY[tracker],1,100,0,c_white,image_alpha);//EmitAngle[tracker],c_white,image_alpha);
        
        //draw_sprite_stretched(sprite_index, image_index, EmitArrayX[tracker+1], EmitArrayY[tracker+1], 1, 1000)
        //draw_sprite_stretched(spr_Beam_Standard, image_index, EmitArrayX[tracker+1], EmitArrayY[tracker+1], 1, 1000)
        
//        if((tracker == 0) || (tracker mod 2) == 0 )
//        {
//            LineTracker = LineTracker + 2;
//        }
        
    }    
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
