<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>8</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Display Bounds
DisplayUpperBound = room_height - obj_DisplayBackground.sprite_height;
DisplayLowerBound = room_height;
DisplayWestBound = 0;
DisplayEastBound = room_width;

    //1 Buttons Bounds
    ButtonsUpperBound = DisplayUpperBound + 36;
    ButtonsLowerBound = DisplayLowerBound - 12;;
    ButtonsWestBound = DisplayWestBound + 10;
    ButtonsEastBound = ButtonsWestBound + 120;
    
        //1 Clear Button
        ClearUpperBound = ButtonsUpperBound + 12;
        ClearLowerBound = ClearUpperBound + 36;
        ClearWestBound = ButtonsWestBound + 10;
        ClearEastBound = ButtonsEastBound - 10;
        //3 Options
        OptionsLowerBound = ButtonsLowerBound - 12;
        OptionsUpperBound = OptionsLowerBound - 36;
        OptionsWestBound = ButtonsWestBound + 10;
        OptionsEastBound = ButtonsEastBound - 10;
        //2 Level Select
        LevelSelectUpperBound = ClearLowerBound;
        LevelSelectLowerBound = OptionsUpperBound;
        LevelSelectWestBound = ButtonsWestBound + 10;
        LevelSelectEastBound = ButtonsEastBound - 10;
    
    //3 Info Bounds
    InfoUpperBound = DisplayUpperBound + 36;
    InfoLowerBound = DisplayLowerBound - 12;
    InfoEastBound = DisplayEastBound - 10;
    InfoWestBound = InfoEastBound - 120;
    
        //RotateLeft
        RotateLeftUpperBound = InfoUpperBound + 4;
        RotateLeftLowerBound = RotateLeftUpperBound + (abs(InfoUpperBound - InfoLowerBound)/2);
        RotateLeftWestBound = InfoWestBound + 4;
        RotateLeftEastBound = RotateLeftWestBound + 56;
        //RotateRight
        RotateRightUpperBound = InfoUpperBound + 4;
        RotateRightLowerBound = RotateLeftUpperBound + (abs(InfoUpperBound - InfoLowerBound)/2);
        RotateRightWestBound = RotateLeftEastBound;
        RotateRightEastBound = InfoEastBound - 4;
        //Par
        ParUpperBound = RotateLeftLowerBound;
        ParLowerBound = InfoLowerBound - 4;
        ParWestBound = InfoWestBound + 4;
        ParEastBound = InfoEastBound - 4;
            //ParLeft
            ParLeftUpperBound = ParUpperBound + 4;
            ParLeftLowerBound = ParLowerBound - 4;
            ParLeftWestBound = ParWestBound + 4;
            ParLeftEastBound  = ParWestBound + 56;  
            //ParRight
            ParRightUpperBound = ParUpperBound + 4;
            ParRightLowerBound = ParLowerBound - 4;
            ParRightWestBound = ParLeftEastBound;
            ParRightEastBound = ParEastBound - 4;  
    
    //2 Title Bounds
    TitleUpperBound = DisplayUpperBound;
    TitleLowerBound = DisplayUpperBound + 36;
    
    TitleWestBound = ButtonsEastBound + (InfoWestBound - ButtonsEastBound)/3 + 12;
    TitleEastBound = InfoWestBound - (InfoWestBound - ButtonsEastBound)/3 - 12;

    //2 Ingredients Bounds
    IngredientsTrayUpperBound = TitleLowerBound;
    IngredientsTrayLowerBound = DisplayLowerBound - 12;;
    
    IngredientsTrayWestBound = ButtonsEastBound + 12;
    IngredientsTrayEastBound = InfoWestBound - 12;

    
//Width: 2048
//Height: 325
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 0;

Emitting = false;
Searching = false;

EmitTracker = 0;
EmitCount = 0;
//EmitArrayX[0] = 0; //obj_Emitter.x;
//EmitArrayY[0] = 0; //obj_Emitter.y;

//EmitAngle = 90; //obj_Emitter.image_angle
ImageAngle = 0;

//i = 0; //obj_Emitter.x;
//j = 0; //obj_Emitter.y;

AdjustX = 0;
AdjustY = 0;

MirrorCount = 0;

//EmitAngleArray[0] = 90;

CurrentContactObject = 0;

Targeting = false;
Winning = 0;

AngleDiff = 0;
Turning = false;

LastObjectTouched = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(room_get_name(room) == "Level01")
{
    Stock_Index = 1;
}
else if(room_get_name(room) == "Level02")
{
    Stock_Index = 2;
}
else if(room_get_name(room) == "Level03")
{
    Stock_Index = 3;
}
else if(room_get_name(room) == "Level04")
{
    Stock_Index = 4;
}
else if(room_get_name(room) == "Level05")
{
    Stock_Index = 5;
}
else if(room_get_name(room) == "Level06")
{
    Stock_Index = 6;
}
else if(room_get_name(room) == "Level07")
{
    Stock_Index = 7;
}
else if(room_get_name(room) == "Level08")
{
    Stock_Index = 8;
}
else if(room_get_name(room) == "Level09")
{
    Stock_Index = 9;
}
else if(room_get_name(room) == "Level10")
{
    Stock_Index = 10;
}
else if(room_get_name(room) == "Level11")
{
    Stock_Index = 11;
}
else if(room_get_name(room) == "Level12")
{
    Stock_Index = 12;
}
else if(room_get_name(room) == "Level13")
{
    Stock_Index = 13;
}
else if(room_get_name(room) == "Level14")
{
    Stock_Index = 14;
}
else if(room_get_name(room) == "Level15")
{
    Stock_Index = 15;
}
else if(room_get_name(room) == "Level16")
{
    Stock_Index = 16;
}
else if(room_get_name(room) == "Level17")
{
    Stock_Index = 17;
}
else if(room_get_name(room) == "Level18")
{
    Stock_Index = 18;
}
else if(room_get_name(room) == "Level19")
{
    Stock_Index = 19;
}
else if(room_get_name(room) == "Level20")
{
    Stock_Index = 20;
}
else if(room_get_name(room) == "Level21")
{
    Stock_Index = 21;
}
else if(room_get_name(room) == "Level22")
{
    Stock_Index = 22;
}
else if(room_get_name(room) == "Level23")
{
    Stock_Index = 23;
}
else if(room_get_name(room) == "Level24")
{
    Stock_Index = 24;
}
else if(room_get_name(room) == "Level25")
{
    Stock_Index = 25;
}
else if(room_get_name(room) == "Level26")
{
    Stock_Index = 26;
}
else if(room_get_name(room) == "Level27")
{
    Stock_Index = 27;
}
else if(room_get_name(room) == "Level28")
{
    Stock_Index = 28;
}
else if(room_get_name(room) == "Level29")
{
    Stock_Index = 29;
}
else if(room_get_name(room) == "Level30")
{
    Stock_Index = 30;
}
else if(room_get_name(room) == "Level31")
{
    Stock_Index = 31;
}
else if(room_get_name(room) == "Level32")
{
    Stock_Index = 32;
}
else if(room_get_name(room) == "Level33")
{
    Stock_Index = 33;
}
else if(room_get_name(room) == "Level34")
{
    Stock_Index = 34;
}
else if(room_get_name(room) == "Level35")
{
    Stock_Index = 35;
}
else if(room_get_name(room) == "Level36")
{
    Stock_Index = 36;
}
else if(room_get_name(room) == "Level37")
{
    Stock_Index = 37;
}
else if(room_get_name(room) == "Level38")
{
    Stock_Index = 38;
}
else if(room_get_name(room) == "Level39")
{
    Stock_Index = 39;
}
else if(room_get_name(room) == "Level40")
{
    Stock_Index = 40;
}
else if(room_get_name(room) == "Level41")
{
    Stock_Index = 41;
}
else if(room_get_name(room) == "Level42")
{
    Stock_Index = 42;
}
else if(room_get_name(room) == "Level43")
{
    Stock_Index = 43;
}
else if(room_get_name(room) == "Level44")
{
    Stock_Index = 44;
}
else if(room_get_name(room) == "Level45")
{
    Stock_Index = 45;
}
else if(room_get_name(room) == "Level46")
{
    Stock_Index = 46;
}
else if(room_get_name(room) == "Level47")
{
    Stock_Index = 47;
}
else if(room_get_name(room) == "Level48")
{
    Stock_Index = 48;
}
else if(room_get_name(room) == "Level49")
{
    Stock_Index = 49;
}
else if(room_get_name(room) == "Level50")
{
    Stock_Index = 50;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Current_1SidedMirror = obj_Info.Stock_1SidedMirror[Stock_Index];
Current_2SidedMirror = obj_Info.Stock_2SidedMirror[Stock_Index];
Stock_Count = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//1 Ingredient
    IngredientsUpperBound[1] = IngredientsTrayUpperBound + 12;
    IngredientsLowerBound[1] = IngredientsUpperBound[1] + 128;
    
    IngredientsWestBound[1] = IngredientsTrayWestBound + 12;
    IngredientsEastBound[1] = IngredientsWestBound[1] + 128;
    
//1 Quantity
    QuantityUpperBound[1] = IngredientsUpperBound[1] + (abs(IngredientsUpperBound[1] - IngredientsLowerBound[1])/2);
    QuantityLowerBound[1] = IngredientsLowerBound[1];
    
    QuantityWestBound[1] = IngredientsEastBound[1] + 12;
    QuantityEastBound[1] = QuantityWestBound[1] + 64;
        
//2 Ingredient
    IngredientsUpperBound[2] = IngredientsUpperBound[1];
    IngredientsLowerBound[2] = IngredientsUpperBound[2] + 128;
    
    IngredientsWestBound[2] = QuantityEastBound[1] + 12;
    IngredientsEastBound[2] = IngredientsWestBound[2] + 128;

//2 Quantity
    QuantityUpperBound[2] = IngredientsUpperBound[2] + (abs(IngredientsUpperBound[2] - IngredientsLowerBound[2])/2);
    QuantityLowerBound[2] = IngredientsLowerBound[2];
    
    QuantityWestBound[2] = IngredientsEastBound[2] + 12;
    QuantityEastBound[2] = QuantityWestBound[2] + 64;

//3 Ingredient
    IngredientsUpperBound[3] = IngredientsUpperBound[2];
    IngredientsLowerBound[3] = IngredientsUpperBound[3] + 128;
    
    IngredientsWestBound[3] = QuantityEastBound[2] + 12;
    IngredientsEastBound[3] = IngredientsWestBound[3] + 128;

//3 Quantity
    QuantityUpperBound[3] = IngredientsUpperBound[3] + (abs(IngredientsUpperBound[3] - IngredientsLowerBound[3])/2);
    QuantityLowerBound[3] = IngredientsLowerBound[3];
    
    QuantityWestBound[3] = IngredientsEastBound[3] + 12;
    QuantityEastBound[3] = QuantityWestBound[3] + 64;
    
//4 Ingredient
    IngredientsUpperBound[4] = IngredientsUpperBound[3];
    IngredientsLowerBound[4] = IngredientsUpperBound[4] + 128;
    
    IngredientsWestBound[4] = QuantityEastBound[3] + 12;
    IngredientsEastBound[4] = IngredientsWestBound[4] + 128;

//4 Quantity
    QuantityUpperBound[4] = IngredientsUpperBound[4] + (abs(IngredientsUpperBound[4] - IngredientsLowerBound[4])/2);
    QuantityLowerBound[4] = IngredientsLowerBound[4];
    
    QuantityWestBound[4] = IngredientsEastBound[4] + 12;
    QuantityEastBound[4] = QuantityWestBound[4] + 64;

//5 Ingredient
    IngredientsUpperBound[5] = IngredientsUpperBound[4];
    IngredientsLowerBound[5] = IngredientsUpperBound[5] + 128;
    
    IngredientsWestBound[5] = QuantityEastBound[4] + 12;
    IngredientsEastBound[5] = IngredientsWestBound[5] + 128;

//5 Quantity
    QuantityUpperBound[5] = IngredientsUpperBound[5] + (abs(IngredientsUpperBound[5] - IngredientsLowerBound[5])/2);
    QuantityLowerBound[5] = IngredientsLowerBound[5];
    
    QuantityWestBound[5] = IngredientsEastBound[5] + 12;
    QuantityEastBound[5] = QuantityWestBound[5] + 64;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Stock_Count = 1;

//if there are any 1 sided mirrors
if( obj_Info.Stock_1SidedMirror[Stock_Index] &gt; 0 )
{ 
    instance_create(IngredientsWestBound[Stock_Count]+(abs(IngredientsEastBound[Stock_Count]-IngredientsWestBound[Stock_Count])/2), IngredientsUpperBound[Stock_Count]+(abs(IngredientsLowerBound[Stock_Count]-IngredientsUpperBound[Stock_Count])/2),obj_Mirror_1Sided_Button);
}
//if there are any 2 sided mirrors
else if( obj_Info.Stock_2SidedMirror[Stock_Index] &gt; 0 )
{
    instance_create(IngredientsWestBound[Stock_Count]+(abs(IngredientsEastBound[Stock_Count]-IngredientsWestBound[Stock_Count])/2), IngredientsUpperBound[Stock_Count]+(abs(IngredientsLowerBound[Stock_Count]-IngredientsUpperBound[Stock_Count])/2),obj_Mirror_2Sided_Button);
}
    
Stock_Count = Stock_Count + 1;

if(Stock_Count &gt; 1)
{
    //if there are any 2 sided mirrors
    if( obj_Info.Stock_2SidedMirror[Stock_Index] &gt; 0 )
    {
        instance_create(IngredientsWestBound[Stock_Count]+(abs(IngredientsEastBound[Stock_Count]-IngredientsWestBound[Stock_Count])/2), IngredientsUpperBound[Stock_Count]+(abs(IngredientsLowerBound[Stock_Count]-IngredientsUpperBound[Stock_Count])/2),obj_Mirror_2Sided_Button);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>CurrentObjectCount = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_create(0,0,obj_FadeIn);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(Emitting == true)
{
    Emitting = false;
}
else
{
    //EmitAngle is set at this point (at least by the emitter)
    EmitAngleInRadians = ((EmitAngle*pi)/180);

    //determine beam path:
    EmitArrayX[0] = obj_Emitter.x;
    EmitArrayY[0] = obj_Emitter.y;
    
    EmitTracker = 1;
    EmitCount = 0;
    
    i = obj_Emitter.x;
    j = obj_Emitter.y;
    
    CurrentContactObject = obj_Emitter.id;
    
    while(!Emitting)
    {
        //determine angle/emit direction
        if(EmitAngle == 0)
        {
            AdjustX = 1;
            AdjustY = 0;
        }
        else if(EmitAngle == 90)
        {
            AdjustX = 0;
            AdjustY = -1;
        }
        else if(EmitAngle == 180)
        {
            AdjustX = -1;
            AdjustY = 0;
        }
        else if(EmitAngle == 270)
        {
            AdjustX = 0;
            AdjustY = 1;    
        }
        else if(EmitAngle == 360)
        {
            AdjustX = 1;
            AdjustY = 0;    
        }
        else if((EmitAngle &gt; 0) &amp;&amp; (EmitAngle &lt; 90)) //quadrant 1
        {
            AdjustX = cos(EmitAngleInRadians);
            AdjustY = sin(EmitAngleInRadians) * (-1);
        }
        else if((EmitAngle &gt; 90) &amp;&amp; (EmitAngle &lt; 180)) //quadrant 2
        {
            AdjustX = cos(EmitAngleInRadians);
            AdjustY = sin(EmitAngleInRadians) * (-1);
        }
        else if((EmitAngle &gt; 180) &amp;&amp; (EmitAngle &lt; 270)) //quadrant 3
        {
            AdjustX = cos(EmitAngleInRadians);
            AdjustY = sin(EmitAngleInRadians) * (-1);
        }
        else if((EmitAngle &gt; 270) &amp;&amp; (EmitAngle &lt; 360)) //quadrant 4
        {
            AdjustX = cos(EmitAngleInRadians);
            AdjustY = sin(EmitAngleInRadians) * (-1);
        }
        
        Searching = true;
        //loop through coordinates on line based on angle
        while(Searching)
        {
            if(Emitting)
            {
                break;
            }
            
            i= i + AdjustX;
            j= j + AdjustY;
            
            //if GameObject is found
            if((position_meeting(i,j,obj_GameObject)) &amp;&amp; (instance_position(i,j,obj_GameObject).id != CurrentContactObject))
            {
                CurrentContactObject = (instance_position(i,j,obj_GameObject));
                
            /*
                //if GameObject is Emitter and no beams have been drawn yet
                if(object_get_name(instance_position(i,j,obj_GameObject).object_index) == "obj_Emitter" &amp;&amp; EmitCount == 0)
                {
                    //continue;
                }
                else 
            */    
                
                //if GameObject is Opaque
                if(position_meeting(i,j,obj_Opaque))
                {
                    //then assign coordinates
                    EmitArrayX[EmitTracker] = i;
                    EmitArrayY[EmitTracker] = j;
                    EmitTracker++;
                    EmitCount++;
                    
                    //end searching
                    Searching = false;
                    Emitting = true;
                    break;
                }
                //if GameObject is Reflective
                else if(position_meeting(i,j,obj_Reflective))
                {
                    //instance_destroy();
                    
                    //then assign coordinates
                    EmitArrayX[EmitTracker] = i;
                    EmitArrayY[EmitTracker] = j;
                    EmitTracker++;
                    EmitCount++;
                    
                    ImageAngle = (instance_position(i,j,obj_Reflective).image_angle);
                    
                    
                    //handle reflection:
                    //determine from which object the light is reflecting
                    //if 2 sided mirror
                    if(object_get_name(instance_position(i,j,obj_Reflective).object_index) == "obj_Mirror_2Sided" || object_get_name(instance_position(i,j,obj_Reflective).object_index) == "obj_Mirror_1Sided")
                    {
                        AngleDiff = (EmitAngle - ImageAngle);
                        //instance_destroy();
                    
                        while((AngleDiff &lt; 0) || (AngleDiff &gt; 359))
                        {
                        
                            if(AngleDiff &gt; 360)
                            {
                                AngleDiff = AngleDiff - 360;
                            }
                            else if(AngleDiff &lt; 0)
                            {
                                AngleDiff = AngleDiff + 360;
                            }
                        }
                        
                        //if difference is 0
                        if(AngleDiff == 0)
                        {
                            //end as if opaque (hits the side)
                            Emitting = true;
                        }
                        //if difference is 180
                        else if(AngleDiff == 180)
                        {
                            //end as if opaque (hits the side)
                            Emitting = true;
                        }
                        //if difference is 360
                        else if(AngleDiff == 360)
                        {
                            //end as if opaque (hits the side)
                            Emitting = true;
                        }
                        //if difference is 90
                        else if(AngleDiff == 90)
                        {
                            //end as if opaque (reflects back on itself)
                            Emitting = true;
                        }
                        //if difference is 270
                        else if(AngleDiff == 270)
                        {
                            //end as if opaque (reflects back on itself)
                            Emitting = true;
                        }
                        //if difference is from 1 to 89 //quadrant 1
                        else if( (AngleDiff &gt; 0) &amp;&amp; (AngleDiff &lt; 90) )
                        {
                            //if reflecting vertically (quadrant 1 to quandrant 4)
                            EmitAngle = ImageAngle - (EmitAngle - 180) + (ImageAngle - 180);
                            EmitAngleInRadians = ((EmitAngle*pi)/180);
                            //instance_destroy();
                    //Emitting = true;
                    
                            //from [45,0] to [315,0]
                                //C = B - (A - 180) + D = B - (A - 180) + (B - 180) = 0 - (45 - 180) + (0 - 180) = 0 - (-135) + (-180) = 0 + (135) - (180) = -45 = 315 //from quadrant 1 to 4
                            
                            //from [90,45] to [0,45]
                                //C = B - (A - 180) + D = B - (A - 180) + (B - 180) = 45 - (90 - 180) + (45 - 180) = 45 - (-90) + (-135) = 45 + (90) - (135) = 135 - 135 = 0  //from quadrant 1 to 4
                        
                            //from [89,0] to [271,0]
                                //C = B - (A - 180) + D = B - (A - 180) + (B - 180) = 0 - (89 - 180) + (0 - 180) = 0 - (-91) + (-180) = 0 + (91) - (180) = -89 = 271 //from quadrant 1 to 4
                            
                            //from [90,1] to [272,1]
                                //C = B - (A - 180) + D = B - (A - 180) + (B - 180) = 1 - (90 - 180) + (1 - 180) = 1 - (-90) + (-179) = 1 + (90) - (179) = -88 = 272 //from quadrant 1 to 4
                            
                            
                            //from [1,0] to [359,0]
                                //C = B - (A - 180) + D = B - (A - 180) + (B - 180) = 0 - (1 - 180) + (0 - 180) = 0 - (-179) + (-180) = 0 + (179) - (180) = -1 = 359 //from quadrant 1 to 4
                                
                            //from [90,89] to [88,89]
                                //C = B - (A - 180) + D = B - (A - 180) + (B - 180) = 89 - (90 - 180) + (89 - 180) = 89 - (-90) + (-91) = 89 + (90) - (91) = 88 //from quadrant 1 to 4
                                
                            //if reflecting horizontally (quadrant 1 to quadrant 2)
                                //180 - (EmitAngle - (instance_position(i,j,obj_Reflective).image_angle))
                            
                            //this should never happen:
                                //in cases where the beam strikes the side of the mirror, the object should act as if opaque
                        }
                        //if difference is from 91 to 179 //quadrant 2
                        else if( (AngleDiff &gt; 90) &amp;&amp; (AngleDiff &lt; 180) )
                        {
                            //if reflecting vertically (quadrant 2 to quandrant 3)
                            EmitAngle = ImageAngle - (EmitAngle - 180) + (ImageAngle - 180);
                            EmitAngleInRadians = ((EmitAngle*pi)/180);
                            
                            //from [135,0] to [225,0]
                                //C = B - (A - 180) + D = B - (A - 180) + (B - 180) = 0 - (135 - 180) + (0 - 180) = 0 - (-45) + (-180) = 0 + (45) - (180) = -135 = 225 //from quadrant 2 to 3
                            
                            //from [90,315] to [180,315]
                                //C = B - (A - 180) + D = B - (A - 180) + (B - 180) = 315 - (90 - 180) + (315 - 180) = 315 - (-90) + (135) = 315 + (90) + (135) = 540 = 180 //from quadrant 1 or 2 to 3 or 4
                          
                            //from [91,0] to [91,0]
                                //C = B - (A - 180) + D = B - (A - 180) + (B - 180) = 0 - (91 - 180) + (0 - 180) = 0 - (-89) + (-180) = 0 + (89) - (180) = 91  //from quadrant 2 to 3
                                
                            //from [90,359] to [268,359]
                                //C = B - (A - 180) + D = B - (A - 180) + (B - 180) = 359 - (90 - 180) + (359 - 180) = 359 - (-90) + (179) = 359 + (90) + (179) = 628 = 268 //from quadrant 2 to 3
                            
                            //from [179,0] to [181,0]
                                //C = B - (A - 180) + D = B - (A - 180) + (B - 180) = 0 - (179 - 180) + (0 - 180) = 0 - (-1) + (-180) = 0 + (1) - (180) = -179 = 181 //from quadrant 2 to 3
                            
                            //from [90,271] to [92,271]
                                //C = B - (A - 180) + D = B - (A - 180) + (B - 180) = 271 - (90 - 180) + (271 - 180) = 271 - (-90) + (91) = 271 + (90) + (91) = 452 = 92 //from quadrant 1 or 2 to 3     
                                
                            //if reflecting horizontally (quadrant 2 to quadrant 1)
                                //0 + (180 - (EmitAngle - (instance_position(i,j,obj_Reflective).image_angle)))
                            
                            //this should never happen:
                                //in cases where the beam strikes the side of the mirror, the object should act as if opaque
                             
                        }
                        //if difference is from 181 to 269 //quadrant 3
                        else if( (AngleDiff &gt; 180) &amp;&amp; (AngleDiff &lt; 270) )
                        {
                            //if reflecting vertically (quadrant 3 to quandrant 2)
                            EmitAngle = ImageAngle - (EmitAngle - 180) + (ImageAngle - 180);
                            EmitAngleInRadians = ((EmitAngle*pi)/180);
                            
                            //from [181,0] to [179,0]
                                //C = B - (A - 180) + D = B - (A - 180) + (B - 180) = 0 - (181 - 180) + (0 - 180) = 0 - 1 + (-180) = 0 - 1 - 180 = -181 = 179 //from quadrant 3 to 2
                            
                            //from [90,269] to [88,269]
                                //C = B - (A - 180) + D = B - (A - 180) + (B - 180) = 269 - (90 - 180) + (269 - 180) = 269 - (-90) + 89 = 269 + 90 + 89 = 448 = 88 //from quadrant 3 to 2
                    
                            //from [269,0] to [91,0]
                                //C = B - (A - 180) + D = B - (A - 180) + (B - 180) = 0 - (269 - 180) + (0 - 180) = 0 - (89) + (-180) = -269 = 91 //from quadrant 3 to 2
                            
                            //from [90,181] to [272,181]
                                //C = B - (A - 180) + D = B - (A - 180) + (B - 180) = 181 - (90 - 180) + (181 - 180) = 181 - (-90) + (1) = 181 + (90) + (1) = 272 //from quadrant 3 to 2
                            
                            //from [225,0] to [,0]
                                //C = B - (A - 180) + D = B - (A - 180) + (B - 180) = 0 - (225 - 180) + (0 - 180) = 0 - (45) + (-180) = 0 - (45) - (180) = -225 = 135 //from quadrant 3 to 2
                            
                            //from [90,225] to [,225]
                                //C = B - (A - 180) + D = B - (A - 180) + (B - 180) = 225 - (90 - 180) + (225 - 180) = 225 - (-90) + (45) = 225 + (90) + (45) = 360 = 0 //from quadrant 3 to 2
                            
                            //if reflecting horizontally (quadrant 3 to quadrant 4)
                                //270 + (270 - (EmitAngle - (instance_position(i,j,obj_Reflective).image_angle)))
                            
                            //this should never happen:
                                //in cases where the beam strikes the side of the mirror, the object should act as if opaque
                                        
                        }
                        //if difference is from 271 to 359 //quadrant 4
                        else if( (AngleDiff &gt; 270) &amp;&amp; (AngleDiff &lt; 360) )
                        {
                            //if reflecting vertically (quadrant 4 to quandrant 1)
                            EmitAngle = ImageAngle - (EmitAngle - 180) + (ImageAngle - 180);
                            EmitAngleInRadians = ((EmitAngle*pi)/180);
                            
                            //from [315,0] to [45,0]
                                //C = B - (A - 180) + D = 0 - (315 - 180) + (0 - 180) = 0 - (135) + (-180) = 0 - (135) - (180) = -315 = 45 //from quadrant 4 to 1
                            
                            //from [90,135] to [180,135]
                                //C = B - (A - 180) + D = 135 - (90 - 180) + (135 - 180) = 135 - (90 - 180) + (135 - 180) = 135 - (-90) + (-45) = 135 + (90) - (45) = 180 //from quadrant 4 to 1
                            
                            //from [271,0] to [89,0]
                                //C = B - (A - 180) + D = B - (A - 180) + (B - 180) = 0 - (271 - 180) + (0 - 180) = 0 - (91) + (-180) = 0 - (91) - (180) = -271 = 89  //from quadrant 4 to 1
                                
                            //from [90,269] to [88,269]
                                //C = B - (A - 180) + D = B - (A - 180) + (B - 180) = 269 - (90 - 180) + (269 - 180) = 269 - (-90) + (89) = 269 + (90) + (89) = 448 = 88 //from quadrant 4 to 1
                              
                            //from [359,0] to [1,0]
                                //C = B - (A - 180) + D = B - (A - 180) + (B - 180) = 0 - (359 - 180) + (0 - 180) = 0 - (179) + (-180) = 0 - (179) - (180) = -359 = 1 //from quadrant 4 to 1
                            
                            //from [90,181] to [272,181]
                                //C = B - (A - 180) + D = B - (A - 180) + (B - 180) = 181 - (90 - 180) + (181 - 180) = 181 - (-90) + (1) = 181 + (90) + (1) = 272 //from quadrant 4 to 1
                            
                            //if reflecting horizontally (quadrant 4 to quadrant 3)
                                //180 + (360 - (EmitAngle - (instance_position(i,j,obj_Reflective).image_angle)))
                                
                            //this should never happen:
                                //in cases where the beam strikes the side of the mirror, the object should act as if opaque
                        }
                    }
                    
                    while((EmitAngle &lt; 0) || (EmitAngle &gt; 359))
                    {
                    
                        if(EmitAngle &gt; 360)
                        {
                            EmitAngle = EmitAngle - 360;
                        }
                        else if(EmitAngle &lt; 0)
                        {
                            EmitAngle = EmitAngle + 360;
                        }
                    }
                    EmitAngleInRadians = ((EmitAngle*pi)/180);
                    EmitAngleArray[EmitTracker] = EmitAngle;
                            
                    //loop again
                    Searching = false;
                }
                    //instance_destroy();
           }
        }
    }
    i = obj_Emitter.x;
    j = obj_Emitter.y;
    EmitAngle = Starting_Angle;
    EmitAngleInRadians = ((EmitAngle*pi)/180);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(Emitting)
{
    if(position_meeting(EmitArrayX[EmitTracker-1],EmitArrayY[EmitTracker-1],obj_Receiver))
    {
        (instance_position(EmitArrayX[EmitTracker-1],EmitArrayY[EmitTracker-1],obj_Receiver)).image_index = 1;
        Winning = Winning + 1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if(Winning == obj_Info.Stock_Receiver[Stock_Index])
{
    if((obj_Info.Limit[Stock_Index] - CurrentObjectCount) &gt; real(obj_Master_Controller.Score[Stock_Index]))
    {
        obj_Master_Controller.Score[Stock_Index] = obj_Info.Limit[Stock_Index] - CurrentObjectCount;
    }

    if(real(obj_Master_Controller.Score[Stock_Index]) &gt; 0)
    {
        scr_TotalScore();
        
        if(Stock_Index == 1)
        {
            obj_Master_Controller.NextRoom = Level02;
            instance_create(0,0,obj_FadeOut);
            
        }
        else if(Stock_Index == 2)
        {
            obj_Master_Controller.NextRoom = Level03;
            instance_create(0,0,obj_FadeOut);
            
        }
        else if(Stock_Index == 3)
        {
            obj_Master_Controller.NextRoom = Story03;
            instance_create(0,0,obj_FadeOut);
            
        }
        else if(Stock_Index == 4)
        {
            obj_Master_Controller.NextRoom = Level05;
            instance_create(0,0,obj_FadeOut);
            
        }
        else if(Stock_Index == 5)
        {
            obj_Master_Controller.NextRoom = Level06;
            instance_create(0,0,obj_FadeOut);
            
        }
        else if(Stock_Index == 6)
        {
            obj_Master_Controller.NextRoom = Story06;
            instance_create(0,0,obj_FadeOut);
            
        }
        else if(Stock_Index == 7)
        {
            obj_Master_Controller.NextRoom = Level08;
            instance_create(0,0,obj_FadeOut);
            
        }
        else if(Stock_Index == 8)
        {
            obj_Master_Controller.NextRoom = Level09;
            instance_create(0,0,obj_FadeOut);
            
        }
        else if(Stock_Index == 9)
        {
            obj_Master_Controller.NextRoom = Story10;
            instance_create(0,0,obj_FadeOut);
            
        }
        else if(Stock_Index == 10)
        {
            obj_Master_Controller.NextRoom = Level11;
            instance_create(0,0,obj_FadeOut);
            
        }
        else if(Stock_Index == 11)
        {
            obj_Master_Controller.NextRoom = Level12;
            instance_create(0,0,obj_FadeOut);
            
        }
        else if(Stock_Index == 12)
        {
            obj_Master_Controller.NextRoom = Story12;
            instance_create(0,0,obj_FadeOut);
            
        }
        else if(Stock_Index == 13)
        {
            obj_Master_Controller.NextRoom = Level14;
            instance_create(0,0,obj_FadeOut);
            
        }
        else if(Stock_Index == 14)
        {
            obj_Master_Controller.NextRoom = Level15;
            instance_create(0,0,obj_FadeOut);
            
        }
        else if(Stock_Index == 15)
        {
            obj_Master_Controller.NextRoom = Story15;
            instance_create(0,0,obj_FadeOut);
            
        }
        else if(Stock_Index == 16)
        {
            obj_Master_Controller.NextRoom = Level17;
            instance_create(0,0,obj_FadeOut);
            
        }
        else if(Stock_Index == 17)
        {
            obj_Master_Controller.NextRoom = Level18;
            instance_create(0,0,obj_FadeOut);
            
        }
        else if(Stock_Index == 18)
        {
            obj_Master_Controller.NextRoom = Story18;
            instance_create(0,0,obj_FadeOut);
            
        }
        else if(Stock_Index == 19)
        {
            obj_Master_Controller.NextRoom = Level20;
            instance_create(0,0,obj_FadeOut);
            
        }
        else if(Stock_Index == 20)
        {
            obj_Master_Controller.NextRoom = Level21;
            instance_create(0,0,obj_FadeOut);
            
        }
        else if(Stock_Index == 21)
        {
            obj_Master_Controller.NextRoom = Story21;
            instance_create(0,0,obj_FadeOut);
            
        }
        else if(Stock_Index == 22)
        {
            obj_Master_Controller.NextRoom = Level23;
            instance_create(0,0,obj_FadeOut);
            
        }
        else if(Stock_Index == 23)
        {
            obj_Master_Controller.NextRoom = Level24;
            instance_create(0,0,obj_FadeOut);
            
        }
        else if(Stock_Index == 24)
        {
            obj_Master_Controller.NextRoom = Story24;
            instance_create(0,0,obj_FadeOut);
            
        }
        else if(Stock_Index == 25)
        {
            obj_Master_Controller.NextRoom = Level26;
            instance_create(0,0,obj_FadeOut);
            
        }
        else if(Stock_Index == 26)
        {
            obj_Master_Controller.NextRoom = Level27;
            instance_create(0,0,obj_FadeOut);
            
        }
        else if(Stock_Index == 27)
        {
            obj_Master_Controller.NextRoom = Story27;
            instance_create(0,0,obj_FadeOut);
            
        }
        else if(Stock_Index == 28)
        {
            obj_Master_Controller.NextRoom = Level29;
            instance_create(0,0,obj_FadeOut);
            
        }
        else if(Stock_Index == 29)
        {
            obj_Master_Controller.NextRoom = Level30;
            instance_create(0,0,obj_FadeOut);
            
        }
        else if(Stock_Index == 30)
        {
            obj_Master_Controller.NextRoom = Story30;
            instance_create(0,0,obj_FadeOut);
            
        }
        else if(Stock_Index == 31)
        {
            obj_Master_Controller.NextRoom = Level32;
            instance_create(0,0,obj_FadeOut);
            
        }
        else if(Stock_Index == 32)
        {
            obj_Master_Controller.NextRoom = Level33;
            instance_create(0,0,obj_FadeOut);
            
        }
        else if(Stock_Index == 33)
        {
            obj_Master_Controller.NextRoom = Story33;
            instance_create(0,0,obj_FadeOut);
            
        }
        else if(Stock_Index == 34)
        {
            obj_Master_Controller.NextRoom = Level35;
            instance_create(0,0,obj_FadeOut);
            
        }
        else if(Stock_Index == 35)
        {
            obj_Master_Controller.NextRoom = Level36;
            instance_create(0,0,obj_FadeOut);
            
        }
        else if(Stock_Index == 36)
        {
            obj_Master_Controller.NextRoom = Story36;
            instance_create(0,0,obj_FadeOut);
            
        }
        else if(Stock_Index == 37)
        {
            obj_Master_Controller.NextRoom = Level38;
            instance_create(0,0,obj_FadeOut);
            
        }
        else if(Stock_Index == 38)
        {
            obj_Master_Controller.NextRoom = Level39;
            instance_create(0,0,obj_FadeOut);
            
        }
        else if(Stock_Index == 39)
        {
            obj_Master_Controller.NextRoom = Story39;
            instance_create(0,0,obj_FadeOut);
            
        }
        else if(Stock_Index == 40)
        {
            obj_Master_Controller.NextRoom = Level41;
            instance_create(0,0,obj_FadeOut);
            
        }
        else if(Stock_Index == 41)
        {
            obj_Master_Controller.NextRoom = Level42;
            instance_create(0,0,obj_FadeOut);
            
        }
        else if(Stock_Index == 42)
        {
            obj_Master_Controller.NextRoom = Story42;
            instance_create(0,0,obj_FadeOut);
            
        }
        else if(Stock_Index == 43)
        {
            obj_Master_Controller.NextRoom = Level44;
            instance_create(0,0,obj_FadeOut);
            
        }
        else if(Stock_Index == 44)
        {
            obj_Master_Controller.NextRoom = Level45;
            instance_create(0,0,obj_FadeOut);
            
        }
        else if(Stock_Index == 45)
        {
            obj_Master_Controller.NextRoom = Story45;
            instance_create(0,0,obj_FadeOut);
            
        }
        else if(Stock_Index == 46)
        {
            obj_Master_Controller.NextRoom = Level47;
            instance_create(0,0,obj_FadeOut);
            
        }
        else if(Stock_Index == 47)
        {
            obj_Master_Controller.NextRoom = Level48;
            instance_create(0,0,obj_FadeOut);
            
        }
        else if(Stock_Index == 48)
        {
            obj_Master_Controller.NextRoom = Story48;
            instance_create(0,0,obj_FadeOut);
            
        }
        else if(Stock_Index == 49)
        {
            obj_Master_Controller.NextRoom = Level50;
            instance_create(0,0,obj_FadeOut);
            
        }
        else if(Stock_Index == 50)
        {
            obj_Master_Controller.NextRoom = Story50;
            instance_create(0,0,obj_FadeOut);
            
        }
              
        //instance_create(room_width/2, room_height/2, obj_DisplayWon);
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_SaveGameToFile();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(room_persistent)
{
    room_persistent = false;
}        
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(c_aqua);
    draw_rectangle(IngredientsWestBound[1], IngredientsUpperBound[1], IngredientsEastBound[1], IngredientsLowerBound[1], false);

draw_set_color(c_green);    
     draw_rectangle(QuantityWestBound[1], QuantityUpperBound[1], QuantityEastBound[1], QuantityLowerBound[1], false);
     
draw_set_color(c_aqua);
    draw_rectangle(IngredientsWestBound[2], IngredientsUpperBound[2], IngredientsEastBound[2], IngredientsLowerBound[2], false);

draw_set_color(c_green);    
     draw_rectangle(QuantityWestBound[2], QuantityUpperBound[2], QuantityEastBound[2], QuantityLowerBound[2], false);
     
draw_set_color(c_aqua);
    draw_rectangle(IngredientsWestBound[3], IngredientsUpperBound[3], IngredientsEastBound[3], IngredientsLowerBound[3], false);

draw_set_color(c_green);    
     draw_rectangle(QuantityWestBound[3], QuantityUpperBound[3], QuantityEastBound[3], QuantityLowerBound[3], false);

draw_set_color(c_aqua);
    draw_rectangle(IngredientsWestBound[4], IngredientsUpperBound[4], IngredientsEastBound[4], IngredientsLowerBound[4], false);

draw_set_color(c_green);    
     draw_rectangle(QuantityWestBound[4], QuantityUpperBound[4], QuantityEastBound[4], QuantityLowerBound[4], false);

draw_set_color(c_aqua);
    draw_rectangle(IngredientsWestBound[5], IngredientsUpperBound[5], IngredientsEastBound[5], IngredientsLowerBound[5], false);

draw_set_color(c_green);    
     draw_rectangle(QuantityWestBound[5], QuantityUpperBound[5], QuantityEastBound[5], QuantityLowerBound[5], false);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Stock_Count = 1;

//if there are any 1 sided mirrors
if( obj_Info.Stock_1SidedMirror[Stock_Index] &gt; 0 )
{
    draw_set_color(c_black);
    draw_text_transformed(QuantityWestBound[Stock_Count], QuantityUpperBound[Stock_Count], "x" + string( obj_Info.Stock_1SidedMirror[Stock_Index] - instance_number(obj_Mirror_1Sided_Rep) - scr_CountPlacement(obj_Mirror_1Sided)), 2, 4, 0);
}
//if there are any 2 sided mirrors
else if( obj_Info.Stock_2SidedMirror[Stock_Index] &gt; 0 )
{
    draw_set_color(c_black);
    draw_text_transformed(QuantityWestBound[Stock_Count], QuantityUpperBound[Stock_Count], "x" + string(obj_Info.Stock_2SidedMirror[Stock_Index] - instance_number(obj_Mirror_2Sided_Rep) - scr_CountPlacement(obj_Mirror_2Sided)), 2, 4, 0);
}
    
Stock_Count = Stock_Count + 1;

if(Stock_Count &gt; 1)
{
    //if there are any 2 sided mirrors
    if( obj_Info.Stock_2SidedMirror[Stock_Index] &gt; 0 )
    {
        draw_set_color(c_black);
        draw_text_transformed(QuantityWestBound[Stock_Count], QuantityUpperBound[Stock_Count], "x" + string(obj_Info.Stock_2SidedMirror[Stock_Index] - instance_number(obj_Mirror_2Sided_Rep) - scr_CountPlacement(obj_Mirror_2Sided)), 2, 4, 0);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!Targeting &amp;&amp; !Emitting)
{
    with(obj_Mirror_2Sided_Rep)
    {
        instance_change(obj_Mirror_2Sided,false);
        instance_create(x,y,obj_Brace_2Sided);
        static = false;
    }

    with(obj_Mirror_1Sided_Rep)
    {
        instance_change(obj_Mirror_1Sided,false);
        instance_create(x,y,obj_Brace_1Sided);
        static = false;
    }
    
    with(obj_Mirror_2Sided_Static)
    {
        instance_change(obj_Mirror_2Sided,false);
        instance_create(x,y,obj_Brace_2Sided);
        static = true;
    }

    with(obj_Mirror_1Sided_Static)
    {
        instance_change(obj_Mirror_1Sided,false);
        instance_create(x,y,obj_Brace_1Sided);
        static = true;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(Emitting)
{
    Emitting = false;
}
else if(!Emitting)
{
    Emitting = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
