<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>master_Game</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_SetMasterIndex();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>obj_Controller.ObjectCount += 1;
Index = -1;

//walk through ObjectRoster
for(i=0;i&lt;(obj_Controller.ObjectCount-1);i+=1)
{
    if(obj_Controller.ObjectRoster[i] == -1)
    {
        Index = i;
        obj_Controller.ObjectRoster[i] = MasterIndex;
    }
}
if(Index == -1)
{
    Index = obj_Controller.ObjectCount-1;
    obj_Controller.ObjectRoster[Index] = MasterIndex;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Lastx = x;
Lasty = y;
LastDepth = depth;

temp_x = 0;
temp_y = 0;

alarm[0] = 1;

image_index = obj_Color.Index;
image_speed = 0;
Selected = false;
Hold = (-1);

FromServer = 0;


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_DefineForRotation();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>AbsoluteX = x;
AbsoluteY = y;
CurrentAlpha = alpha;
CurrentImageAngle = image_angle;
CurrentTableAngle = obj_Table.image_angle;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//update ObjectRoster
obj_Controller.ObjectRoster[Index] = -1;
obj_Controller.ObjectCount -= 1;

if(FromServer == 0)
{
    //update server that an object left
    scr_SendRemoveObject();
}

if(obj_MainDisplay.Target != (-1))
{
    if(obj_MainDisplay.Target == id)
    {
        obj_MainDisplay.Index = (-1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(obj_Controller.Startup == 0)
{
    if(FromServer == 0)
    {
        x = mouse_x;
        y = mouse_y;
        Selected = 1;
        obj_Player.Holding = 1;
        Hold = obj_Player.Index;
        
        scr_DecodeAlpha();
        
        //update server with creating an object
        scr_SendMakeObject();
    }
    else if(FromServer == 1)
    {
        FromServer = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(Selected)
{
    x = (mouse_x - temp_x);
    y = (mouse_y - temp_y);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if the game object is in legal bounds and being held
if( (y &gt; obj_Controller.bound_y || x &gt; obj_Controller.bound_x) &amp;&amp; Hold != (-1) )
{
    obj_Player.Holding = 0;
    //instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if the game object has moved and is being held
    //this should not apply for objects being rotated, nor objects being moved by another player.
if( (Lastx != x || Lasty != y) &amp;&amp; Hold != (-1))
{
    scr_DefineForRotation();
    scr_SendUpdateObjectRotation();
    
    if(Lastx != x)
    {
        Lastx = x;
    }
    if(Lasty != y)
    {
        Lasty = y;
    }
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if object is not being held
if(depth != LastDepth)
{  
    LastDepth = depth;
    scr_SendUpdateObjectDepth(depth);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!(y &gt; obj_Controller.bound_y || x &gt; obj_Controller.bound_x))
{
    //switch hold
        //grab/release if not pointed at a SubMenu option and not pointed at an Object Option
    if((position_meeting(mouse_x, mouse_y, obj_SubMenu) == false) &amp;&amp; (position_meeting(mouse_x, mouse_y, obj_Option) == false))
    {
        //grab/release if Player is not holding or player is holding THIS object
        if(obj_Player.Holding == 0 || ((obj_Player.Holding == 1 &amp;&amp; Hold == obj_Player.Index)))
        {
            //grab/release if object is not being held or this player is holding the object
            if(Hold == (-1) || Hold == obj_Player.Index)
            {
                //if object is not marked as held
                if(Selected == false)
                {
                    //if object is not under another game object
                    if(scr_DetermineIfGameObjectUnder() == false)
                    {
                        //mark this object as being held
                        Selected = true;
                        obj_Player.Holding = 1;
                        temp_x = mouse_x - x;
                        temp_y = mouse_y - y;
                        //Hold = obj_Player.Index;
                        depth = obj_Controller.PickupHeight;
                        scr_SendUpdateObjectDepth();
                    }
            
                }
                //or if object is marked as being held
                else if(Selected == true)
                {
                    //mark this object as not being held
                    Selected = false;
                    obj_Player.Holding = 0;
                    temp_x = 0;
                    temp_y = 0;
                    scr_DetermineGameObjectHeight();

            
                    if(position_meeting(x,y,obj_Table) == false)
                    {
                        if(Hold == obj_Player.Index)
                        {
                            instance_destroy();
                        }
                    }
                }
                
                //If no player is holding this object
                if(Hold == (-1))
                 {
                    //this player is now holding this object
                    Hold = obj_Player.Index;
                 }
                 //or if this player is holding this object
                 else if(Hold == obj_Player.Index)
                 {
                    //no one is now holding this object
                    Hold = (-1);
                 }
                 scr_SendUpdateObjectHold();
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
